!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALT	kbd.h	11;"	d
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
ASFLAGS	Makefile	/^ASFLAGS = -m32 -gdwarf-2 -Wa,-divide$/;"	m
ASSERT	lapic.c	25;"	d	file:
Align	umalloc.c	/^typedef long Align;$/;"	t	file:
BACK	sh.c	12;"	d	file:
BACKSPACE	console.c	127;"	d	file:
BBLOCK	fs.h	48;"	d
BCAST	lapic.c	28;"	d	file:
BIG	usertests.asm	/^#define BIG (100*1024*1024)$/;"	d
BIG	usertests.c	1452;"	d	file:
BPB	fs.h	45;"	d
BSIZE	fs.h	6;"	d
BUSY	lapic.c	29;"	d	file:
B_DIRTY	buf.h	13;"	d
B_VALID	buf.h	12;"	d
C	console.c	189;"	d	file:
C	kbd.h	32;"	d
C	kernel.asm	/^#define C(x)  ((x)-'@')  \/\/ Control-x$/;"	d
CAPSLOCK	kbd.h	13;"	d
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer$/;"	m
CMOS_PORT	lapic.c	123;"	d	file:
CMOS_RETURN	lapic.c	124;"	d	file:
CMOS_STATA	lapic.c	163;"	d	file:
CMOS_STATB	lapic.c	164;"	d	file:
CMOS_UIP	lapic.c	165;"	d	file:
COM1	uart.c	15;"	d	file:
CONSOLE	file.h	37;"	d
CONV	kernel.asm	/^#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))$/;"	d
CONV	lapic.c	217;"	d	file:
CONV	lapic.c	224;"	d	file:
CPUS	Makefile	/^CPUS := 2$/;"	m
CR0_PE	mmu.h	8;"	d
CR0_PG	mmu.h	10;"	d
CR0_WP	mmu.h	9;"	d
CR4_PSE	mmu.h	12;"	d
CRTPORT	console.c	128;"	d	file:
CTL	kbd.h	10;"	d
DAY	lapic.c	170;"	d	file:
DEASSERT	lapic.c	26;"	d	file:
DELIVS	lapic.c	24;"	d	file:
DEVSPACE	memlayout.h	5;"	d
DIRSIZ	fs.h	51;"	d
DPL_USER	mmu.h	53;"	d
Disassembly	bootblock.asm	/^Disassembly of section .text:$/;"	l
Disassembly	cat.asm	/^Disassembly of section .text:$/;"	l
Disassembly	echo.asm	/^Disassembly of section .text:$/;"	l
Disassembly	entryother.asm	/^Disassembly of section .text:$/;"	l
Disassembly	forktest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	grep.asm	/^Disassembly of section .text:$/;"	l
Disassembly	init.asm	/^Disassembly of section .text:$/;"	l
Disassembly	initcode.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kernel.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kill.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ln.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ls.asm	/^Disassembly of section .text:$/;"	l
Disassembly	mkdir.asm	/^Disassembly of section .text:$/;"	l
Disassembly	prac1.asm	/^Disassembly of section .text:$/;"	l
Disassembly	prac2.asm	/^Disassembly of section .text:$/;"	l
Disassembly	prac3.asm	/^Disassembly of section .text:$/;"	l
Disassembly	prac4.asm	/^Disassembly of section .text:$/;"	l
Disassembly	prac5.asm	/^Disassembly of section .text:$/;"	l
Disassembly	prac6.asm	/^Disassembly of section .text:$/;"	l
Disassembly	prac7.asm	/^Disassembly of section .text:$/;"	l
Disassembly	prac8.asm	/^Disassembly of section .text:$/;"	l
Disassembly	rm.asm	/^Disassembly of section .text:$/;"	l
Disassembly	sh.asm	/^Disassembly of section .text:$/;"	l
Disassembly	stressfs.asm	/^Disassembly of section .text:$/;"	l
Disassembly	test.asm	/^Disassembly of section .text:$/;"	l
Disassembly	usertests.asm	/^Disassembly of section .text:$/;"	l
Disassembly	wc.asm	/^Disassembly of section .text:$/;"	l
Disassembly	zombie.asm	/^Disassembly of section .text:$/;"	l
E0ESC	kbd.h	17;"	d
ELF_MAGIC	elf.h	3;"	d
ELF_PROG_FLAG_EXEC	elf.h	40;"	d
ELF_PROG_FLAG_READ	elf.h	42;"	d
ELF_PROG_FLAG_WRITE	elf.h	41;"	d
ELF_PROG_LOAD	elf.h	37;"	d
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	19;"	d	file:
EOI	lapic.c	17;"	d	file:
ERROR	lapic.c	38;"	d	file:
ESR	lapic.c	20;"	d	file:
EXEC	sh.c	8;"	d	file:
EXTMEM	memlayout.h	3;"	d
EXTRA	Makefile	/^EXTRA=\\$/;"	m
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon5
FILES	Makefile	/^FILES = $(shell grep -v '^\\#' runoff.list)$/;"	m
FIXED	lapic.c	30;"	d	file:
FL_IF	mmu.h	5;"	d
FSSIZE	param.h	13;"	d
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
HOURS	lapic.c	169;"	d	file:
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	42;"	d
ICRHI	lapic.c	31;"	d	file:
ICRLO	lapic.c	21;"	d	file:
ID	lapic.c	14;"	d	file:
IDE_BSY	ide.c	17;"	d	file:
IDE_CMD_RDMUL	ide.c	24;"	d	file:
IDE_CMD_READ	ide.c	22;"	d	file:
IDE_CMD_WRITE	ide.c	23;"	d	file:
IDE_CMD_WRMUL	ide.c	25;"	d	file:
IDE_DF	ide.c	19;"	d	file:
IDE_DRDY	ide.c	18;"	d	file:
IDE_ERR	ide.c	20;"	d	file:
INIT	lapic.c	22;"	d	file:
INPUT_BUF	console.c	181;"	d	file:
INT_ACTIVELOW	ioapic.c	22;"	d	file:
INT_DISABLED	ioapic.c	20;"	d	file:
INT_LEVEL	ioapic.c	21;"	d	file:
INT_LOGICAL	ioapic.c	23;"	d	file:
IOAPIC	ioapic.c	9;"	d	file:
IO_PIC1	picirq.c	6;"	d	file:
IO_PIC2	kernel.asm	/^#define IO_PIC2         0xA0    \/\/ Slave (IRQs 8-15)$/;"	d
IO_PIC2	picirq.c	7;"	d	file:
IPB	fs.h	39;"	d
IRQ_COM1	traps.h	34;"	d
IRQ_ERROR	traps.h	36;"	d
IRQ_IDE	traps.h	35;"	d
IRQ_KBD	traps.h	33;"	d
IRQ_SPURIOUS	traps.h	37;"	d
IRQ_TIMER	traps.h	32;"	d
KBDATAP	kbd.h	5;"	d
KBSTATP	kbd.h	3;"	d
KBS_DIB	kbd.h	4;"	d
KERNBASE	memlayout.h	8;"	d
KERNLINK	memlayout.h	9;"	d
KEY_DEL	kbd.h	29;"	d
KEY_DN	kbd.h	23;"	d
KEY_END	kbd.h	21;"	d
KEY_HOME	kbd.h	20;"	d
KEY_INS	kbd.h	28;"	d
KEY_LF	kbd.h	24;"	d
KEY_PGDN	kbd.h	27;"	d
KEY_PGUP	kbd.h	26;"	d
KEY_RT	kbd.h	25;"	d
KEY_UP	kbd.h	22;"	d
KSTACKSIZE	param.h	2;"	d
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LEVEL	lapic.c	27;"	d	file:
LINT0	lapic.c	36;"	d	file:
LINT1	lapic.c	37;"	d	file:
LIST	sh.c	11;"	d	file:
LOGSIZE	param.h	11;"	d
MASKED	lapic.c	39;"	d	file:
MAXARG	param.h	9;"	d
MAXARGS	sh.c	14;"	d	file:
MAXFILE	fs.h	26;"	d
MAXOPBLOCKS	param.h	10;"	d
MEMFSOBJS	Makefile	/^MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o$/;"	m
MINS	lapic.c	168;"	d	file:
MONTH	lapic.c	171;"	d	file:
MPBOOT	mp.h	34;"	d
MPBUS	mp.h	50;"	d
MPIOAPIC	mp.h	51;"	d
MPIOINTR	mp.h	52;"	d
MPLINTR	mp.h	53;"	d
MPPROC	mp.h	49;"	d
N	forktest.asm	/^#define N  1000$/;"	d
N	forktest.c	8;"	d	file:
NBUF	param.h	12;"	d
NCPU	param.h	3;"	d
NDEV	param.h	7;"	d
NDIRECT	fs.h	24;"	d
NELEM	defs.h	190;"	d
NFILE	param.h	5;"	d
NINDIRECT	fs.h	25;"	d
NINODE	param.h	6;"	d
NINODES	mkfs.c	18;"	d	file:
NO	kbd.h	7;"	d
NOFILE	param.h	4;"	d
NPDENTRIES	mmu.h	83;"	d
NPROC	param.h	1;"	d
NPTENTRIES	mmu.h	84;"	d
NSEGS	mmu.h	22;"	d
NUMLOCK	kbd.h	14;"	d
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
O_CREATE	fcntl.h	4;"	d
O_RDONLY	fcntl.h	1;"	d
O_RDWR	fcntl.h	3;"	d
O_WRONLY	fcntl.h	2;"	d
P2V	memlayout.h	12;"	d
P2V_WO	memlayout.h	15;"	d
PCINT	lapic.c	35;"	d	file:
PDX	mmu.h	74;"	d
PDXSHIFT	mmu.h	88;"	d
PERIODIC	lapic.c	34;"	d	file:
PGADDR	mmu.h	80;"	d
PGROUNDDOWN	mmu.h	91;"	d
PGROUNDUP	mmu.h	90;"	d
PGSIZE	mmu.h	85;"	d
PHYSTOP	memlayout.h	4;"	d
PIPE	sh.c	10;"	d	file:
PIPESIZE	pipe.c	11;"	d	file:
PRINT	Makefile	/^PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)$/;"	m
PTE_ADDR	mmu.h	100;"	d
PTE_FLAGS	mmu.h	101;"	d
PTE_P	mmu.h	94;"	d
PTE_PS	mmu.h	97;"	d
PTE_U	mmu.h	96;"	d
PTE_W	mmu.h	95;"	d
PTX	mmu.h	77;"	d
PTXSHIFT	mmu.h	87;"	d
QEMU	Makefile	/^QEMU = $(shell if which qemu > \/dev\/null; \\$/;"	m
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)$/;"	m
REDIR	sh.c	9;"	d	file:
REG_ID	ioapic.c	11;"	d	file:
REG_TABLE	ioapic.c	13;"	d	file:
REG_VER	ioapic.c	12;"	d	file:
ROOTDEV	param.h	8;"	d
ROOTINO	fs.h	5;"	d
RTC_ADDR	usertests.c	1701;"	d	file:
RTC_DATA	usertests.c	1702;"	d	file:
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	15;"	d
SECS	lapic.c	167;"	d	file:
SECTOR_SIZE	ide.c	16;"	d	file:
SECTSIZE	bootmain.c	13;"	d	file:
SEG	mmu.h	43;"	d
SEG16	mmu.h	47;"	d
SEG_ASM	asm.h	11;"	d
SEG_KCODE	mmu.h	15;"	d
SEG_KDATA	mmu.h	16;"	d
SEG_NULLASM	asm.h	5;"	d
SEG_TSS	mmu.h	19;"	d
SEG_UCODE	mmu.h	17;"	d
SEG_UDATA	mmu.h	18;"	d
SETGATE	mmu.h	168;"	d
SHIFT	kbd.h	9;"	d
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	23;"	d	file:
STA_R	asm.h	18;"	d
STA_R	mmu.h	58;"	d
STA_W	asm.h	17;"	d
STA_W	mmu.h	57;"	d
STA_X	asm.h	16;"	d
STA_X	mmu.h	56;"	d
STS_IG32	mmu.h	62;"	d
STS_T32A	mmu.h	61;"	d
STS_TG32	mmu.h	63;"	d
SVR	lapic.c	18;"	d	file:
SYSCALL	usys.S	/^#define SYSCALL(name) \\$/;"	d
SYS_chdir	syscall.h	10;"	d
SYS_close	syscall.h	22;"	d
SYS_dup	syscall.h	11;"	d
SYS_exec	syscall.h	8;"	d
SYS_exit	syscall.h	3;"	d
SYS_fork	syscall.h	2;"	d
SYS_fstat	syscall.h	9;"	d
SYS_getpid	syscall.h	12;"	d
SYS_kill	syscall.h	7;"	d
SYS_link	syscall.h	20;"	d
SYS_mkdir	syscall.h	21;"	d
SYS_mknod	syscall.h	18;"	d
SYS_open	syscall.h	16;"	d
SYS_pipe	syscall.h	5;"	d
SYS_read	syscall.h	6;"	d
SYS_sbrk	syscall.h	13;"	d
SYS_sleep	syscall.h	14;"	d
SYS_unlink	syscall.h	19;"	d
SYS_uptime	syscall.h	15;"	d
SYS_wait	syscall.h	4;"	d
SYS_write	syscall.h	17;"	d
TCCR	lapic.c	41;"	d	file:
TDCR	lapic.c	42;"	d	file:
TICR	lapic.c	40;"	d	file:
TIMER	lapic.c	32;"	d	file:
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; \\$/;"	m
TPR	lapic.c	16;"	d	file:
T_ALIGN	traps.h	21;"	d
T_BOUND	traps.h	9;"	d
T_BRKPT	traps.h	7;"	d
T_DBLFLT	traps.h	12;"	d
T_DEBUG	traps.h	5;"	d
T_DEFAULT	traps.h	28;"	d
T_DEV	stat.h	3;"	d
T_DEVICE	traps.h	11;"	d
T_DIR	stat.h	1;"	d
T_DIVIDE	traps.h	4;"	d
T_FILE	stat.h	2;"	d
T_FPERR	traps.h	20;"	d
T_GPFLT	traps.h	17;"	d
T_ILLOP	traps.h	10;"	d
T_IRQ0	traps.h	30;"	d
T_MCHK	traps.h	22;"	d
T_NMI	traps.h	6;"	d
T_OFLOW	traps.h	8;"	d
T_PGFLT	traps.h	18;"	d
T_SEGNP	traps.h	15;"	d
T_SIMDERR	traps.h	23;"	d
T_STACK	traps.h	16;"	d
T_SYSCALL	traps.h	27;"	d
T_TSS	traps.h	14;"	d
ULIB	Makefile	/^ULIB = ulib.o usys.o printf.o umalloc.o$/;"	m
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=\\$/;"	m
V2P	memlayout.h	11;"	d
V2P_WO	memlayout.h	14;"	d
VER	lapic.c	15;"	d	file:
X1	lapic.c	33;"	d	file:
YEAR	lapic.c	172;"	d	file:
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_cat	cat.asm	/^_cat:     file format elf32-i386$/;"	l
_echo	echo.asm	/^_echo:     file format elf32-i386$/;"	l
_forktest	forktest.asm	/^_forktest:     file format elf32-i386$/;"	l
_grep	grep.asm	/^_grep:     file format elf32-i386$/;"	l
_init	init.asm	/^_init:     file format elf32-i386$/;"	l
_kill	kill.asm	/^_kill:     file format elf32-i386$/;"	l
_ln	ln.asm	/^_ln:     file format elf32-i386$/;"	l
_ls	ls.asm	/^_ls:     file format elf32-i386$/;"	l
_mkdir	mkdir.asm	/^_mkdir:     file format elf32-i386$/;"	l
_prac1	prac1.asm	/^_prac1:     file format elf32-i386$/;"	l
_prac2	prac2.asm	/^_prac2:     file format elf32-i386$/;"	l
_prac3	prac3.asm	/^_prac3:     file format elf32-i386$/;"	l
_prac4	prac4.asm	/^_prac4:     file format elf32-i386$/;"	l
_prac5	prac5.asm	/^_prac5:     file format elf32-i386$/;"	l
_prac6	prac6.asm	/^_prac6:     file format elf32-i386$/;"	l
_prac7	prac7.asm	/^_prac7:     file format elf32-i386$/;"	l
_prac8	prac8.asm	/^_prac8:     file format elf32-i386$/;"	l
_rm	rm.asm	/^_rm:     file format elf32-i386$/;"	l
_sh	sh.asm	/^_sh:     file format elf32-i386$/;"	l
_start	entry.S	/^_start = V2P_WO(entry)$/;"	d
_stressfs	stressfs.asm	/^_stressfs:     file format elf32-i386$/;"	l
_test	test.asm	/^_test:     file format elf32-i386$/;"	l
_usertests	usertests.asm	/^_usertests:     file format elf32-i386$/;"	l
_wc	wc.asm	/^_wc:     file format elf32-i386$/;"	l
_zombie	zombie.asm	/^_zombie:     file format elf32-i386$/;"	l
a	cat.asm	/^   a:	53                   	push   %ebx$/;"	l
a	init.asm	/^   a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)$/;"	l
a	initcode.asm	/^   a:	6a 00                	push   $0x0$/;"	l
a	kernel.asm	/^      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;$/;"	d
a	kernel.asm	/^    a = (uint*)bp->data;$/;"	d
a	kernel.asm	/^  a = (char*)PGROUNDDOWN((uint)va);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(newsz);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(oldsz);$/;"	d
a	ln.asm	/^   a:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
a	mkdir.asm	/^   a:	53                   	push   %ebx$/;"	l
a	prac1.asm	/^   a:	55                   	push   %ebp$/;"	l
a	prac2.asm	/^   a:	55                   	push   %ebp$/;"	l
a	prac3.asm	/^   a:	55                   	push   %ebp$/;"	l
a	prac4.asm	/^   a:	55                   	push   %ebp$/;"	l
a	prac5.asm	/^   a:	55                   	push   %ebp$/;"	l
a	prac6.asm	/^   a:	55                   	push   %ebp$/;"	l
a	prac7.asm	/^   a:	55                   	push   %ebp$/;"	l
a	prac8.asm	/^   a:	55                   	push   %ebp$/;"	l
a	rm.asm	/^   a:	53                   	push   %ebx$/;"	l
a	stressfs.asm	/^   a:	53                   	push   %ebx$/;"	l
a	usertests.asm	/^    a = b + 1;$/;"	d
a	usertests.asm	/^  a = sbrk(0);$/;"	d
a	wc.asm	/^   a:	53                   	push   %ebx$/;"	l
a0	cat.asm	/^  a0:	89 5c 24 08          	mov    %ebx,0x8(%esp)$/;"	l
a0	forktest.asm	/^  a0:	75 60                	jne    102 <forktest+0xc2>$/;"	l
a0	init.asm	/^  a0:	e8 8d 02 00 00       	call   332 <exit>$/;"	l
a0	ln.asm	/^  a0:	55                   	push   %ebp$/;"	l
a0	prac1.asm	/^  a0:	55                   	push   %ebp$/;"	l
a0	prac2.asm	/^  a0:	38 c8                	cmp    %cl,%al$/;"	l
a0	prac3.asm	/^  a0:	83 c1 01             	add    $0x1,%ecx$/;"	l
a0	prac5.asm	/^  a0:	38 c8                	cmp    %cl,%al$/;"	l
a0	prac6.asm	/^  a0:	38 c8                	cmp    %cl,%al$/;"	l
a0	prac8.asm	/^  a0:	38 c8                	cmp    %cl,%al$/;"	l
a0	usertests.asm	/^      a0:	e8 0b 30 00 00       	call   30b0 <sbrktest>$/;"	l
a0	wc.asm	/^  a0:	55                   	push   %ebp$/;"	l
a00	ls.asm	/^ a00:	89 d0                	mov    %edx,%eax$/;"	l
a00	usertests.asm	/^     a00:	e8 eb 33 00 00       	call   3df0 <printf>$/;"	l
a02	ls.asm	/^ a02:	89 da                	mov    %ebx,%edx$/;"	l
a04	ls.asm	/^ a04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a05	usertests.asm	/^     a05:	e8 98 32 00 00       	call   3ca2 <exit>$/;"	l
a06	sh.asm	/^     a06:	00 $/;"	l
a07	sh.asm	/^     a07:	89 74 24 04          	mov    %esi,0x4(%esp)$/;"	l
a08	ls.asm	/^ a08:	39 fe                	cmp    %edi,%esi$/;"	l
a0a	ls.asm	/^ a0a:	74 1c                	je     a28 <malloc+0xb8>$/;"	l
a0a	usertests.asm	/^     a0a:	a1 d4 61 00 00       	mov    0x61d4,%eax$/;"	l
a0b	sh.asm	/^     a0b:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
a0c	ls.asm	/^ a0c:	29 f7                	sub    %esi,%edi$/;"	l
a0e	ls.asm	/^ a0e:	89 78 04             	mov    %edi,0x4(%eax)$/;"	l
a0e	sh.asm	/^     a0e:	e8 dd fa ff ff       	call   4f0 <gettoken>$/;"	l
a0f	usertests.asm	/^     a0f:	c7 44 24 04 40 44 00 	movl   $0x4440,0x4(%esp)$/;"	l
a1	echo.asm	/^  a1:	5b                   	pop    %ebx$/;"	l
a1	kill.asm	/^  a1:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
a1	ln.asm	/^  a1:	89 e5                	mov    %esp,%ebp$/;"	l
a1	mkdir.asm	/^  a1:	5b                   	pop    %ebx$/;"	l
a1	prac1.asm	/^  a1:	89 e5                	mov    %esp,%ebp$/;"	l
a1	prac4.asm	/^  a1:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
a1	prac7.asm	/^  a1:	66 90                	xchg   %ax,%ax$/;"	l
a1	rm.asm	/^  a1:	5b                   	pop    %ebx$/;"	l
a1	test.asm	/^  a1:	5b                   	pop    %ebx$/;"	l
a1	wc.asm	/^  a1:	89 e5                	mov    %esp,%ebp$/;"	l
a1	zombie.asm	/^  a1:	31 c0                	xor    %eax,%eax$/;"	l
a11	ls.asm	/^ a11:	8d 04 f8             	lea    (%eax,%edi,8),%eax$/;"	l
a13	sh.asm	/^     a13:	89 74 24 04          	mov    %esi,0x4(%esp)$/;"	l
a14	ls.asm	/^ a14:	89 70 04             	mov    %esi,0x4(%eax)$/;"	l
a16	usertests.asm	/^     a16:	00 $/;"	l
a17	ls.asm	/^ a17:	89 15 98 0d 00 00    	mov    %edx,0xd98$/;"	l
a17	sh.asm	/^     a17:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
a17	usertests.asm	/^     a17:	89 04 24             	mov    %eax,(%esp)$/;"	l
a1a	sh.asm	/^     a1a:	e8 f1 fe ff ff       	call   910 <parseline>$/;"	l
a1a	usertests.asm	/^     a1a:	e8 d1 33 00 00       	call   3df0 <printf>$/;"	l
a1d	ls.asm	/^ a1d:	83 c0 08             	add    $0x8,%eax$/;"	l
a1f	sh.asm	/^     a1f:	c7 44 24 08 28 13 00 	movl   $0x1328,0x8(%esp)$/;"	l
a1f	usertests.asm	/^     a1f:	e8 7e 32 00 00       	call   3ca2 <exit>$/;"	l
a2	echo.asm	/^  a2:	5d                   	pop    %ebp$/;"	l
a2	forktest.asm	/^  a2:	c7 44 24 04 16 04 00 	movl   $0x416,0x4(%esp)$/;"	l
a2	mkdir.asm	/^  a2:	5d                   	pop    %ebp$/;"	l
a2	prac2.asm	/^  a2:	75 15                	jne    b9 <strcmp+0x39>$/;"	l
a2	prac5.asm	/^  a2:	75 15                	jne    b9 <strcmp+0x39>$/;"	l
a2	prac6.asm	/^  a2:	75 15                	jne    b9 <strcmp+0x39>$/;"	l
a2	prac8.asm	/^  a2:	75 15                	jne    b9 <strcmp+0x39>$/;"	l
a2	rm.asm	/^  a2:	5d                   	pop    %ebp$/;"	l
a2	sh.asm	/^      a2:	c7 04 24 40 19 00 00 	movl   $0x1940,(%esp)$/;"	l
a2	test.asm	/^  a2:	5d                   	pop    %ebp$/;"	l
a20	ls.asm	/^ a20:	83 c4 1c             	add    $0x1c,%esp$/;"	l
a23	ls.asm	/^ a23:	5b                   	pop    %ebx$/;"	l
a24	ls.asm	/^ a24:	5e                   	pop    %esi$/;"	l
a24	usertests.asm	/^     a24:	a1 d4 61 00 00       	mov    0x61d4,%eax$/;"	l
a25	ls.asm	/^ a25:	5f                   	pop    %edi$/;"	l
a26	ls.asm	/^ a26:	5d                   	pop    %ebp$/;"	l
a26	sh.asm	/^     a26:	00 $/;"	l
a27	ls.asm	/^ a27:	c3                   	ret    $/;"	l
a27	sh.asm	/^     a27:	89 74 24 04          	mov    %esi,0x4(%esp)$/;"	l
a28	ls.asm	/^ a28:	8b 08                	mov    (%eax),%ecx$/;"	l
a29	usertests.asm	/^     a29:	c7 44 24 04 2d 44 00 	movl   $0x442d,0x4(%esp)$/;"	l
a2a	ls.asm	/^ a2a:	89 0a                	mov    %ecx,(%edx)$/;"	l
a2b	sh.asm	/^     a2b:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
a2c	ls.asm	/^ a2c:	eb e9                	jmp    a17 <malloc+0xa7>$/;"	l
a2e	ls.asm	/^ a2e:	c7 05 98 0d 00 00 9c 	movl   $0xd9c,0xd98$/;"	l
a2e	sh.asm	/^     a2e:	89 c7                	mov    %eax,%edi$/;"	l
a3	echo.asm	/^  a3:	c3                   	ret    $/;"	l
a3	ln.asm	/^  a3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
a3	ls.asm	/^  a3:	e8 c8 04 00 00       	call   570 <memmove>$/;"	l
a3	mkdir.asm	/^  a3:	c3                   	ret    $/;"	l
a3	prac1.asm	/^  a3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
a3	prac3.asm	/^  a3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx$/;"	l
a3	prac7.asm	/^  a3:	66 90                	xchg   %ax,%ax$/;"	l
a3	rm.asm	/^  a3:	c3                   	ret    $/;"	l
a3	stressfs.asm	/^  a3:	00 $/;"	l
a3	test.asm	/^  a3:	c3                   	ret    $/;"	l
a3	wc.asm	/^  a3:	57                   	push   %edi$/;"	l
a3	zombie.asm	/^  a3:	eb f4                	jmp    99 <strcmp+0x39>$/;"	l
a30	sh.asm	/^     a30:	e8 fb fb ff ff       	call   630 <peek>$/;"	l
a30	usertests.asm	/^     a30:	00 $/;"	l
a31	usertests.asm	/^     a31:	89 04 24             	mov    %eax,(%esp)$/;"	l
a34	usertests.asm	/^     a34:	e8 b7 33 00 00       	call   3df0 <printf>$/;"	l
a35	ls.asm	/^ a35:	0d 00 00 $/;"	l
a35	sh.asm	/^     a35:	85 c0                	test   %eax,%eax$/;"	l
a37	sh.asm	/^     a37:	74 40                	je     a79 <parseblock+0xa9>$/;"	l
a38	ls.asm	/^ a38:	ba 9c 0d 00 00       	mov    $0xd9c,%edx$/;"	l
a39	sh.asm	/^     a39:	89 74 24 04          	mov    %esi,0x4(%esp)$/;"	l
a39	usertests.asm	/^     a39:	e8 64 32 00 00       	call   3ca2 <exit>$/;"	l
a3d	ls.asm	/^ a3d:	c7 05 9c 0d 00 00 9c 	movl   $0xd9c,0xd9c$/;"	l
a3d	sh.asm	/^     a3d:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
a3e	usertests.asm	/^     a3e:	66 90                	xchg   %ax,%ax$/;"	l
a4	cat.asm	/^  a4:	c7 44 24 04 00 0b 00 	movl   $0xb00,0x4(%esp)$/;"	l
a4	echo.asm	/^  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
a4	grep.asm	/^  a4:	c7 44 24 04 e8 09 00 	movl   $0x9e8,0x4(%esp)$/;"	l
a4	kill.asm	/^  a4:	38 d8                	cmp    %bl,%al$/;"	l
a4	mkdir.asm	/^  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
a4	prac2.asm	/^  a4:	89 d9                	mov    %ebx,%ecx$/;"	l
a4	prac4.asm	/^  a4:	38 d8                	cmp    %bl,%al$/;"	l
a4	prac5.asm	/^  a4:	89 d9                	mov    %ebx,%ecx$/;"	l
a4	prac6.asm	/^  a4:	89 d9                	mov    %ebx,%ecx$/;"	l
a4	prac8.asm	/^  a4:	89 d9                	mov    %ebx,%ecx$/;"	l
a4	rm.asm	/^  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
a4	stressfs.asm	/^  a4:	89 04 24             	mov    %eax,(%esp)$/;"	l
a4	test.asm	/^  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
a4	wc.asm	/^  a4:	56                   	push   %esi$/;"	l
a40	sh.asm	/^     a40:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)$/;"	l
a40	usertests.asm	/^     a40:	55                   	push   %ebp$/;"	l
a41	usertests.asm	/^     a41:	89 e5                	mov    %esp,%ebp$/;"	l
a43	usertests.asm	/^     a43:	83 ec 18             	sub    $0x18,%esp$/;"	l
a44	ls.asm	/^ a44:	0d 00 00 $/;"	l
a46	usertests.asm	/^     a46:	a1 d4 61 00 00       	mov    0x61d4,%eax$/;"	l
a47	ls.asm	/^ a47:	c7 05 a0 0d 00 00 00 	movl   $0x0,0xda0$/;"	l
a47	sh.asm	/^     a47:	00 $/;"	l
a48	sh.asm	/^     a48:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)$/;"	l
a4b	usertests.asm	/^     a4b:	c7 44 24 04 74 44 00 	movl   $0x4474,0x4(%esp)$/;"	l
a4e	ls.asm	/^ a4e:	00 00 00 $/;"	l
a4f	sh.asm	/^     a4f:	00 $/;"	l
a5	init.asm	/^  a5:	c7 44 24 04 b4 0a 00 	movl   $0xab4,0x4(%esp)$/;"	l
a5	prac7.asm	/^  a5:	66 90                	xchg   %ax,%ax$/;"	l
a5	usertests.asm	/^      a5:	e8 76 34 00 00       	call   3520 <validatetest>$/;"	l
a5	wc.asm	/^  a5:	31 f6                	xor    %esi,%esi$/;"	l
a5	zombie.asm	/^  a5:	0f b6 cb             	movzbl %bl,%ecx$/;"	l
a50	sh.asm	/^     a50:	e8 9b fa ff ff       	call   4f0 <gettoken>$/;"	l
a51	ls.asm	/^ a51:	e9 46 ff ff ff       	jmp    99c <malloc+0x2c>$/;"	l
a52	usertests.asm	/^     a52:	00 $/;"	l
a53	usertests.asm	/^     a53:	89 04 24             	mov    %eax,(%esp)$/;"	l
a55	sh.asm	/^     a55:	89 74 24 08          	mov    %esi,0x8(%esp)$/;"	l
a56	usertests.asm	/^     a56:	e8 95 33 00 00       	call   3df0 <printf>$/;"	l
a59	sh.asm	/^     a59:	89 5c 24 04          	mov    %ebx,0x4(%esp)$/;"	l
a5b	usertests.asm	/^     a5b:	c7 44 24 04 d8 61 00 	movl   $0x61d8,0x4(%esp)$/;"	l
a5d	sh.asm	/^     a5d:	89 3c 24             	mov    %edi,(%esp)$/;"	l
a6	kill.asm	/^  a6:	74 0e                	je     b6 <strcmp+0x26>$/;"	l
a6	ln.asm	/^  a6:	53                   	push   %ebx$/;"	l
a6	prac1.asm	/^  a6:	53                   	push   %ebx$/;"	l
a6	prac2.asm	/^  a6:	83 c2 01             	add    $0x1,%edx$/;"	l
a6	prac4.asm	/^  a6:	74 0e                	je     b6 <strcmp+0x26>$/;"	l
a6	prac5.asm	/^  a6:	83 c2 01             	add    $0x1,%edx$/;"	l
a6	prac6.asm	/^  a6:	83 c2 01             	add    $0x1,%edx$/;"	l
a6	prac8.asm	/^  a6:	83 c2 01             	add    $0x1,%edx$/;"	l
a60	sh.asm	/^     a60:	e8 2b fc ff ff       	call   690 <parseredirs>$/;"	l
a62	usertests.asm	/^     a62:	00 $/;"	l
a63	usertests.asm	/^     a63:	c7 04 24 3d 42 00 00 	movl   $0x423d,(%esp)$/;"	l
a65	sh.asm	/^     a65:	83 c4 1c             	add    $0x1c,%esp$/;"	l
a68	sh.asm	/^     a68:	5b                   	pop    %ebx$/;"	l
a69	sh.asm	/^     a69:	5e                   	pop    %esi$/;"	l
a6a	sh.asm	/^     a6a:	5f                   	pop    %edi$/;"	l
a6a	usertests.asm	/^     a6a:	e8 6b 32 00 00       	call   3cda <exec>$/;"	l
a6b	sh.asm	/^     a6b:	5d                   	pop    %ebp$/;"	l
a6c	sh.asm	/^     a6c:	c3                   	ret    $/;"	l
a6d	sh.asm	/^     a6d:	c7 04 24 0c 13 00 00 	movl   $0x130c,(%esp)$/;"	l
a6f	usertests.asm	/^     a6f:	85 c0                	test   %eax,%eax$/;"	l
a7	ln.asm	/^  a7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
a7	prac1.asm	/^  a7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
a7	prac3.asm	/^  a7:	83 c2 01             	add    $0x1,%edx$/;"	l
a7	prac7.asm	/^  a7:	66 90                	xchg   %ax,%ax$/;"	l
a7	stressfs.asm	/^  a7:	e8 f6 02 00 00       	call   3a2 <open>$/;"	l
a7	wc.asm	/^  a7:	53                   	push   %ebx$/;"	l
a71	usertests.asm	/^     a71:	78 02                	js     a75 <exectest+0x35>$/;"	l
a73	usertests.asm	/^     a73:	c9                   	leave  $/;"	l
a74	sh.asm	/^     a74:	e8 e7 f6 ff ff       	call   160 <panic>$/;"	l
a74	usertests.asm	/^     a74:	c3                   	ret    $/;"	l
a75	usertests.asm	/^     a75:	a1 d4 61 00 00       	mov    0x61d4,%eax$/;"	l
a79	sh.asm	/^     a79:	c7 04 24 17 13 00 00 	movl   $0x1317,(%esp)$/;"	l
a7a	usertests.asm	/^     a7a:	c7 44 24 04 7f 44 00 	movl   $0x447f,0x4(%esp)$/;"	l
a8	kill.asm	/^  a8:	eb 2b                	jmp    d5 <strcmp+0x45>$/;"	l
a8	ls.asm	/^  a8:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
a8	prac4.asm	/^  a8:	eb 2b                	jmp    d5 <strcmp+0x45>$/;"	l
a8	wc.asm	/^  a8:	31 db                	xor    %ebx,%ebx$/;"	l
a8	zombie.asm	/^  a8:	eb ef                	jmp    99 <strcmp+0x39>$/;"	l
a80	sh.asm	/^     a80:	e8 db f6 ff ff       	call   160 <panic>$/;"	l
a81	usertests.asm	/^     a81:	00 $/;"	l
a82	usertests.asm	/^     a82:	89 04 24             	mov    %eax,(%esp)$/;"	l
a85	sh.asm	/^     a85:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a85	usertests.asm	/^     a85:	e8 66 33 00 00       	call   3df0 <printf>$/;"	l
a89	sh.asm	/^     a89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
a8a	usertests.asm	/^     a8a:	e8 13 32 00 00       	call   3ca2 <exit>$/;"	l
a8f	usertests.asm	/^     a8f:	90                   	nop$/;"	l
a9	forktest.asm	/^  a9:	00 $/;"	l
a9	prac2.asm	/^  a9:	0f b6 02             	movzbl (%edx),%eax$/;"	l
a9	prac5.asm	/^  a9:	0f b6 02             	movzbl (%edx),%eax$/;"	l
a9	prac6.asm	/^  a9:	0f b6 02             	movzbl (%edx),%eax$/;"	l
a9	prac7.asm	/^  a9:	66 90                	xchg   %ax,%ax$/;"	l
a9	prac8.asm	/^  a9:	0f b6 02             	movzbl (%edx),%eax$/;"	l
a9	sh.asm	/^      a9:	e8 92 0b 00 00       	call   c40 <strlen>$/;"	l
a90	sh.asm	/^     a90:	55                   	push   %ebp$/;"	l
a90	usertests.asm	/^     a90:	55                   	push   %ebp$/;"	l
a91	sh.asm	/^     a91:	89 e5                	mov    %esp,%ebp$/;"	l
a91	usertests.asm	/^     a91:	89 e5                	mov    %esp,%ebp$/;"	l
a93	sh.asm	/^     a93:	53                   	push   %ebx$/;"	l
a93	usertests.asm	/^     a93:	57                   	push   %edi$/;"	l
a94	sh.asm	/^     a94:	83 ec 14             	sub    $0x14,%esp$/;"	l
a94	usertests.asm	/^     a94:	56                   	push   %esi$/;"	l
a95	usertests.asm	/^     a95:	53                   	push   %ebx$/;"	l
a96	usertests.asm	/^     a96:	83 ec 2c             	sub    $0x2c,%esp$/;"	l
a97	sh.asm	/^     a97:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
a99	usertests.asm	/^     a99:	8d 45 e0             	lea    -0x20(%ebp),%eax$/;"	l
a9a	sh.asm	/^     a9a:	85 db                	test   %ebx,%ebx$/;"	l
a9c	sh.asm	/^     a9c:	0f 84 8e 00 00 00    	je     b30 <nulterminate+0xa0>$/;"	l
a9c	usertests.asm	/^     a9c:	89 04 24             	mov    %eax,(%esp)$/;"	l
a9f	usertests.asm	/^     a9f:	e8 0e 32 00 00       	call   3cb2 <pipe>$/;"	l
aa	echo.asm	/^  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi$/;"	l
aa	forktest.asm	/^  aa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
aa	kill.asm	/^  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
aa	ln.asm	/^  aa:	0f b6 02             	movzbl (%edx),%eax$/;"	l
aa	mkdir.asm	/^  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi$/;"	l
aa	prac1.asm	/^  aa:	0f b6 02             	movzbl (%edx),%eax$/;"	l
aa	prac3.asm	/^  aa:	84 db                	test   %bl,%bl$/;"	l
aa	prac4.asm	/^  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
aa	rm.asm	/^  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi$/;"	l
aa	test.asm	/^  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi$/;"	l
aa	usertests.asm	/^      aa:	e8 61 03 00 00       	call   410 <opentest>$/;"	l
aa	wc.asm	/^  aa:	83 ec 3c             	sub    $0x3c,%esp$/;"	l
aa	zombie.asm	/^  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
aa2	sh.asm	/^     aa2:	83 3b 05             	cmpl   $0x5,(%ebx)$/;"	l
aa4	usertests.asm	/^     aa4:	85 c0                	test   %eax,%eax$/;"	l
aa5	sh.asm	/^     aa5:	77 49                	ja     af0 <nulterminate+0x60>$/;"	l
aa6	usertests.asm	/^     aa6:	0f 85 4e 01 00 00    	jne    bfa <pipe1+0x16a>$/;"	l
aa7	sh.asm	/^     aa7:	8b 03                	mov    (%ebx),%eax$/;"	l
aa9	sh.asm	/^     aa9:	ff 24 85 68 13 00 00 	jmp    *0x1368(,%eax,4)$/;"	l
aac	usertests.asm	/^     aac:	e8 e9 31 00 00       	call   3c9a <fork>$/;"	l
ab	cat.asm	/^  ab:	00 $/;"	l
ab	grep.asm	/^  ab:	00 $/;"	l
ab	ls.asm	/^  ab:	e8 50 03 00 00       	call   400 <strlen>$/;"	l
ab	prac7.asm	/^  ab:	66 90                	xchg   %ax,%ax$/;"	l
ab0	sh.asm	/^     ab0:	8b 43 04             	mov    0x4(%ebx),%eax$/;"	l
ab1	usertests.asm	/^     ab1:	83 f8 00             	cmp    $0x0,%eax$/;"	l
ab3	sh.asm	/^     ab3:	89 04 24             	mov    %eax,(%esp)$/;"	l
ab4	usertests.asm	/^     ab4:	0f 84 93 00 00 00    	je     b4d <pipe1+0xbd>$/;"	l
ab6	sh.asm	/^     ab6:	e8 d5 ff ff ff       	call   a90 <nulterminate>$/;"	l
aba	usertests.asm	/^     aba:	0f 8e 53 01 00 00    	jle    c13 <pipe1+0x183>$/;"	l
abb	sh.asm	/^     abb:	8b 43 08             	mov    0x8(%ebx),%eax$/;"	l
abe	sh.asm	/^     abe:	89 04 24             	mov    %eax,(%esp)$/;"	l
ac	cat.asm	/^  ac:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
ac	grep.asm	/^  ac:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)$/;"	l
ac	init.asm	/^  ac:	00 $/;"	l
ac	prac2.asm	/^  ac:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
ac	prac3.asm	/^  ac:	88 5a ff             	mov    %bl,-0x1(%edx)$/;"	l
ac	prac5.asm	/^  ac:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
ac	prac6.asm	/^  ac:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
ac	prac8.asm	/^  ac:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
ac	stressfs.asm	/^  ac:	89 c7                	mov    %eax,%edi$/;"	l
ac0	usertests.asm	/^     ac0:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
ac1	sh.asm	/^     ac1:	e8 ca ff ff ff       	call   a90 <nulterminate>$/;"	l
ac3	usertests.asm	/^     ac3:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
ac6	sh.asm	/^     ac6:	89 d8                	mov    %ebx,%eax$/;"	l
ac8	sh.asm	/^     ac8:	83 c4 14             	add    $0x14,%esp$/;"	l
ac8	usertests.asm	/^     ac8:	31 db                	xor    %ebx,%ebx$/;"	l
aca	usertests.asm	/^     aca:	89 04 24             	mov    %eax,(%esp)$/;"	l
acb	sh.asm	/^     acb:	5b                   	pop    %ebx$/;"	l
acc	sh.asm	/^     acc:	5d                   	pop    %ebp$/;"	l
acd	sh.asm	/^     acd:	c3                   	ret    $/;"	l
acd	usertests.asm	/^     acd:	e8 f8 31 00 00       	call   3cca <close>$/;"	l
ace	sh.asm	/^     ace:	66 90                	xchg   %ax,%ax$/;"	l
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f
acquiresleep	sleeplock.c	/^acquiresleep(struct sleeplock *lk)$/;"	f
ad	init.asm	/^  ad:	c7 04 24 14 08 00 00 	movl   $0x814,(%esp)$/;"	l
ad	ln.asm	/^  ad:	84 c0                	test   %al,%al$/;"	l
ad	prac1.asm	/^  ad:	84 c0                	test   %al,%al$/;"	l
ad	prac7.asm	/^  ad:	66 90                	xchg   %ax,%ax$/;"	l
ad	wc.asm	/^  ad:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)$/;"	l
ad0	sh.asm	/^     ad0:	8b 4b 04             	mov    0x4(%ebx),%ecx$/;"	l
ad2	usertests.asm	/^     ad2:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)$/;"	l
ad3	sh.asm	/^     ad3:	89 d8                	mov    %ebx,%eax$/;"	l
ad5	sh.asm	/^     ad5:	85 c9                	test   %ecx,%ecx$/;"	l
ad7	sh.asm	/^     ad7:	74 17                	je     af0 <nulterminate+0x60>$/;"	l
ad9	sh.asm	/^     ad9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ad9	usertests.asm	/^     ad9:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
adc	usertests.asm	/^     adc:	89 7c 24 08          	mov    %edi,0x8(%esp)$/;"	l
addr	kernel.asm	/^  addr = P2V(a);$/;"	d
addr	kernel.asm	/^  addr = myproc()->sz;$/;"	d
addr	mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic
addrs	file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode
addrs	fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode
ae	sh.asm	/^      ae:	c7 04 24 43 19 00 00 	movl   $0x1943,(%esp)$/;"	l
ae	stressfs.asm	/^  ae:	66 90                	xchg   %ax,%ax$/;"	l
ae0	sh.asm	/^     ae0:	8b 50 2c             	mov    0x2c(%eax),%edx$/;"	l
ae0	usertests.asm	/^     ae0:	c7 44 24 04 c0 89 00 	movl   $0x89c0,0x4(%esp)$/;"	l
ae3	sh.asm	/^     ae3:	83 c0 04             	add    $0x4,%eax$/;"	l
ae6	sh.asm	/^     ae6:	c6 02 00             	movb   $0x0,(%edx)$/;"	l
ae7	usertests.asm	/^     ae7:	00 $/;"	l
ae8	usertests.asm	/^     ae8:	89 04 24             	mov    %eax,(%esp)$/;"	l
ae9	sh.asm	/^     ae9:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
aeb	usertests.asm	/^     aeb:	e8 ca 31 00 00       	call   3cba <read>$/;"	l
aec	sh.asm	/^     aec:	85 d2                	test   %edx,%edx$/;"	l
aee	sh.asm	/^     aee:	75 f0                	jne    ae0 <nulterminate+0x50>$/;"	l
af	ln.asm	/^  af:	74 2d                	je     de <strcmp+0x3e>$/;"	l
af	prac1.asm	/^  af:	74 2d                	je     de <strcmp+0x3e>$/;"	l
af	prac2.asm	/^  af:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx$/;"	l
af	prac3.asm	/^  af:	75 ef                	jne    a0 <strcpy+0x10>$/;"	l
af	prac5.asm	/^  af:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx$/;"	l
af	prac6.asm	/^  af:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx$/;"	l
af	prac7.asm	/^  af:	90                   	nop$/;"	l
af	prac8.asm	/^  af:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx$/;"	l
af	usertests.asm	/^      af:	90                   	nop$/;"	l
af0	sh.asm	/^     af0:	83 c4 14             	add    $0x14,%esp$/;"	l
af0	usertests.asm	/^     af0:	85 c0                	test   %eax,%eax$/;"	l
af2	usertests.asm	/^     af2:	0f 8e b3 00 00 00    	jle    bab <pipe1+0x11b>$/;"	l
af3	sh.asm	/^     af3:	89 d8                	mov    %ebx,%eax$/;"	l
af5	sh.asm	/^     af5:	5b                   	pop    %ebx$/;"	l
af6	sh.asm	/^     af6:	5d                   	pop    %ebp$/;"	l
af7	sh.asm	/^     af7:	c3                   	ret    $/;"	l
af8	sh.asm	/^     af8:	8b 43 04             	mov    0x4(%ebx),%eax$/;"	l
af8	usertests.asm	/^     af8:	89 d9                	mov    %ebx,%ecx$/;"	l
afa	usertests.asm	/^     afa:	8d 34 03             	lea    (%ebx,%eax,1),%esi$/;"	l
afb	sh.asm	/^     afb:	89 04 24             	mov    %eax,(%esp)$/;"	l
afd	usertests.asm	/^     afd:	f7 d9                	neg    %ecx$/;"	l
afe	sh.asm	/^     afe:	e8 8d ff ff ff       	call   a90 <nulterminate>$/;"	l
aff	usertests.asm	/^     aff:	eb 09                	jmp    b0a <pipe1+0x7a>$/;"	l
align	elf.h	/^  uint align;$/;"	m	struct:proghdr
allocproc	proc.c	/^allocproc(void)$/;"	f	file:
allocuvm	vm.c	/^allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
alltraps	kernel.asm	/^alltraps:$/;"	l
alltraps	trapasm.S	/^alltraps:$/;"	l
amt	usertests.asm	/^  amt = (BIG) - (uint)a;$/;"	d
ap	cat.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	echo.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	grep.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	init.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	kill.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ln.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ls.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	mkdir.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	prac1.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	prac2.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	prac3.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	prac4.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	prac5.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	prac6.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	prac7.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	prac8.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	rm.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	sh.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	stressfs.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	test.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	usertests.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	wc.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	zombie.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
apicid	kernel.asm	/^  apicid = lapicid();$/;"	d
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc
apicid	proc.h	/^  uchar apicid;                \/\/ Local APIC ID$/;"	m	struct:cpu
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic
argc	sh.asm	/^  argc = 0;$/;"	d
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	file:
argint	syscall.c	/^argint(int n, int *ip)$/;"	f
argp	kernel.asm	/^  argp = (uint*)(void*)(&fmt + 1);$/;"	d
argptest	usertests.c	/^void argptest()$/;"	f
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f
argv	init.c	/^char *argv[] = { "sh", 0 };$/;"	v
argv	initcode.S	/^argv:$/;"	l
argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:
atoi	ulib.c	/^atoi(const char *s)$/;"	f
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc
b	cat.asm	/^   b:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
b	forktest.asm	/^   b:	e8 32 03 00 00       	call   342 <exit>$/;"	l
b	kernel.asm	/^  b = bget(dev, blockno);$/;"	d
b	kill.asm	/^   b:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
b	ls.asm	/^   b:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
b	mkdir.asm	/^   b:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
b	prac1.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	prac2.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	prac3.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	prac4.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	prac5.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	prac6.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	prac7.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	prac8.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	rm.asm	/^   b:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
b	sh.asm	/^       b:	90                   	nop$/;"	l
b	stressfs.asm	/^   b:	31 db                	xor    %ebx,%ebx$/;"	l
b	usertests.asm	/^    b = sbrk(1);$/;"	d
b	wc.asm	/^   b:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
b0	echo.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	kill.asm	/^  b0:	38 c8                	cmp    %cl,%al$/;"	l
b0	ls.asm	/^  b0:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
b0	mkdir.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	prac4.asm	/^  b0:	38 c8                	cmp    %cl,%al$/;"	l
b0	prac7.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	rm.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	stressfs.asm	/^  b0:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)$/;"	l
b0	test.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	usertests.asm	/^      b0:	e8 fb 03 00 00       	call   4b0 <writetest>$/;"	l
b0	zombie.asm	/^  b0:	55                   	push   %ebp$/;"	l
b01	usertests.asm	/^     b01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
b03	sh.asm	/^     b03:	83 c4 14             	add    $0x14,%esp$/;"	l
b06	sh.asm	/^     b06:	89 d8                	mov    %ebx,%eax$/;"	l
b08	sh.asm	/^     b08:	5b                   	pop    %ebx$/;"	l
b08	usertests.asm	/^     b08:	89 d3                	mov    %edx,%ebx$/;"	l
b09	sh.asm	/^     b09:	5d                   	pop    %ebp$/;"	l
b0a	sh.asm	/^     b0a:	c3                   	ret    $/;"	l
b0a	usertests.asm	/^     b0a:	38 9c 0b c0 89 00 00 	cmp    %bl,0x89c0(%ebx,%ecx,1)$/;"	l
b0b	sh.asm	/^     b0b:	90                   	nop$/;"	l
b0c	sh.asm	/^     b0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
b1	echo.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	forktest.asm	/^  b1:	e8 5a ff ff ff       	call   10 <printf>$/;"	l
b1	ln.asm	/^  b1:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
b1	mkdir.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	prac1.asm	/^  b1:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
b1	prac3.asm	/^  b1:	5b                   	pop    %ebx$/;"	l
b1	prac7.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	rm.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	test.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	zombie.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b10	sh.asm	/^     b10:	8b 43 04             	mov    0x4(%ebx),%eax$/;"	l
b11	usertests.asm	/^     b11:	8d 53 01             	lea    0x1(%ebx),%edx$/;"	l
b13	sh.asm	/^     b13:	89 04 24             	mov    %eax,(%esp)$/;"	l
b14	usertests.asm	/^     b14:	75 1b                	jne    b31 <pipe1+0xa1>$/;"	l
b16	sh.asm	/^     b16:	e8 75 ff ff ff       	call   a90 <nulterminate>$/;"	l
b16	usertests.asm	/^     b16:	39 f2                	cmp    %esi,%edx$/;"	l
b18	usertests.asm	/^     b18:	75 ee                	jne    b08 <pipe1+0x78>$/;"	l
b1a	usertests.asm	/^     b1a:	01 ff                	add    %edi,%edi$/;"	l
b1b	sh.asm	/^     b1b:	8b 43 0c             	mov    0xc(%ebx),%eax$/;"	l
b1c	usertests.asm	/^     b1c:	89 f3                	mov    %esi,%ebx$/;"	l
b1e	sh.asm	/^     b1e:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
b1e	usertests.asm	/^     b1e:	01 45 d4             	add    %eax,-0x2c(%ebp)$/;"	l
b2	kill.asm	/^  b2:	75 15                	jne    c9 <strcmp+0x39>$/;"	l
b2	prac3.asm	/^  b2:	5d                   	pop    %ebp$/;"	l
b2	prac4.asm	/^  b2:	75 15                	jne    c9 <strcmp+0x39>$/;"	l
b21	sh.asm	/^     b21:	83 c4 14             	add    $0x14,%esp$/;"	l
b21	usertests.asm	/^     b21:	81 ff 01 20 00 00    	cmp    $0x2001,%edi$/;"	l
b24	sh.asm	/^     b24:	89 d8                	mov    %ebx,%eax$/;"	l
b26	sh.asm	/^     b26:	5b                   	pop    %ebx$/;"	l
b27	sh.asm	/^     b27:	5d                   	pop    %ebp$/;"	l
b27	usertests.asm	/^     b27:	b8 00 20 00 00       	mov    $0x2000,%eax$/;"	l
b28	sh.asm	/^     b28:	c3                   	ret    $/;"	l
b29	sh.asm	/^     b29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
b2c	usertests.asm	/^     b2c:	0f 43 f8             	cmovae %eax,%edi$/;"	l
b2f	usertests.asm	/^     b2f:	eb a8                	jmp    ad9 <pipe1+0x49>$/;"	l
b3	cat.asm	/^  b3:	e8 aa 02 00 00       	call   362 <write>$/;"	l
b3	echo.asm	/^  b3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
b3	grep.asm	/^  b3:	e8 c8 05 00 00       	call   680 <printf>$/;"	l
b3	ls.asm	/^  b3:	bb 88 0d 00 00       	mov    $0xd88,%ebx$/;"	l
b3	mkdir.asm	/^  b3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
b3	prac2.asm	/^  b3:	84 c0                	test   %al,%al$/;"	l
b3	prac3.asm	/^  b3:	c3                   	ret    $/;"	l
b3	prac5.asm	/^  b3:	84 c0                	test   %al,%al$/;"	l
b3	prac6.asm	/^  b3:	84 c0                	test   %al,%al$/;"	l
b3	prac7.asm	/^  b3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b3	prac8.asm	/^  b3:	84 c0                	test   %al,%al$/;"	l
b3	rm.asm	/^  b3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
b3	test.asm	/^  b3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
b3	zombie.asm	/^  b3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
b30	sh.asm	/^     b30:	31 c0                	xor    %eax,%eax$/;"	l
b31	usertests.asm	/^     b31:	c7 44 24 04 ae 44 00 	movl   $0x44ae,0x4(%esp)$/;"	l
b32	sh.asm	/^     b32:	eb 94                	jmp    ac8 <nulterminate+0x38>$/;"	l
b34	sh.asm	/^     b34:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
b38	usertests.asm	/^     b38:	00 $/;"	l
b39	usertests.asm	/^     b39:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
b3a	sh.asm	/^     b3a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi$/;"	l
b4	init.asm	/^  b4:	e8 b1 02 00 00       	call   36a <exec>$/;"	l
b4	kill.asm	/^  b4:	89 d9                	mov    %ebx,%ecx$/;"	l
b4	ln.asm	/^  b4:	38 d8                	cmp    %bl,%al$/;"	l
b4	prac1.asm	/^  b4:	38 d8                	cmp    %bl,%al$/;"	l
b4	prac3.asm	/^  b4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
b4	prac4.asm	/^  b4:	89 d9                	mov    %ebx,%ecx$/;"	l
b4	wc.asm	/^  b4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)$/;"	l
b40	sh.asm	/^     b40:	55                   	push   %ebp$/;"	l
b40	usertests.asm	/^     b40:	e8 ab 32 00 00       	call   3df0 <printf>$/;"	l
b41	sh.asm	/^     b41:	89 e5                	mov    %esp,%ebp$/;"	l
b43	sh.asm	/^     b43:	56                   	push   %esi$/;"	l
b44	sh.asm	/^     b44:	53                   	push   %ebx$/;"	l
b45	sh.asm	/^     b45:	83 ec 10             	sub    $0x10,%esp$/;"	l
b45	usertests.asm	/^     b45:	83 c4 2c             	add    $0x2c,%esp$/;"	l
b48	sh.asm	/^     b48:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
b48	usertests.asm	/^     b48:	5b                   	pop    %ebx$/;"	l
b49	usertests.asm	/^     b49:	5e                   	pop    %esi$/;"	l
b4a	usertests.asm	/^     b4a:	5f                   	pop    %edi$/;"	l
b4b	sh.asm	/^     b4b:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
b4b	usertests.asm	/^     b4b:	5d                   	pop    %ebp$/;"	l
b4c	usertests.asm	/^     b4c:	c3                   	ret    $/;"	l
b4d	usertests.asm	/^     b4d:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
b4e	sh.asm	/^     b4e:	e8 ed 00 00 00       	call   c40 <strlen>$/;"	l
b5	prac2.asm	/^  b5:	75 e9                	jne    a0 <strcmp+0x20>$/;"	l
b5	prac5.asm	/^  b5:	75 e9                	jne    a0 <strcmp+0x20>$/;"	l
b5	prac6.asm	/^  b5:	75 e9                	jne    a0 <strcmp+0x20>$/;"	l
b5	prac8.asm	/^  b5:	75 e9                	jne    a0 <strcmp+0x20>$/;"	l
b5	sh.asm	/^      b5:	c6 80 3f 19 00 00 00 	movb   $0x0,0x193f(%eax)$/;"	l
b5	usertests.asm	/^      b5:	e8 06 06 00 00       	call   6c0 <writetest1>$/;"	l
b50	usertests.asm	/^     b50:	31 f6                	xor    %esi,%esi$/;"	l
b52	usertests.asm	/^     b52:	89 04 24             	mov    %eax,(%esp)$/;"	l
b53	sh.asm	/^     b53:	01 c3                	add    %eax,%ebx$/;"	l
b55	sh.asm	/^     b55:	8d 45 08             	lea    0x8(%ebp),%eax$/;"	l
b55	usertests.asm	/^     b55:	e8 70 31 00 00       	call   3cca <close>$/;"	l
b58	sh.asm	/^     b58:	89 5c 24 04          	mov    %ebx,0x4(%esp)$/;"	l
b5a	usertests.asm	/^     b5a:	89 f0                	mov    %esi,%eax$/;"	l
b5c	sh.asm	/^     b5c:	89 04 24             	mov    %eax,(%esp)$/;"	l
b5c	usertests.asm	/^     b5c:	89 f3                	mov    %esi,%ebx$/;"	l
b5e	usertests.asm	/^     b5e:	8d 96 09 04 00 00    	lea    0x409(%esi),%edx$/;"	l
b5f	sh.asm	/^     b5f:	e8 ac fd ff ff       	call   910 <parseline>$/;"	l
b6	echo.asm	/^  b6:	53                   	push   %ebx$/;"	l
b6	forktest.asm	/^  b6:	83 c4 14             	add    $0x14,%esp$/;"	l
b6	kill.asm	/^  b6:	83 c2 01             	add    $0x1,%edx$/;"	l
b6	ln.asm	/^  b6:	74 0e                	je     c6 <strcmp+0x26>$/;"	l
b6	mkdir.asm	/^  b6:	53                   	push   %ebx$/;"	l
b6	prac1.asm	/^  b6:	74 0e                	je     c6 <strcmp+0x26>$/;"	l
b6	prac4.asm	/^  b6:	83 c2 01             	add    $0x1,%edx$/;"	l
b6	prac7.asm	/^  b6:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
b6	rm.asm	/^  b6:	53                   	push   %ebx$/;"	l
b6	test.asm	/^  b6:	53                   	push   %ebx$/;"	l
b6	zombie.asm	/^  b6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
b64	sh.asm	/^     b64:	c7 44 24 08 b6 12 00 	movl   $0x12b6,0x8(%esp)$/;"	l
b64	usertests.asm	/^     b64:	f7 d8                	neg    %eax$/;"	l
b66	usertests.asm	/^     b66:	66 90                	xchg   %ax,%ax$/;"	l
b68	usertests.asm	/^     b68:	88 9c 18 c0 89 00 00 	mov    %bl,0x89c0(%eax,%ebx,1)$/;"	l
b6b	sh.asm	/^     b6b:	00 $/;"	l
b6c	sh.asm	/^     b6c:	89 5c 24 04          	mov    %ebx,0x4(%esp)$/;"	l
b6f	usertests.asm	/^     b6f:	83 c3 01             	add    $0x1,%ebx$/;"	l
b7	echo.asm	/^  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
b7	mkdir.asm	/^  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
b7	prac2.asm	/^  b7:	31 c0                	xor    %eax,%eax$/;"	l
b7	prac5.asm	/^  b7:	31 c0                	xor    %eax,%eax$/;"	l
b7	prac6.asm	/^  b7:	31 c0                	xor    %eax,%eax$/;"	l
b7	prac8.asm	/^  b7:	31 c0                	xor    %eax,%eax$/;"	l
b7	rm.asm	/^  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
b7	stressfs.asm	/^  b7:	00 $/;"	l
b7	test.asm	/^  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
b70	sh.asm	/^     b70:	89 c6                	mov    %eax,%esi$/;"	l
b72	sh.asm	/^     b72:	8d 45 08             	lea    0x8(%ebp),%eax$/;"	l
b72	usertests.asm	/^     b72:	39 d3                	cmp    %edx,%ebx$/;"	l
b74	usertests.asm	/^     b74:	75 f2                	jne    b68 <pipe1+0xd8>$/;"	l
b75	sh.asm	/^     b75:	89 04 24             	mov    %eax,(%esp)$/;"	l
b76	usertests.asm	/^     b76:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
b78	sh.asm	/^     b78:	e8 b3 fa ff ff       	call   630 <peek>$/;"	l
b79	usertests.asm	/^     b79:	89 de                	mov    %ebx,%esi$/;"	l
b7b	usertests.asm	/^     b7b:	c7 44 24 08 09 04 00 	movl   $0x409,0x8(%esp)$/;"	l
b7d	sh.asm	/^     b7d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b8	cat.asm	/^  b8:	39 d8                	cmp    %ebx,%eax$/;"	l
b8	grep.asm	/^  b8:	e8 75 04 00 00       	call   532 <exit>$/;"	l
b8	ln.asm	/^  b8:	eb 2b                	jmp    e5 <strcmp+0x45>$/;"	l
b8	ls.asm	/^  b8:	89 c6                	mov    %eax,%esi$/;"	l
b8	prac1.asm	/^  b8:	eb 2b                	jmp    e5 <strcmp+0x45>$/;"	l
b8	stressfs.asm	/^  b8:	89 74 24 04          	mov    %esi,0x4(%esp)$/;"	l
b80	sh.asm	/^     b80:	39 d8                	cmp    %ebx,%eax$/;"	l
b82	sh.asm	/^     b82:	75 11                	jne    b95 <parsecmd+0x55>$/;"	l
b82	usertests.asm	/^     b82:	00 $/;"	l
b83	usertests.asm	/^     b83:	c7 44 24 04 c0 89 00 	movl   $0x89c0,0x4(%esp)$/;"	l
b84	sh.asm	/^     b84:	89 34 24             	mov    %esi,(%esp)$/;"	l
b87	sh.asm	/^     b87:	e8 04 ff ff ff       	call   a90 <nulterminate>$/;"	l
b8a	usertests.asm	/^     b8a:	00 $/;"	l
b8b	usertests.asm	/^     b8b:	89 04 24             	mov    %eax,(%esp)$/;"	l
b8c	sh.asm	/^     b8c:	83 c4 10             	add    $0x10,%esp$/;"	l
b8e	usertests.asm	/^     b8e:	e8 2f 31 00 00       	call   3cc2 <write>$/;"	l
b8f	sh.asm	/^     b8f:	89 f0                	mov    %esi,%eax$/;"	l
b9	forktest.asm	/^  b9:	5b                   	pop    %ebx$/;"	l
b9	init.asm	/^  b9:	c7 44 24 04 17 08 00 	movl   $0x817,0x4(%esp)$/;"	l
b9	kill.asm	/^  b9:	0f b6 02             	movzbl (%edx),%eax$/;"	l
b9	prac2.asm	/^  b9:	29 c8                	sub    %ecx,%eax$/;"	l
b9	prac4.asm	/^  b9:	0f b6 02             	movzbl (%edx),%eax$/;"	l
b9	prac5.asm	/^  b9:	29 c8                	sub    %ecx,%eax$/;"	l
b9	prac6.asm	/^  b9:	29 c8                	sub    %ecx,%eax$/;"	l
b9	prac7.asm	/^  b9:	53                   	push   %ebx$/;"	l
b9	prac8.asm	/^  b9:	29 c8                	sub    %ecx,%eax$/;"	l
b9	zombie.asm	/^  b9:	74 12                	je     cd <strlen+0x1d>$/;"	l
b91	sh.asm	/^     b91:	5b                   	pop    %ebx$/;"	l
b92	sh.asm	/^     b92:	5e                   	pop    %esi$/;"	l
b93	sh.asm	/^     b93:	5d                   	pop    %ebp$/;"	l
b93	usertests.asm	/^     b93:	3d 09 04 00 00       	cmp    $0x409,%eax$/;"	l
b94	sh.asm	/^     b94:	c3                   	ret    $/;"	l
b95	sh.asm	/^     b95:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
b98	usertests.asm	/^     b98:	0f 85 8e 00 00 00    	jne    c2c <pipe1+0x19c>$/;"	l
b99	sh.asm	/^     b99:	c7 44 24 04 2a 13 00 	movl   $0x132a,0x4(%esp)$/;"	l
b9e	usertests.asm	/^     b9e:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx$/;"	l
ba	cat.asm	/^  ba:	75 28                	jne    e4 <cat+0x54>$/;"	l
ba	echo.asm	/^  ba:	0f b6 02             	movzbl (%edx),%eax$/;"	l
ba	forktest.asm	/^  ba:	5d                   	pop    %ebp$/;"	l
ba	ln.asm	/^  ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
ba	ls.asm	/^  ba:	e8 41 03 00 00       	call   400 <strlen>$/;"	l
ba	mkdir.asm	/^  ba:	0f b6 02             	movzbl (%edx),%eax$/;"	l
ba	prac1.asm	/^  ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
ba	prac3.asm	/^  ba:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi$/;"	l
ba	prac7.asm	/^  ba:	89 c2                	mov    %eax,%edx$/;"	l
ba	rm.asm	/^  ba:	0f b6 02             	movzbl (%edx),%eax$/;"	l
ba	test.asm	/^  ba:	0f b6 02             	movzbl (%edx),%eax$/;"	l
ba	usertests.asm	/^      ba:	e8 f1 07 00 00       	call   8b0 <createtest>$/;"	l
ba0	sh.asm	/^     ba0:	00 $/;"	l
ba1	sh.asm	/^     ba1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)$/;"	l
ba4	usertests.asm	/^     ba4:	75 b4                	jne    b5a <pipe1+0xca>$/;"	l
ba6	usertests.asm	/^     ba6:	e8 f7 30 00 00       	call   3ca2 <exit>$/;"	l
ba8	sh.asm	/^     ba8:	e8 83 03 00 00       	call   f30 <printf>$/;"	l
bab	usertests.asm	/^     bab:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)$/;"	l
backcmd	sh.c	/^backcmd(struct cmd *subcmd)$/;"	f
backcmd	sh.c	/^struct backcmd {$/;"	s	file:
bad	kernel.asm	/^ bad:$/;"	l
bad	kernel.asm	/^bad:$/;"	l
bad	sh.asm	/^     bad:	c7 04 24 ee 12 00 00 	movl   $0x12ee,(%esp)$/;"	l
balloc	fs.c	/^balloc(uint dev)$/;"	f	file:
balloc	mkfs.c	/^balloc(int used)$/;"	f
base	umalloc.c	/^static Header base;$/;"	v	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc
bb	forktest.asm	/^  bb:	c3                   	ret    $/;"	l
bb	prac2.asm	/^  bb:	5b                   	pop    %ebx$/;"	l
bb	prac5.asm	/^  bb:	5b                   	pop    %ebx$/;"	l
bb	prac6.asm	/^  bb:	5b                   	pop    %ebx$/;"	l
bb	prac8.asm	/^  bb:	5b                   	pop    %ebx$/;"	l
bb	wc.asm	/^  bb:	90                   	nop$/;"	l
bb	zombie.asm	/^  bb:	31 d2                	xor    %edx,%edx$/;"	l
bb2	usertests.asm	/^     bb2:	75 29                	jne    bdd <pipe1+0x14d>$/;"	l
bb4	sh.asm	/^     bb4:	e8 a7 f5 ff ff       	call   160 <panic>$/;"	l
bb4	usertests.asm	/^     bb4:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
bb7	usertests.asm	/^     bb7:	89 04 24             	mov    %eax,(%esp)$/;"	l
bb9	sh.asm	/^     bb9:	66 90                	xchg   %ax,%ax$/;"	l
bba	usertests.asm	/^     bba:	e8 0b 31 00 00       	call   3cca <close>$/;"	l
bbb	sh.asm	/^     bbb:	66 90                	xchg   %ax,%ax$/;"	l
bbd	sh.asm	/^     bbd:	66 90                	xchg   %ax,%ax$/;"	l
bbf	sh.asm	/^     bbf:	90                   	nop$/;"	l
bbf	usertests.asm	/^     bbf:	e8 e6 30 00 00       	call   3caa <wait>$/;"	l
bc	cat.asm	/^  bc:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)$/;"	l
bc	forktest.asm	/^  bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
bc	kill.asm	/^  bc:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
bc	prac2.asm	/^  bc:	5d                   	pop    %ebp$/;"	l
bc	prac4.asm	/^  bc:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
bc	prac5.asm	/^  bc:	5d                   	pop    %ebp$/;"	l
bc	prac6.asm	/^  bc:	5d                   	pop    %ebp$/;"	l
bc	prac7.asm	/^  bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
bc	prac8.asm	/^  bc:	5d                   	pop    %ebp$/;"	l
bc	sh.asm	/^      bc:	e8 91 0d 00 00       	call   e52 <chdir>$/;"	l
bc	stressfs.asm	/^  bc:	89 3c 24             	mov    %edi,(%esp)$/;"	l
bc	wc.asm	/^  bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
bc0	sh.asm	/^     bc0:	55                   	push   %ebp$/;"	l
bc1	sh.asm	/^     bc1:	89 e5                	mov    %esp,%ebp$/;"	l
bc3	sh.asm	/^     bc3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bc4	usertests.asm	/^     bc4:	c7 44 24 04 d3 44 00 	movl   $0x44d3,0x4(%esp)$/;"	l
bc6	sh.asm	/^     bc6:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
bc9	sh.asm	/^     bc9:	53                   	push   %ebx$/;"	l
bca	sh.asm	/^     bca:	89 c2                	mov    %eax,%edx$/;"	l
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon1
bcb	usertests.asm	/^     bcb:	00 $/;"	l
bcc	sh.asm	/^     bcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
bcc	usertests.asm	/^     bcc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
bcd	kernel.asm	/^  bcd = (sb & (1 << 2)) == 0;$/;"	d
bcmd	sh.asm	/^    bcmd = (struct backcmd*)cmd;$/;"	d
bd	echo.asm	/^  bd:	84 c0                	test   %al,%al$/;"	l
bd	grep.asm	/^  bd:	66 90                	xchg   %ax,%ax$/;"	l
bd	mkdir.asm	/^  bd:	84 c0                	test   %al,%al$/;"	l
bd	prac2.asm	/^  bd:	c3                   	ret    $/;"	l
bd	prac5.asm	/^  bd:	c3                   	ret    $/;"	l
bd	prac6.asm	/^  bd:	c3                   	ret    $/;"	l
bd	prac8.asm	/^  bd:	c3                   	ret    $/;"	l
bd	rm.asm	/^  bd:	84 c0                	test   %al,%al$/;"	l
bd	test.asm	/^  bd:	84 c0                	test   %al,%al$/;"	l
bd	zombie.asm	/^  bd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
bd0	sh.asm	/^     bd0:	83 c1 01             	add    $0x1,%ecx$/;"	l
bd3	sh.asm	/^     bd3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx$/;"	l
bd3	usertests.asm	/^     bd3:	e8 18 32 00 00       	call   3df0 <printf>$/;"	l
bd7	sh.asm	/^     bd7:	83 c2 01             	add    $0x1,%edx$/;"	l
bd8	usertests.asm	/^     bd8:	e9 68 ff ff ff       	jmp    b45 <pipe1+0xb5>$/;"	l
bda	kernel.asm	/^  bda = (uchar *) P2V(0x400);$/;"	d
bda	sh.asm	/^     bda:	84 db                	test   %bl,%bl$/;"	l
bdc	sh.asm	/^     bdc:	88 5a ff             	mov    %bl,-0x1(%edx)$/;"	l
bdd	usertests.asm	/^     bdd:	8b 45 d4             	mov    -0x2c(%ebp),%eax$/;"	l
bdf	sh.asm	/^     bdf:	75 ef                	jne    bd0 <strcpy+0x10>$/;"	l
be	prac2.asm	/^  be:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
be	prac5.asm	/^  be:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
be	prac6.asm	/^  be:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
be	prac8.asm	/^  be:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
be0	usertests.asm	/^     be0:	c7 44 24 04 bc 44 00 	movl   $0x44bc,0x4(%esp)$/;"	l
be1	sh.asm	/^     be1:	5b                   	pop    %ebx$/;"	l
be2	sh.asm	/^     be2:	5d                   	pop    %ebp$/;"	l
be3	sh.asm	/^     be3:	c3                   	ret    $/;"	l
be4	sh.asm	/^     be4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
be7	usertests.asm	/^     be7:	00 $/;"	l
be8	usertests.asm	/^     be8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
bea	sh.asm	/^     bea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi$/;"	l
bef	usertests.asm	/^     bef:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
begin_op	log.c	/^begin_op(void)$/;"	f
bf	echo.asm	/^  bf:	74 2d                	je     ee <strcmp+0x3e>$/;"	l
bf	grep.asm	/^  bf:	90                   	nop$/;"	l
bf	kill.asm	/^  bf:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx$/;"	l
bf	ls.asm	/^  bf:	ba 0e 00 00 00       	mov    $0xe,%edx$/;"	l
bf	mkdir.asm	/^  bf:	74 2d                	je     ee <strcmp+0x3e>$/;"	l
bf	prac4.asm	/^  bf:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx$/;"	l
bf	rm.asm	/^  bf:	74 2d                	je     ee <strcmp+0x3e>$/;"	l
bf	stressfs.asm	/^  bf:	e8 be 02 00 00       	call   382 <write>$/;"	l
bf	test.asm	/^  bf:	74 2d                	je     ee <strcmp+0x3e>$/;"	l
bf	usertests.asm	/^      bf:	90                   	nop$/;"	l
bf0	sh.asm	/^     bf0:	55                   	push   %ebp$/;"	l
bf1	sh.asm	/^     bf1:	89 e5                	mov    %esp,%ebp$/;"	l
bf3	sh.asm	/^     bf3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
bf3	usertests.asm	/^     bf3:	e8 f8 31 00 00       	call   3df0 <printf>$/;"	l
bf6	sh.asm	/^     bf6:	53                   	push   %ebx$/;"	l
bf7	sh.asm	/^     bf7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
bf8	usertests.asm	/^     bf8:	eb ac                	jmp    ba6 <pipe1+0x116>$/;"	l
bfa	sh.asm	/^     bfa:	0f b6 02             	movzbl (%edx),%eax$/;"	l
bfa	usertests.asm	/^     bfa:	c7 44 24 04 91 44 00 	movl   $0x4491,0x4(%esp)$/;"	l
bfd	sh.asm	/^     bfd:	84 c0                	test   %al,%al$/;"	l
bff	sh.asm	/^     bff:	74 2d                	je     c2e <strcmp+0x3e>$/;"	l
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	file:
bget	bio.c	/^bget(uint dev, uint blockno)$/;"	f	file:
bi	kernel.asm	/^  bi = b % BPB;$/;"	d
bigargtest	usertests.c	/^bigargtest(void)$/;"	f
bigdir	usertests.c	/^bigdir(void)$/;"	f
bigfile	usertests.c	/^bigfile(void)$/;"	f
bigwrite	usertests.c	/^bigwrite(void)$/;"	f
binit	bio.c	/^binit(void)$/;"	f
block	log.c	/^  int block[LOGSIZE];$/;"	m	struct:logheader	file:
blockno	buf.h	/^  uint blockno;$/;"	m	struct:buf
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	file:
bmapstart	fs.h	/^  uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock
bootmain	bootmain.c	/^bootmain(void)$/;"	f
bp	cat.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	echo.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	grep.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	init.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	kernel.asm	/^    bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(dev, IBLOCK(inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, addr);$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, bmap(ip, off\/BSIZE));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, ip->addrs[NDIRECT]);$/;"	d
bp	kernel.asm	/^  bp = 0;$/;"	d
bp	kernel.asm	/^  bp = bread(dev, 1);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^  bp = bread(dev, bno);$/;"	d
bp	kernel.asm	/^  bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kill.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ln.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ls.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	mkdir.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	prac1.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	prac2.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	prac3.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	prac4.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	prac5.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	prac6.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	prac7.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	prac8.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	rm.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	sh.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	stressfs.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	test.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	usertests.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	wc.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	zombie.asm	/^  bp = (Header*)ap - 1;$/;"	d
bread	bio.c	/^bread(uint dev, uint blockno)$/;"	f
brelse	bio.c	/^brelse(struct buf *b)$/;"	f
bsstest	usertests.c	/^bsstest(void)$/;"	f
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon1	typeref:struct:__anon1::buf	file:
buf	buf.h	/^struct buf {$/;"	s
buf	cat.c	/^char buf[512];$/;"	v
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon3	file:
buf	grep.c	/^char buf[1024];$/;"	v
buf	kernel.asm	/^  buf = (char*)p;$/;"	d
buf	usertests.c	/^char buf[8192];$/;"	v
buf	wc.c	/^char buf[512];$/;"	v
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	file:
c	cat.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	echo.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	echo.asm	/^   c:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
c	grep.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	grep.asm	/^   c:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
c	init.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	initcode.asm	/^   c:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
c	kernel.asm	/^        c = (c == '\\r') ? '\\n' : c;$/;"	d
c	kernel.asm	/^    c = fmt[++i] & 0xff;$/;"	d
c	kernel.asm	/^    c = input.buf[input.r++ % INPUT_BUF];$/;"	d
c	kernel.asm	/^  c = &cpus[cpuid()];$/;"	d
c	kernel.asm	/^  c = charcode[shift & (CTL | SHIFT)][data];$/;"	d
c	kernel.asm	/^  c = mycpu();$/;"	d
c	kill.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ln.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ls.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	mkdir.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	prac1.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	prac2.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	prac3.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	prac4.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	prac5.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	prac6.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	prac7.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	prac8.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	rm.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	sh.asm	/^       c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
c	sh.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	stressfs.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	test.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^  c = sbrk(-(sbrk(0) - oldbrk));$/;"	d
c	usertests.asm	/^  c = sbrk(-4096);$/;"	d
c	usertests.asm	/^  c = sbrk(0);$/;"	d
c	usertests.asm	/^  c = sbrk(1);$/;"	d
c	usertests.asm	/^  c = sbrk(4096);$/;"	d
c	wc.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	zombie.asm	/^    c = fmt[i] & 0xff;$/;"	d
c0	forktest.asm	/^  c0:	c7 04 24 24 04 00 00 	movl   $0x424,(%esp)$/;"	l
c0	grep.asm	/^  c0:	55                   	push   %ebp$/;"	l
c0	init.asm	/^  c0:	00 $/;"	l
c0	ln.asm	/^  c0:	38 c8                	cmp    %cl,%al$/;"	l
c0	prac1.asm	/^  c0:	38 c8                	cmp    %cl,%al$/;"	l
c0	prac3.asm	/^  c0:	55                   	push   %ebp$/;"	l
c0	prac7.asm	/^  c0:	83 c1 01             	add    $0x1,%ecx$/;"	l
c0	usertests.asm	/^      c0:	e8 3b 02 00 00       	call   300 <openiputtest>$/;"	l
c0	wc.asm	/^  c0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c0	zombie.asm	/^  c0:	83 c2 01             	add    $0x1,%edx$/;"	l
c01	sh.asm	/^     c01:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
c01	usertests.asm	/^     c01:	00 $/;"	l
c02	usertests.asm	/^     c02:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
c04	sh.asm	/^     c04:	38 d8                	cmp    %bl,%al$/;"	l
c06	sh.asm	/^     c06:	74 0e                	je     c16 <strcmp+0x26>$/;"	l
c08	sh.asm	/^     c08:	eb 2b                	jmp    c35 <strcmp+0x45>$/;"	l
c09	usertests.asm	/^     c09:	e8 e2 31 00 00       	call   3df0 <printf>$/;"	l
c0a	sh.asm	/^     c0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
c0e	usertests.asm	/^     c0e:	e8 8f 30 00 00       	call   3ca2 <exit>$/;"	l
c1	echo.asm	/^  c1:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
c1	grep.asm	/^  c1:	89 e5                	mov    %esp,%ebp$/;"	l
c1	init.asm	/^  c1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
c1	mkdir.asm	/^  c1:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
c1	prac2.asm	/^  c1:	31 c0                	xor    %eax,%eax$/;"	l
c1	prac3.asm	/^  c1:	89 e5                	mov    %esp,%ebp$/;"	l
c1	prac5.asm	/^  c1:	31 c0                	xor    %eax,%eax$/;"	l
c1	prac6.asm	/^  c1:	31 c0                	xor    %eax,%eax$/;"	l
c1	prac8.asm	/^  c1:	31 c0                	xor    %eax,%eax$/;"	l
c1	rm.asm	/^  c1:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
c1	sh.asm	/^      c1:	85 c0                	test   %eax,%eax$/;"	l
c1	test.asm	/^  c1:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
c10	sh.asm	/^     c10:	38 c8                	cmp    %cl,%al$/;"	l
c12	sh.asm	/^     c12:	75 15                	jne    c29 <strcmp+0x39>$/;"	l
c13	usertests.asm	/^     c13:	c7 44 24 04 dd 44 00 	movl   $0x44dd,0x4(%esp)$/;"	l
c14	sh.asm	/^     c14:	89 d9                	mov    %ebx,%ecx$/;"	l
c16	sh.asm	/^     c16:	83 c2 01             	add    $0x1,%edx$/;"	l
c19	sh.asm	/^     c19:	0f b6 02             	movzbl (%edx),%eax$/;"	l
c1a	usertests.asm	/^     c1a:	00 $/;"	l
c1b	usertests.asm	/^     c1b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
c1c	sh.asm	/^     c1c:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
c1f	sh.asm	/^     c1f:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx$/;"	l
c2	ln.asm	/^  c2:	75 15                	jne    d9 <strcmp+0x39>$/;"	l
c2	prac1.asm	/^  c2:	75 15                	jne    d9 <strcmp+0x39>$/;"	l
c22	usertests.asm	/^     c22:	e8 c9 31 00 00       	call   3df0 <printf>$/;"	l
c23	sh.asm	/^     c23:	84 c0                	test   %al,%al$/;"	l
c25	sh.asm	/^     c25:	75 e9                	jne    c10 <strcmp+0x20>$/;"	l
c27	sh.asm	/^     c27:	31 c0                	xor    %eax,%eax$/;"	l
c27	usertests.asm	/^     c27:	e8 76 30 00 00       	call   3ca2 <exit>$/;"	l
c29	sh.asm	/^     c29:	29 c8                	sub    %ecx,%eax$/;"	l
c2b	sh.asm	/^     c2b:	5b                   	pop    %ebx$/;"	l
c2c	sh.asm	/^     c2c:	5d                   	pop    %ebp$/;"	l
c2c	usertests.asm	/^     c2c:	c7 44 24 04 a0 44 00 	movl   $0x44a0,0x4(%esp)$/;"	l
c2d	sh.asm	/^     c2d:	c3                   	ret    $/;"	l
c2e	sh.asm	/^     c2e:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
c3	cat.asm	/^  c3:	00 $/;"	l
c3	grep.asm	/^  c3:	57                   	push   %edi$/;"	l
c3	kill.asm	/^  c3:	84 c0                	test   %al,%al$/;"	l
c3	prac2.asm	/^  c3:	eb f4                	jmp    b9 <strcmp+0x39>$/;"	l
c3	prac3.asm	/^  c3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
c3	prac4.asm	/^  c3:	84 c0                	test   %al,%al$/;"	l
c3	prac5.asm	/^  c3:	eb f4                	jmp    b9 <strcmp+0x39>$/;"	l
c3	prac6.asm	/^  c3:	eb f4                	jmp    b9 <strcmp+0x39>$/;"	l
c3	prac7.asm	/^  c3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebx$/;"	l
c3	prac8.asm	/^  c3:	eb f4                	jmp    b9 <strcmp+0x39>$/;"	l
c3	sh.asm	/^      c3:	79 91                	jns    56 <main+0x56>$/;"	l
c3	wc.asm	/^  c3:	c7 44 24 08 00 02 00 	movl   $0x200,0x8(%esp)$/;"	l
c3	zombie.asm	/^  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
c31	sh.asm	/^     c31:	31 c0                	xor    %eax,%eax$/;"	l
c33	sh.asm	/^     c33:	eb f4                	jmp    c29 <strcmp+0x39>$/;"	l
c33	usertests.asm	/^     c33:	00 $/;"	l
c34	usertests.asm	/^     c34:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
c35	sh.asm	/^     c35:	0f b6 cb             	movzbl %bl,%ecx$/;"	l
c38	sh.asm	/^     c38:	eb ef                	jmp    c29 <strcmp+0x39>$/;"	l
c3a	sh.asm	/^     c3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
c3b	usertests.asm	/^     c3b:	e8 b0 31 00 00       	call   3df0 <printf>$/;"	l
c4	cat.asm	/^  c4:	c7 44 24 04 00 0b 00 	movl   $0xb00,0x4(%esp)$/;"	l
c4	echo.asm	/^  c4:	38 d8                	cmp    %bl,%al$/;"	l
c4	grep.asm	/^  c4:	56                   	push   %esi$/;"	l
c4	ln.asm	/^  c4:	89 d9                	mov    %ebx,%ecx$/;"	l
c4	ls.asm	/^  c4:	29 f2                	sub    %esi,%edx$/;"	l
c4	mkdir.asm	/^  c4:	38 d8                	cmp    %bl,%al$/;"	l
c4	prac1.asm	/^  c4:	89 d9                	mov    %ebx,%ecx$/;"	l
c4	rm.asm	/^  c4:	38 d8                	cmp    %bl,%al$/;"	l
c4	stressfs.asm	/^  c4:	83 eb 01             	sub    $0x1,%ebx$/;"	l
c4	test.asm	/^  c4:	38 d8                	cmp    %bl,%al$/;"	l
c40	sh.asm	/^     c40:	55                   	push   %ebp$/;"	l
c40	usertests.asm	/^     c40:	e8 5d 30 00 00       	call   3ca2 <exit>$/;"	l
c41	sh.asm	/^     c41:	89 e5                	mov    %esp,%ebp$/;"	l
c43	sh.asm	/^     c43:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
c45	usertests.asm	/^     c45:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
c46	sh.asm	/^     c46:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
c49	sh.asm	/^     c49:	74 12                	je     c5d <strlen+0x1d>$/;"	l
c49	usertests.asm	/^     c49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
c4b	sh.asm	/^     c4b:	31 d2                	xor    %edx,%edx$/;"	l
c4d	sh.asm	/^     c4d:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
c5	grep.asm	/^  c5:	53                   	push   %ebx$/;"	l
c5	kill.asm	/^  c5:	75 e9                	jne    b0 <strcmp+0x20>$/;"	l
c5	prac2.asm	/^  c5:	0f b6 cb             	movzbl %bl,%ecx$/;"	l
c5	prac4.asm	/^  c5:	75 e9                	jne    b0 <strcmp+0x20>$/;"	l
c5	prac5.asm	/^  c5:	0f b6 cb             	movzbl %bl,%ecx$/;"	l
c5	prac6.asm	/^  c5:	0f b6 cb             	movzbl %bl,%ecx$/;"	l
c5	prac8.asm	/^  c5:	0f b6 cb             	movzbl %bl,%ecx$/;"	l
c5	sh.asm	/^      c5:	c7 44 24 08 43 19 00 	movl   $0x1943,0x8(%esp)$/;"	l
c5	usertests.asm	/^      c5:	e8 46 01 00 00       	call   210 <exitiputtest>$/;"	l
c50	sh.asm	/^     c50:	83 c2 01             	add    $0x1,%edx$/;"	l
c50	usertests.asm	/^     c50:	55                   	push   %ebp$/;"	l
c51	usertests.asm	/^     c51:	89 e5                	mov    %esp,%ebp$/;"	l
c53	sh.asm	/^     c53:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
c53	usertests.asm	/^     c53:	57                   	push   %edi$/;"	l
c54	usertests.asm	/^     c54:	56                   	push   %esi$/;"	l
c55	usertests.asm	/^     c55:	53                   	push   %ebx$/;"	l
c56	usertests.asm	/^     c56:	83 ec 2c             	sub    $0x2c,%esp$/;"	l
c57	sh.asm	/^     c57:	89 d0                	mov    %edx,%eax$/;"	l
c59	sh.asm	/^     c59:	75 f5                	jne    c50 <strlen+0x10>$/;"	l
c59	usertests.asm	/^     c59:	c7 44 24 04 ec 44 00 	movl   $0x44ec,0x4(%esp)$/;"	l
c5b	sh.asm	/^     c5b:	5d                   	pop    %ebp$/;"	l
c5c	sh.asm	/^     c5c:	c3                   	ret    $/;"	l
c5d	sh.asm	/^     c5d:	31 c0                	xor    %eax,%eax$/;"	l
c5f	sh.asm	/^     c5f:	5d                   	pop    %ebp$/;"	l
c6	echo.asm	/^  c6:	74 0e                	je     d6 <strcmp+0x26>$/;"	l
c6	grep.asm	/^  c6:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
c6	ln.asm	/^  c6:	83 c2 01             	add    $0x1,%edx$/;"	l
c6	ls.asm	/^  c6:	89 54 24 08          	mov    %edx,0x8(%esp)$/;"	l
c6	mkdir.asm	/^  c6:	74 0e                	je     d6 <strcmp+0x26>$/;"	l
c6	prac1.asm	/^  c6:	83 c2 01             	add    $0x1,%edx$/;"	l
c6	prac3.asm	/^  c6:	53                   	push   %ebx$/;"	l
c6	rm.asm	/^  c6:	74 0e                	je     d6 <strcmp+0x26>$/;"	l
c6	test.asm	/^  c6:	74 0e                	je     d6 <strcmp+0x26>$/;"	l
c60	sh.asm	/^     c60:	c3                   	ret    $/;"	l
c60	usertests.asm	/^     c60:	00 $/;"	l
c61	sh.asm	/^     c61:	eb 0d                	jmp    c70 <memset>$/;"	l
c61	usertests.asm	/^     c61:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
c63	sh.asm	/^     c63:	90                   	nop$/;"	l
c64	sh.asm	/^     c64:	90                   	nop$/;"	l
c65	sh.asm	/^     c65:	90                   	nop$/;"	l
c66	sh.asm	/^     c66:	90                   	nop$/;"	l
c67	sh.asm	/^     c67:	90                   	nop$/;"	l
c68	sh.asm	/^     c68:	90                   	nop$/;"	l
c68	usertests.asm	/^     c68:	e8 83 31 00 00       	call   3df0 <printf>$/;"	l
c69	sh.asm	/^     c69:	90                   	nop$/;"	l
c6a	sh.asm	/^     c6a:	90                   	nop$/;"	l
c6b	sh.asm	/^     c6b:	90                   	nop$/;"	l
c6c	sh.asm	/^     c6c:	90                   	nop$/;"	l
c6d	sh.asm	/^     c6d:	90                   	nop$/;"	l
c6d	usertests.asm	/^     c6d:	e8 28 30 00 00       	call   3c9a <fork>$/;"	l
c6e	sh.asm	/^     c6e:	90                   	nop$/;"	l
c6f	sh.asm	/^     c6f:	90                   	nop$/;"	l
c7	forktest.asm	/^  c7:	e8 d4 00 00 00       	call   1a0 <strlen>$/;"	l
c7	kill.asm	/^  c7:	31 c0                	xor    %eax,%eax$/;"	l
c7	prac3.asm	/^  c7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
c7	prac4.asm	/^  c7:	31 c0                	xor    %eax,%eax$/;"	l
c7	prac7.asm	/^  c7:	83 c2 01             	add    $0x1,%edx$/;"	l
c7	stressfs.asm	/^  c7:	75 e7                	jne    b0 <main+0xb0>$/;"	l
c7	zombie.asm	/^  c7:	89 d0                	mov    %edx,%eax$/;"	l
c70	sh.asm	/^     c70:	55                   	push   %ebp$/;"	l
c71	sh.asm	/^     c71:	89 e5                	mov    %esp,%ebp$/;"	l
c72	usertests.asm	/^     c72:	85 c0                	test   %eax,%eax$/;"	l
c73	sh.asm	/^     c73:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
c74	usertests.asm	/^     c74:	89 c7                	mov    %eax,%edi$/;"	l
c76	sh.asm	/^     c76:	57                   	push   %edi$/;"	l
c76	usertests.asm	/^     c76:	75 02                	jne    c7a <preempt+0x2a>$/;"	l
c77	sh.asm	/^     c77:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
c78	usertests.asm	/^     c78:	eb fe                	jmp    c78 <preempt+0x28>$/;"	l
c7a	sh.asm	/^     c7a:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c7a	usertests.asm	/^     c7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
c7d	sh.asm	/^     c7d:	89 d7                	mov    %edx,%edi$/;"	l
c7f	sh.asm	/^     c7f:	fc                   	cld    $/;"	l
c8	echo.asm	/^  c8:	eb 2b                	jmp    f5 <strcmp+0x45>$/;"	l
c8	init.asm	/^  c8:	e8 b3 03 00 00       	call   480 <printf>$/;"	l
c8	mkdir.asm	/^  c8:	eb 2b                	jmp    f5 <strcmp+0x45>$/;"	l
c8	prac2.asm	/^  c8:	eb ef                	jmp    b9 <strcmp+0x39>$/;"	l
c8	prac5.asm	/^  c8:	eb ef                	jmp    b9 <strcmp+0x39>$/;"	l
c8	prac6.asm	/^  c8:	eb ef                	jmp    b9 <strcmp+0x39>$/;"	l
c8	prac8.asm	/^  c8:	eb ef                	jmp    b9 <strcmp+0x39>$/;"	l
c8	rm.asm	/^  c8:	eb 2b                	jmp    f5 <strcmp+0x45>$/;"	l
c8	test.asm	/^  c8:	eb 2b                	jmp    f5 <strcmp+0x45>$/;"	l
c80	sh.asm	/^     c80:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
c80	usertests.asm	/^     c80:	e8 15 30 00 00       	call   3c9a <fork>$/;"	l
c82	sh.asm	/^     c82:	89 d0                	mov    %edx,%eax$/;"	l
c84	sh.asm	/^     c84:	5f                   	pop    %edi$/;"	l
c85	sh.asm	/^     c85:	5d                   	pop    %ebp$/;"	l
c85	usertests.asm	/^     c85:	85 c0                	test   %eax,%eax$/;"	l
c86	sh.asm	/^     c86:	c3                   	ret    $/;"	l
c87	sh.asm	/^     c87:	89 f6                	mov    %esi,%esi$/;"	l
c87	usertests.asm	/^     c87:	89 c6                	mov    %eax,%esi$/;"	l
c89	sh.asm	/^     c89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
c89	usertests.asm	/^     c89:	75 02                	jne    c8d <preempt+0x3d>$/;"	l
c8b	usertests.asm	/^     c8b:	eb fe                	jmp    c8b <preempt+0x3b>$/;"	l
c8d	usertests.asm	/^     c8d:	8d 45 e0             	lea    -0x20(%ebp),%eax$/;"	l
c9	grep.asm	/^  c9:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
c9	kill.asm	/^  c9:	29 c8                	sub    %ecx,%eax$/;"	l
c9	ln.asm	/^  c9:	0f b6 02             	movzbl (%edx),%eax$/;"	l
c9	prac1.asm	/^  c9:	0f b6 02             	movzbl (%edx),%eax$/;"	l
c9	prac4.asm	/^  c9:	29 c8                	sub    %ecx,%eax$/;"	l
c9	stressfs.asm	/^  c9:	89 3c 24             	mov    %edi,(%esp)$/;"	l
c9	zombie.asm	/^  c9:	75 f5                	jne    c0 <strlen+0x10>$/;"	l
c90	sh.asm	/^     c90:	55                   	push   %ebp$/;"	l
c90	usertests.asm	/^     c90:	89 04 24             	mov    %eax,(%esp)$/;"	l
c91	sh.asm	/^     c91:	89 e5                	mov    %esp,%ebp$/;"	l
c93	sh.asm	/^     c93:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c93	usertests.asm	/^     c93:	e8 1a 30 00 00       	call   3cb2 <pipe>$/;"	l
c96	sh.asm	/^     c96:	53                   	push   %ebx$/;"	l
c97	sh.asm	/^     c97:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
c98	usertests.asm	/^     c98:	e8 fd 2f 00 00       	call   3c9a <fork>$/;"	l
c9a	sh.asm	/^     c9a:	0f b6 18             	movzbl (%eax),%ebx$/;"	l
c9d	sh.asm	/^     c9d:	84 db                	test   %bl,%bl$/;"	l
c9d	usertests.asm	/^     c9d:	85 c0                	test   %eax,%eax$/;"	l
c9f	sh.asm	/^     c9f:	74 1d                	je     cbe <strchr+0x2e>$/;"	l
c9f	usertests.asm	/^     c9f:	89 c3                	mov    %eax,%ebx$/;"	l
ca	echo.asm	/^  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
ca	ls.asm	/^  ca:	c7 44 24 04 20 00 00 	movl   $0x20,0x4(%esp)$/;"	l
ca	mkdir.asm	/^  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
ca	prac2.asm	/^  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
ca	prac3.asm	/^  ca:	0f b6 02             	movzbl (%edx),%eax$/;"	l
ca	prac5.asm	/^  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
ca	prac6.asm	/^  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
ca	prac7.asm	/^  ca:	84 db                	test   %bl,%bl$/;"	l
ca	prac8.asm	/^  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
ca	rm.asm	/^  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
ca	test.asm	/^  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
ca	usertests.asm	/^      ca:	e8 61 00 00 00       	call   130 <iputtest>$/;"	l
ca	wc.asm	/^  ca:	00 $/;"	l
ca1	sh.asm	/^     ca1:	38 d3                	cmp    %dl,%bl$/;"	l
ca1	usertests.asm	/^     ca1:	75 4c                	jne    cef <preempt+0x9f>$/;"	l
ca3	sh.asm	/^     ca3:	89 d1                	mov    %edx,%ecx$/;"	l
ca3	usertests.asm	/^     ca3:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
ca5	sh.asm	/^     ca5:	75 0d                	jne    cb4 <strchr+0x24>$/;"	l
ca6	usertests.asm	/^     ca6:	89 04 24             	mov    %eax,(%esp)$/;"	l
ca7	sh.asm	/^     ca7:	eb 17                	jmp    cc0 <strchr+0x30>$/;"	l
ca9	sh.asm	/^     ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ca9	usertests.asm	/^     ca9:	e8 1c 30 00 00       	call   3cca <close>$/;"	l
cae	usertests.asm	/^     cae:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
cat	cat.c	/^cat(int fd)$/;"	f
cb	cat.asm	/^  cb:	00 $/;"	l
cb	kill.asm	/^  cb:	5b                   	pop    %ebx$/;"	l
cb	prac4.asm	/^  cb:	5b                   	pop    %ebx$/;"	l
cb	wc.asm	/^  cb:	c7 44 24 04 80 0b 00 	movl   $0xb80,0x4(%esp)$/;"	l
cb	zombie.asm	/^  cb:	5d                   	pop    %ebp$/;"	l
cb0	sh.asm	/^     cb0:	38 ca                	cmp    %cl,%dl$/;"	l
cb1	usertests.asm	/^     cb1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
cb2	sh.asm	/^     cb2:	74 0c                	je     cc0 <strchr+0x30>$/;"	l
cb4	sh.asm	/^     cb4:	83 c0 01             	add    $0x1,%eax$/;"	l
cb7	sh.asm	/^     cb7:	0f b6 10             	movzbl (%eax),%edx$/;"	l
cb8	usertests.asm	/^     cb8:	00 $/;"	l
cb9	usertests.asm	/^     cb9:	c7 44 24 04 b1 4a 00 	movl   $0x4ab1,0x4(%esp)$/;"	l
cba	sh.asm	/^     cba:	84 d2                	test   %dl,%dl$/;"	l
cbc	sh.asm	/^     cbc:	75 f2                	jne    cb0 <strchr+0x20>$/;"	l
cbe	sh.asm	/^     cbe:	31 c0                	xor    %eax,%eax$/;"	l
cc	cat.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	cat.asm	/^  cc:	89 34 24             	mov    %esi,(%esp)$/;"	l
cc	echo.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^  cc:	c7 44 24 04 24 04 00 	movl   $0x424,0x4(%esp)$/;"	l
cc	grep.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	grep.asm	/^  cc:	8b 7d 0c             	mov    0xc(%ebp),%edi$/;"	l
cc	init.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^  cc:	5d                   	pop    %ebp$/;"	l
cc	ln.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ln.asm	/^  cc:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
cc	ls.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	prac1.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	prac1.asm	/^  cc:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
cc	prac2.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	prac3.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	prac4.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	prac4.asm	/^  cc:	5d                   	pop    %ebp$/;"	l
cc	prac5.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	prac6.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	prac7.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	prac7.asm	/^  cc:	88 5a ff             	mov    %bl,-0x1(%edx)$/;"	l
cc	prac8.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	rm.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	sh.asm	/^      cc:	00 $/;"	l
cc	sh.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	stressfs.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	stressfs.asm	/^  cc:	bb 14 00 00 00       	mov    $0x14,%ebx$/;"	l
cc	test.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^        cc = sizeof(buf);$/;"	d
cc	usertests.asm	/^      cc = cc * 2;$/;"	d
cc	usertests.asm	/^    cc = 1;$/;"	d
cc	usertests.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^    cc = read(fd, buf, 300);$/;"	d
cc	usertests.asm	/^  cc = read(fd, buf, sizeof(buf));$/;"	d
cc	wc.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	zombie.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	zombie.asm	/^  cc:	c3                   	ret    $/;"	l
cc0	sh.asm	/^     cc0:	5b                   	pop    %ebx$/;"	l
cc0	usertests.asm	/^     cc0:	00 $/;"	l
cc1	sh.asm	/^     cc1:	5d                   	pop    %ebp$/;"	l
cc1	usertests.asm	/^     cc1:	89 04 24             	mov    %eax,(%esp)$/;"	l
cc2	sh.asm	/^     cc2:	c3                   	ret    $/;"	l
cc3	sh.asm	/^     cc3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
cc4	usertests.asm	/^     cc4:	e8 f9 2f 00 00       	call   3cc2 <write>$/;"	l
cc9	sh.asm	/^     cc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
cc9	usertests.asm	/^     cc9:	83 f8 01             	cmp    $0x1,%eax$/;"	l
ccc	usertests.asm	/^     ccc:	74 14                	je     ce2 <preempt+0x92>$/;"	l
cce	usertests.asm	/^     cce:	c7 44 24 04 f6 44 00 	movl   $0x44f6,0x4(%esp)$/;"	l
cd	init.asm	/^  cd:	e8 60 02 00 00       	call   332 <exit>$/;"	l
cd	kill.asm	/^  cd:	c3                   	ret    $/;"	l
cd	prac3.asm	/^  cd:	84 c0                	test   %al,%al$/;"	l
cd	prac4.asm	/^  cd:	c3                   	ret    $/;"	l
cd	sh.asm	/^      cd:	c7 44 24 04 41 13 00 	movl   $0x1341,0x4(%esp)$/;"	l
cd	zombie.asm	/^  cd:	31 c0                	xor    %eax,%eax$/;"	l
cd0	sh.asm	/^     cd0:	55                   	push   %ebp$/;"	l
cd1	sh.asm	/^     cd1:	89 e5                	mov    %esp,%ebp$/;"	l
cd3	sh.asm	/^     cd3:	57                   	push   %edi$/;"	l
cd4	sh.asm	/^     cd4:	56                   	push   %esi$/;"	l
cd5	sh.asm	/^     cd5:	31 f6                	xor    %esi,%esi$/;"	l
cd5	usertests.asm	/^     cd5:	00 $/;"	l
cd6	usertests.asm	/^     cd6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
cd7	sh.asm	/^     cd7:	53                   	push   %ebx$/;"	l
cd8	sh.asm	/^     cd8:	83 ec 2c             	sub    $0x2c,%esp$/;"	l
cdb	sh.asm	/^     cdb:	8d 7d e7             	lea    -0x19(%ebp),%edi$/;"	l
cdd	usertests.asm	/^     cdd:	e8 0e 31 00 00       	call   3df0 <printf>$/;"	l
cde	sh.asm	/^     cde:	eb 31                	jmp    d11 <gets+0x41>$/;"	l
ce	kill.asm	/^  ce:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
ce	prac4.asm	/^  ce:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
ce0	sh.asm	/^     ce0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
ce2	usertests.asm	/^     ce2:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
ce5	usertests.asm	/^     ce5:	89 04 24             	mov    %eax,(%esp)$/;"	l
ce7	sh.asm	/^     ce7:	00 $/;"	l
ce8	sh.asm	/^     ce8:	89 7c 24 04          	mov    %edi,0x4(%esp)$/;"	l
ce8	usertests.asm	/^     ce8:	e8 dd 2f 00 00       	call   3cca <close>$/;"	l
cec	sh.asm	/^     cec:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)$/;"	l
ced	usertests.asm	/^     ced:	eb fe                	jmp    ced <preempt+0x9d>$/;"	l
cef	usertests.asm	/^     cef:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
cf	cat.asm	/^  cf:	e8 86 02 00 00       	call   35a <read>$/;"	l
cf	grep.asm	/^  cf:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
cf	ln.asm	/^  cf:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx$/;"	l
cf	prac1.asm	/^  cf:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx$/;"	l
cf	prac3.asm	/^  cf:	74 2d                	je     fe <strcmp+0x3e>$/;"	l
cf	prac7.asm	/^  cf:	75 ef                	jne    c0 <strcpy+0x10>$/;"	l
cf	usertests.asm	/^      cf:	90                   	nop$/;"	l
cf	zombie.asm	/^  cf:	5d                   	pop    %ebp$/;"	l
cf2	usertests.asm	/^     cf2:	89 04 24             	mov    %eax,(%esp)$/;"	l
cf3	sh.asm	/^     cf3:	e8 02 01 00 00       	call   dfa <read>$/;"	l
cf5	usertests.asm	/^     cf5:	e8 d0 2f 00 00       	call   3cca <close>$/;"	l
cf8	sh.asm	/^     cf8:	85 c0                	test   %eax,%eax$/;"	l
cfa	sh.asm	/^     cfa:	7e 1d                	jle    d19 <gets+0x49>$/;"	l
cfa	usertests.asm	/^     cfa:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
cfc	sh.asm	/^     cfc:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax$/;"	l
cfd	usertests.asm	/^     cfd:	c7 44 24 08 00 20 00 	movl   $0x2000,0x8(%esp)$/;"	l
cgaputc	console.c	/^cgaputc(int c)$/;"	f	file:
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
char	cat.asm	/^char buf[512];$/;"	l
char	grep.asm	/^char buf[1024];$/;"	l
char	init.asm	/^char *argv[] = { "sh", 0 };$/;"	l
char	sh.asm	/^char symbols[] = "<|>&;()";$/;"	l
char	sh.asm	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	l
char	usertests.asm	/^char uninit[10000];$/;"	l
char	wc.asm	/^char buf[512];$/;"	l
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf
clearpteu	vm.c	/^clearpteu(pde_t *pgdir, char *uva)$/;"	f
cli	x86.h	/^cli(void)$/;"	f
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);$/;"	d
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);$/;"	d
cmd	sh.asm	/^    cmd = backcmd(cmd);$/;"	d
cmd	sh.asm	/^    cmd = listcmd(cmd, parseline(ps, es));$/;"	d
cmd	sh.asm	/^    cmd = pipecmd(cmd, parsepipe(ps, es));$/;"	d
cmd	sh.asm	/^  cmd = (struct execcmd*)ret;$/;"	d
cmd	sh.asm	/^  cmd = malloc(sizeof(*cmd));$/;"	d
cmd	sh.asm	/^  cmd = parseexec(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(&s, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parsepipe(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseredirs(cmd, ps, es);$/;"	d
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:
cmd	sh.c	/^struct cmd {$/;"	s	file:
cmos_read	lapic.c	/^cmos_read(uint reg)$/;"	f	file:
cmostime	lapic.c	/^cmostime(struct rtcdate *r)$/;"	f
code	kernel.asm	/^  code = P2V(0x7000);$/;"	d
commit	log.c	/^commit()$/;"	f	file:
committing	log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	file:
concreate	usertests.c	/^concreate(void)$/;"	f
conf	kernel.asm	/^  conf = (struct mpconf*) P2V((uint) mp->physaddr);$/;"	d
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon2	file:
consoleinit	console.c	/^consoleinit(void)$/;"	f
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f
consoleread	console.c	/^consoleread(struct inode *ip, char *dst, int n)$/;"	f
consolewrite	console.c	/^consolewrite(struct inode *ip, char *buf, int n)$/;"	f
consputc	console.c	/^consputc(int c)$/;"	f
context	proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	proc.h	/^struct context {$/;"	s
copyout	vm.c	/^copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f
copyuvm	vm.c	/^copyuvm(pde_t *pgdir, uint sz)$/;"	f
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:spinlock::cpu
cpuid	proc.c	/^cpuid() {$/;"	f
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	file:
createdelete	usertests.c	/^createdelete(void)$/;"	f
createtest	usertests.c	/^createtest(void)$/;"	f
crt	console.c	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	file:
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate
cs	x86.h	/^  ushort cs;$/;"	m	struct:trapframe
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
d	kernel.asm	/^  d = dst;$/;"	d
d	ln.asm	/^   d:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)$/;"	l
d	prac1.asm	/^   d:	51                   	push   %ecx$/;"	l
d	prac2.asm	/^   d:	51                   	push   %ecx$/;"	l
d	prac3.asm	/^   d:	56                   	push   %esi$/;"	l
d	prac4.asm	/^   d:	51                   	push   %ecx$/;"	l
d	prac5.asm	/^   d:	51                   	push   %ecx$/;"	l
d	prac6.asm	/^   d:	53                   	push   %ebx$/;"	l
d	prac7.asm	/^   d:	51                   	push   %ecx$/;"	l
d	prac8.asm	/^   d:	51                   	push   %ecx$/;"	l
d	stressfs.asm	/^   d:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
d0	echo.asm	/^  d0:	38 c8                	cmp    %cl,%al$/;"	l
d0	mkdir.asm	/^  d0:	38 c8                	cmp    %cl,%al$/;"	l
d0	prac2.asm	/^  d0:	55                   	push   %ebp$/;"	l
d0	prac5.asm	/^  d0:	55                   	push   %ebp$/;"	l
d0	prac6.asm	/^  d0:	55                   	push   %ebp$/;"	l
d0	prac8.asm	/^  d0:	55                   	push   %ebp$/;"	l
d0	rm.asm	/^  d0:	38 c8                	cmp    %cl,%al$/;"	l
d0	test.asm	/^  d0:	38 c8                	cmp    %cl,%al$/;"	l
d0	usertests.asm	/^      d0:	e8 6b 0d 00 00       	call   e40 <mem>$/;"	l
d0	zombie.asm	/^  d0:	c3                   	ret    $/;"	l
d00	sh.asm	/^     d00:	89 de                	mov    %ebx,%esi$/;"	l
d02	sh.asm	/^     d02:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
d04	usertests.asm	/^     d04:	00 $/;"	l
d05	sh.asm	/^     d05:	3c 0d                	cmp    $0xd,%al$/;"	l
d05	usertests.asm	/^     d05:	c7 44 24 04 c0 89 00 	movl   $0x89c0,0x4(%esp)$/;"	l
d07	sh.asm	/^     d07:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)$/;"	l
d0b	sh.asm	/^     d0b:	74 0c                	je     d19 <gets+0x49>$/;"	l
d0c	usertests.asm	/^     d0c:	00 $/;"	l
d0d	sh.asm	/^     d0d:	3c 0a                	cmp    $0xa,%al$/;"	l
d0d	usertests.asm	/^     d0d:	89 04 24             	mov    %eax,(%esp)$/;"	l
d0f	sh.asm	/^     d0f:	74 08                	je     d19 <gets+0x49>$/;"	l
d1	kill.asm	/^  d1:	31 c0                	xor    %eax,%eax$/;"	l
d1	ls.asm	/^  d1:	00 $/;"	l
d1	prac2.asm	/^  d1:	89 e5                	mov    %esp,%ebp$/;"	l
d1	prac3.asm	/^  d1:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
d1	prac4.asm	/^  d1:	31 c0                	xor    %eax,%eax$/;"	l
d1	prac5.asm	/^  d1:	89 e5                	mov    %esp,%ebp$/;"	l
d1	prac6.asm	/^  d1:	89 e5                	mov    %esp,%ebp$/;"	l
d1	prac7.asm	/^  d1:	5b                   	pop    %ebx$/;"	l
d1	prac8.asm	/^  d1:	89 e5                	mov    %esp,%ebp$/;"	l
d1	stressfs.asm	/^  d1:	e8 b4 02 00 00       	call   38a <close>$/;"	l
d1	zombie.asm	/^  d1:	eb 0d                	jmp    e0 <memset>$/;"	l
d10	usertests.asm	/^     d10:	e8 a5 2f 00 00       	call   3cba <read>$/;"	l
d11	sh.asm	/^     d11:	8d 5e 01             	lea    0x1(%esi),%ebx$/;"	l
d14	sh.asm	/^     d14:	3b 5d 0c             	cmp    0xc(%ebp),%ebx$/;"	l
d15	usertests.asm	/^     d15:	83 f8 01             	cmp    $0x1,%eax$/;"	l
d17	sh.asm	/^     d17:	7c c7                	jl     ce0 <gets+0x10>$/;"	l
d18	usertests.asm	/^     d18:	74 1c                	je     d36 <preempt+0xe6>$/;"	l
d19	sh.asm	/^     d19:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d1a	usertests.asm	/^     d1a:	c7 44 24 04 0a 45 00 	movl   $0x450a,0x4(%esp)$/;"	l
d1c	sh.asm	/^     d1c:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)$/;"	l
d2	echo.asm	/^  d2:	75 15                	jne    e9 <strcmp+0x39>$/;"	l
d2	grep.asm	/^  d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
d2	init.asm	/^  d2:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
d2	ls.asm	/^  d2:	05 88 0d 00 00       	add    $0xd88,%eax$/;"	l
d2	mkdir.asm	/^  d2:	75 15                	jne    e9 <strcmp+0x39>$/;"	l
d2	prac7.asm	/^  d2:	5d                   	pop    %ebp$/;"	l
d2	rm.asm	/^  d2:	75 15                	jne    e9 <strcmp+0x39>$/;"	l
d2	test.asm	/^  d2:	75 15                	jne    e9 <strcmp+0x39>$/;"	l
d2	wc.asm	/^  d2:	00 $/;"	l
d20	sh.asm	/^     d20:	83 c4 2c             	add    $0x2c,%esp$/;"	l
d21	usertests.asm	/^     d21:	00 $/;"	l
d22	usertests.asm	/^     d22:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d23	sh.asm	/^     d23:	5b                   	pop    %ebx$/;"	l
d24	sh.asm	/^     d24:	5e                   	pop    %esi$/;"	l
d25	sh.asm	/^     d25:	5f                   	pop    %edi$/;"	l
d26	sh.asm	/^     d26:	5d                   	pop    %ebp$/;"	l
d27	sh.asm	/^     d27:	c3                   	ret    $/;"	l
d28	sh.asm	/^     d28:	90                   	nop$/;"	l
d29	sh.asm	/^     d29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d29	usertests.asm	/^     d29:	e8 c2 30 00 00       	call   3df0 <printf>$/;"	l
d2e	usertests.asm	/^     d2e:	83 c4 2c             	add    $0x2c,%esp$/;"	l
d3	forktest.asm	/^  d3:	00 $/;"	l
d3	kill.asm	/^  d3:	eb f4                	jmp    c9 <strcmp+0x39>$/;"	l
d3	ln.asm	/^  d3:	84 c0                	test   %al,%al$/;"	l
d3	prac1.asm	/^  d3:	84 c0                	test   %al,%al$/;"	l
d3	prac2.asm	/^  d3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
d3	prac4.asm	/^  d3:	eb f4                	jmp    c9 <strcmp+0x39>$/;"	l
d3	prac5.asm	/^  d3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
d3	prac6.asm	/^  d3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
d3	prac7.asm	/^  d3:	c3                   	ret    $/;"	l
d3	prac8.asm	/^  d3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
d3	wc.asm	/^  d3:	89 04 24             	mov    %eax,(%esp)$/;"	l
d3	zombie.asm	/^  d3:	90                   	nop$/;"	l
d30	sh.asm	/^     d30:	55                   	push   %ebp$/;"	l
d31	sh.asm	/^     d31:	89 e5                	mov    %esp,%ebp$/;"	l
d31	usertests.asm	/^     d31:	5b                   	pop    %ebx$/;"	l
d32	usertests.asm	/^     d32:	5e                   	pop    %esi$/;"	l
d33	sh.asm	/^     d33:	56                   	push   %esi$/;"	l
d33	usertests.asm	/^     d33:	5f                   	pop    %edi$/;"	l
d34	sh.asm	/^     d34:	53                   	push   %ebx$/;"	l
d34	usertests.asm	/^     d34:	5d                   	pop    %ebp$/;"	l
d35	sh.asm	/^     d35:	83 ec 10             	sub    $0x10,%esp$/;"	l
d35	usertests.asm	/^     d35:	c3                   	ret    $/;"	l
d36	usertests.asm	/^     d36:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
d38	sh.asm	/^     d38:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d39	usertests.asm	/^     d39:	89 04 24             	mov    %eax,(%esp)$/;"	l
d3b	sh.asm	/^     d3b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
d3c	usertests.asm	/^     d3c:	e8 89 2f 00 00       	call   3cca <close>$/;"	l
d4	cat.asm	/^  d4:	83 f8 00             	cmp    $0x0,%eax$/;"	l
d4	echo.asm	/^  d4:	89 d9                	mov    %ebx,%ecx$/;"	l
d4	forktest.asm	/^  d4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d4	mkdir.asm	/^  d4:	89 d9                	mov    %ebx,%ecx$/;"	l
d4	prac3.asm	/^  d4:	38 d8                	cmp    %bl,%al$/;"	l
d4	prac7.asm	/^  d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
d4	rm.asm	/^  d4:	89 d9                	mov    %ebx,%ecx$/;"	l
d4	sh.asm	/^      d4:	00 $/;"	l
d4	test.asm	/^  d4:	89 d9                	mov    %ebx,%ecx$/;"	l
d4	zombie.asm	/^  d4:	90                   	nop$/;"	l
d41	usertests.asm	/^     d41:	c7 44 24 04 1d 45 00 	movl   $0x451d,0x4(%esp)$/;"	l
d42	sh.asm	/^     d42:	00 $/;"	l
d43	sh.asm	/^     d43:	89 04 24             	mov    %eax,(%esp)$/;"	l
d46	sh.asm	/^     d46:	e8 d7 00 00 00       	call   e22 <open>$/;"	l
d48	usertests.asm	/^     d48:	00 $/;"	l
d49	usertests.asm	/^     d49:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d4b	sh.asm	/^     d4b:	85 c0                	test   %eax,%eax$/;"	l
d4d	sh.asm	/^     d4d:	89 c3                	mov    %eax,%ebx$/;"	l
d4f	sh.asm	/^     d4f:	78 27                	js     d78 <stat+0x48>$/;"	l
d5	kill.asm	/^  d5:	0f b6 cb             	movzbl %bl,%ecx$/;"	l
d5	ln.asm	/^  d5:	75 e9                	jne    c0 <strcmp+0x20>$/;"	l
d5	prac1.asm	/^  d5:	75 e9                	jne    c0 <strcmp+0x20>$/;"	l
d5	prac4.asm	/^  d5:	0f b6 cb             	movzbl %bl,%ecx$/;"	l
d5	sh.asm	/^      d5:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)$/;"	l
d5	usertests.asm	/^      d5:	e8 b6 09 00 00       	call   a90 <pipe1>$/;"	l
d5	zombie.asm	/^  d5:	90                   	nop$/;"	l
d50	usertests.asm	/^     d50:	e8 9b 30 00 00       	call   3df0 <printf>$/;"	l
d51	sh.asm	/^     d51:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d54	sh.asm	/^     d54:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
d55	usertests.asm	/^     d55:	89 3c 24             	mov    %edi,(%esp)$/;"	l
d57	sh.asm	/^     d57:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
d58	usertests.asm	/^     d58:	e8 75 2f 00 00       	call   3cd2 <kill>$/;"	l
d5b	sh.asm	/^     d5b:	e8 da 00 00 00       	call   e3a <fstat>$/;"	l
d5d	usertests.asm	/^     d5d:	89 34 24             	mov    %esi,(%esp)$/;"	l
d6	echo.asm	/^  d6:	83 c2 01             	add    $0x1,%edx$/;"	l
d6	mkdir.asm	/^  d6:	83 c2 01             	add    $0x1,%edx$/;"	l
d6	prac2.asm	/^  d6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
d6	prac3.asm	/^  d6:	74 0e                	je     e6 <strcmp+0x26>$/;"	l
d6	prac5.asm	/^  d6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
d6	prac6.asm	/^  d6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
d6	prac8.asm	/^  d6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
d6	rm.asm	/^  d6:	83 c2 01             	add    $0x1,%edx$/;"	l
d6	stressfs.asm	/^  d6:	c7 44 24 04 33 08 00 	movl   $0x833,0x4(%esp)$/;"	l
d6	test.asm	/^  d6:	83 c2 01             	add    $0x1,%edx$/;"	l
d6	wc.asm	/^  d6:	e8 ef 02 00 00       	call   3ca <read>$/;"	l
d6	zombie.asm	/^  d6:	90                   	nop$/;"	l
d60	sh.asm	/^     d60:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
d60	usertests.asm	/^     d60:	e8 6d 2f 00 00       	call   3cd2 <kill>$/;"	l
d63	sh.asm	/^     d63:	89 c6                	mov    %eax,%esi$/;"	l
d65	sh.asm	/^     d65:	e8 a0 00 00 00       	call   e0a <close>$/;"	l
d65	usertests.asm	/^     d65:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
d68	usertests.asm	/^     d68:	e8 65 2f 00 00       	call   3cd2 <kill>$/;"	l
d6a	sh.asm	/^     d6a:	89 f0                	mov    %esi,%eax$/;"	l
d6c	sh.asm	/^     d6c:	83 c4 10             	add    $0x10,%esp$/;"	l
d6d	usertests.asm	/^     d6d:	c7 44 24 04 26 45 00 	movl   $0x4526,0x4(%esp)$/;"	l
d6f	sh.asm	/^     d6f:	5b                   	pop    %ebx$/;"	l
d7	cat.asm	/^  d7:	89 c3                	mov    %eax,%ebx$/;"	l
d7	ln.asm	/^  d7:	31 c0                	xor    %eax,%eax$/;"	l
d7	ls.asm	/^  d7:	89 04 24             	mov    %eax,(%esp)$/;"	l
d7	prac1.asm	/^  d7:	31 c0                	xor    %eax,%eax$/;"	l
d7	zombie.asm	/^  d7:	90                   	nop$/;"	l
d70	sh.asm	/^     d70:	5e                   	pop    %esi$/;"	l
d71	sh.asm	/^     d71:	5d                   	pop    %ebp$/;"	l
d72	sh.asm	/^     d72:	c3                   	ret    $/;"	l
d73	sh.asm	/^     d73:	90                   	nop$/;"	l
d74	sh.asm	/^     d74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d74	usertests.asm	/^     d74:	00 $/;"	l
d75	usertests.asm	/^     d75:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d78	sh.asm	/^     d78:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
d7c	usertests.asm	/^     d7c:	e8 6f 30 00 00       	call   3df0 <printf>$/;"	l
d7d	sh.asm	/^     d7d:	eb ed                	jmp    d6c <stat+0x3c>$/;"	l
d7f	sh.asm	/^     d7f:	90                   	nop$/;"	l
d8	grep.asm	/^  d8:	89 5c 24 04          	mov    %ebx,0x4(%esp)$/;"	l
d8	kill.asm	/^  d8:	eb ef                	jmp    c9 <strcmp+0x39>$/;"	l
d8	prac3.asm	/^  d8:	eb 2b                	jmp    105 <strcmp+0x45>$/;"	l
d8	prac4.asm	/^  d8:	eb ef                	jmp    c9 <strcmp+0x39>$/;"	l
d8	zombie.asm	/^  d8:	90                   	nop$/;"	l
d80	sh.asm	/^     d80:	55                   	push   %ebp$/;"	l
d81	sh.asm	/^     d81:	89 e5                	mov    %esp,%ebp$/;"	l
d81	usertests.asm	/^     d81:	e8 24 2f 00 00       	call   3caa <wait>$/;"	l
d83	sh.asm	/^     d83:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
d86	sh.asm	/^     d86:	53                   	push   %ebx$/;"	l
d86	usertests.asm	/^     d86:	e8 1f 2f 00 00       	call   3caa <wait>$/;"	l
d87	sh.asm	/^     d87:	0f be 11             	movsbl (%ecx),%edx$/;"	l
d8a	sh.asm	/^     d8a:	8d 42 d0             	lea    -0x30(%edx),%eax$/;"	l
d8b	usertests.asm	/^     d8b:	90                   	nop$/;"	l
d8c	usertests.asm	/^     d8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d8d	sh.asm	/^     d8d:	3c 09                	cmp    $0x9,%al$/;"	l
d8f	sh.asm	/^     d8f:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d9	cat.asm	/^  d9:	7f c5                	jg     a0 <cat+0x10>$/;"	l
d9	echo.asm	/^  d9:	0f b6 02             	movzbl (%edx),%eax$/;"	l
d9	init.asm	/^  d9:	00 $/;"	l
d9	ln.asm	/^  d9:	29 c8                	sub    %ecx,%eax$/;"	l
d9	mkdir.asm	/^  d9:	0f b6 02             	movzbl (%edx),%eax$/;"	l
d9	prac1.asm	/^  d9:	29 c8                	sub    %ecx,%eax$/;"	l
d9	prac2.asm	/^  d9:	74 12                	je     ed <strlen+0x1d>$/;"	l
d9	prac5.asm	/^  d9:	74 12                	je     ed <strlen+0x1d>$/;"	l
d9	prac6.asm	/^  d9:	74 12                	je     ed <strlen+0x1d>$/;"	l
d9	prac8.asm	/^  d9:	74 12                	je     ed <strlen+0x1d>$/;"	l
d9	rm.asm	/^  d9:	0f b6 02             	movzbl (%edx),%eax$/;"	l
d9	test.asm	/^  d9:	0f b6 02             	movzbl (%edx),%eax$/;"	l
d9	zombie.asm	/^  d9:	90                   	nop$/;"	l
d90	usertests.asm	/^     d90:	e8 15 2f 00 00       	call   3caa <wait>$/;"	l
d94	sh.asm	/^     d94:	77 17                	ja     dad <atoi+0x2d>$/;"	l
d95	usertests.asm	/^     d95:	c7 44 24 04 2f 45 00 	movl   $0x452f,0x4(%esp)$/;"	l
d96	sh.asm	/^     d96:	66 90                	xchg   %ax,%ax$/;"	l
d98	sh.asm	/^     d98:	83 c1 01             	add    $0x1,%ecx$/;"	l
d9b	sh.asm	/^     d9b:	8d 04 80             	lea    (%eax,%eax,4),%eax$/;"	l
d9c	usertests.asm	/^     d9c:	00 $/;"	l
d9d	usertests.asm	/^     d9d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
d9e	sh.asm	/^     d9e:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eax$/;"	l
da	init.asm	/^  da:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)$/;"	l
da	kill.asm	/^  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
da	ls.asm	/^  da:	e8 51 03 00 00       	call   430 <memset>$/;"	l
da	prac3.asm	/^  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
da	prac4.asm	/^  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
da	prac7.asm	/^  da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edi$/;"	l
da	usertests.asm	/^      da:	e8 71 0b 00 00       	call   c50 <preempt>$/;"	l
da	zombie.asm	/^  da:	90                   	nop$/;"	l
da2	sh.asm	/^     da2:	0f be 11             	movsbl (%ecx),%edx$/;"	l
da4	usertests.asm	/^     da4:	e8 47 30 00 00       	call   3df0 <printf>$/;"	l
da5	sh.asm	/^     da5:	8d 5a d0             	lea    -0x30(%edx),%ebx$/;"	l
da8	sh.asm	/^     da8:	80 fb 09             	cmp    $0x9,%bl$/;"	l
da9	usertests.asm	/^     da9:	eb 83                	jmp    d2e <preempt+0xde>$/;"	l
dab	sh.asm	/^     dab:	76 eb                	jbe    d98 <atoi+0x18>$/;"	l
dab	usertests.asm	/^     dab:	90                   	nop$/;"	l
dac	usertests.asm	/^     dac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
dad	sh.asm	/^     dad:	5b                   	pop    %ebx$/;"	l
dae	sh.asm	/^     dae:	5d                   	pop    %ebp$/;"	l
daf	sh.asm	/^     daf:	c3                   	ret    $/;"	l
data	buf.h	/^  uchar data[BSIZE];$/;"	m	struct:buf
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	file:
data	kernel.asm	/^    data = (shift & E0ESC ? data : data & 0x7F);$/;"	d
data	kernel.asm	/^  data = inb(KBDATAP);$/;"	d
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:
day	date.h	/^  uint day;$/;"	m	struct:rtcdate
db	cat.asm	/^  db:	75 20                	jne    fd <cat+0x6d>$/;"	l
db	forktest.asm	/^  db:	89 44 24 08          	mov    %eax,0x8(%esp)$/;"	l
db	ln.asm	/^  db:	5b                   	pop    %ebx$/;"	l
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
db	prac1.asm	/^  db:	5b                   	pop    %ebx$/;"	l
db	prac2.asm	/^  db:	31 d2                	xor    %edx,%edx$/;"	l
db	prac5.asm	/^  db:	31 d2                	xor    %edx,%edx$/;"	l
db	prac6.asm	/^  db:	31 d2                	xor    %edx,%edx$/;"	l
db	prac8.asm	/^  db:	31 d2                	xor    %edx,%edx$/;"	l
db	wc.asm	/^  db:	83 f8 00             	cmp    $0x0,%eax$/;"	l
db	zombie.asm	/^  db:	90                   	nop$/;"	l
db0	sh.asm	/^     db0:	55                   	push   %ebp$/;"	l
db0	usertests.asm	/^     db0:	55                   	push   %ebp$/;"	l
db1	sh.asm	/^     db1:	31 d2                	xor    %edx,%edx$/;"	l
db1	usertests.asm	/^     db1:	89 e5                	mov    %esp,%ebp$/;"	l
db3	sh.asm	/^     db3:	89 e5                	mov    %esp,%ebp$/;"	l
db3	usertests.asm	/^     db3:	56                   	push   %esi$/;"	l
db4	usertests.asm	/^     db4:	be 64 00 00 00       	mov    $0x64,%esi$/;"	l
db5	sh.asm	/^     db5:	56                   	push   %esi$/;"	l
db6	sh.asm	/^     db6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
db9	sh.asm	/^     db9:	53                   	push   %ebx$/;"	l
db9	usertests.asm	/^     db9:	53                   	push   %ebx$/;"	l
dba	sh.asm	/^     dba:	8b 5d 10             	mov    0x10(%ebp),%ebx$/;"	l
dba	usertests.asm	/^     dba:	83 ec 10             	sub    $0x10,%esp$/;"	l
dbd	sh.asm	/^     dbd:	8b 75 0c             	mov    0xc(%ebp),%esi$/;"	l
dbd	usertests.asm	/^     dbd:	eb 13                	jmp    dd2 <exitwait+0x22>$/;"	l
dbf	usertests.asm	/^     dbf:	90                   	nop$/;"	l
dc	echo.asm	/^  dc:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
dc	grep.asm	/^  dc:	89 3c 24             	mov    %edi,(%esp)$/;"	l
dc	ln.asm	/^  dc:	5d                   	pop    %ebp$/;"	l
dc	mkdir.asm	/^  dc:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
dc	prac1.asm	/^  dc:	5d                   	pop    %ebp$/;"	l
dc	rm.asm	/^  dc:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
dc	sh.asm	/^      dc:	e8 4f 0e 00 00       	call   f30 <printf>$/;"	l
dc	test.asm	/^  dc:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
dc	zombie.asm	/^  dc:	90                   	nop$/;"	l
dc0	sh.asm	/^     dc0:	85 db                	test   %ebx,%ebx$/;"	l
dc0	usertests.asm	/^     dc0:	74 71                	je     e33 <exitwait+0x83>$/;"	l
dc2	sh.asm	/^     dc2:	7e 12                	jle    dd6 <memmove+0x26>$/;"	l
dc2	usertests.asm	/^     dc2:	e8 e3 2e 00 00       	call   3caa <wait>$/;"	l
dc4	sh.asm	/^     dc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
dc7	usertests.asm	/^     dc7:	39 d8                	cmp    %ebx,%eax$/;"	l
dc8	sh.asm	/^     dc8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecx$/;"	l
dc9	usertests.asm	/^     dc9:	75 2d                	jne    df8 <exitwait+0x48>$/;"	l
dcb	usertests.asm	/^     dcb:	83 ee 01             	sub    $0x1,%esi$/;"	l
dcc	sh.asm	/^     dcc:	88 0c 10             	mov    %cl,(%eax,%edx,1)$/;"	l
dce	usertests.asm	/^     dce:	66 90                	xchg   %ax,%ax$/;"	l
dcf	sh.asm	/^     dcf:	83 c2 01             	add    $0x1,%edx$/;"	l
dd	cat.asm	/^  dd:	83 c4 10             	add    $0x10,%esp$/;"	l
dd	ln.asm	/^  dd:	c3                   	ret    $/;"	l
dd	prac1.asm	/^  dd:	c3                   	ret    $/;"	l
dd	prac2.asm	/^  dd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
dd	prac5.asm	/^  dd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
dd	prac6.asm	/^  dd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
dd	prac8.asm	/^  dd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
dd	stressfs.asm	/^  dd:	00 $/;"	l
dd	zombie.asm	/^  dd:	90                   	nop$/;"	l
dd0	usertests.asm	/^     dd0:	74 46                	je     e18 <exitwait+0x68>$/;"	l
dd2	sh.asm	/^     dd2:	39 da                	cmp    %ebx,%edx$/;"	l
dd2	usertests.asm	/^     dd2:	e8 c3 2e 00 00       	call   3c9a <fork>$/;"	l
dd4	sh.asm	/^     dd4:	75 f2                	jne    dc8 <memmove+0x18>$/;"	l
dd6	sh.asm	/^     dd6:	5b                   	pop    %ebx$/;"	l
dd7	sh.asm	/^     dd7:	5e                   	pop    %esi$/;"	l
dd7	usertests.asm	/^     dd7:	85 c0                	test   %eax,%eax$/;"	l
dd8	sh.asm	/^     dd8:	5d                   	pop    %ebp$/;"	l
dd9	sh.asm	/^     dd9:	c3                   	ret    $/;"	l
dd9	usertests.asm	/^     dd9:	89 c3                	mov    %eax,%ebx$/;"	l
dda	sh.asm	/^     dda:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ddb	usertests.asm	/^     ddb:	79 e3                	jns    dc0 <exitwait+0x10>$/;"	l
ddd	usertests.asm	/^     ddd:	c7 44 24 04 99 50 00 	movl   $0x5099,0x4(%esp)$/;"	l
ddf	sh.asm	/^     ddf:	cd 40                	int    $0x40$/;"	l
de	ln.asm	/^  de:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
de	prac1.asm	/^  de:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
de	stressfs.asm	/^  de:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
de	wc.asm	/^  de:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
de	zombie.asm	/^  de:	90                   	nop$/;"	l
de1	sh.asm	/^     de1:	c3                   	ret    $/;"	l
de2	sh.asm	/^     de2:	b8 02 00 00 00       	mov    $0x2,%eax$/;"	l
de4	usertests.asm	/^     de4:	00 $/;"	l
de5	usertests.asm	/^     de5:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
de7	sh.asm	/^     de7:	cd 40                	int    $0x40$/;"	l
de9	sh.asm	/^     de9:	c3                   	ret    $/;"	l
dea	sh.asm	/^     dea:	b8 03 00 00 00       	mov    $0x3,%eax$/;"	l
deallocuvm	vm.c	/^deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
dec	usertests.asm	/^     dec:	e8 ff 2f 00 00       	call   3df0 <printf>$/;"	l
def	sh.asm	/^     def:	cd 40                	int    $0x40$/;"	l
default	kernel.asm	/^    default:$/;"	l
default	kernel.asm	/^  default:$/;"	l
default	sh.asm	/^  default:$/;"	l
dev	buf.h	/^  uint dev;$/;"	m	struct:buf
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	log.c	/^  int dev;$/;"	m	struct:log	file:
dev	stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw	file.h	/^struct devsw {$/;"	s
df	echo.asm	/^  df:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx$/;"	l
df	forktest.asm	/^  df:	e8 7e 02 00 00       	call   362 <write>$/;"	l
df	grep.asm	/^  df:	e8 3c 00 00 00       	call   120 <matchhere>$/;"	l
df	ls.asm	/^  df:	83 c4 10             	add    $0x10,%esp$/;"	l
df	mkdir.asm	/^  df:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx$/;"	l
df	rm.asm	/^  df:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx$/;"	l
df	test.asm	/^  df:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx$/;"	l
df	usertests.asm	/^      df:	90                   	nop$/;"	l
df	zombie.asm	/^  df:	90                   	nop$/;"	l
df1	sh.asm	/^     df1:	c3                   	ret    $/;"	l
df1	usertests.asm	/^     df1:	83 c4 10             	add    $0x10,%esp$/;"	l
df2	sh.asm	/^     df2:	b8 04 00 00 00       	mov    $0x4,%eax$/;"	l
df4	usertests.asm	/^     df4:	5b                   	pop    %ebx$/;"	l
df5	usertests.asm	/^     df5:	5e                   	pop    %esi$/;"	l
df6	usertests.asm	/^     df6:	5d                   	pop    %ebp$/;"	l
df7	sh.asm	/^     df7:	cd 40                	int    $0x40$/;"	l
df7	usertests.asm	/^     df7:	c3                   	ret    $/;"	l
df8	usertests.asm	/^     df8:	c7 44 24 04 3b 45 00 	movl   $0x453b,0x4(%esp)$/;"	l
df9	sh.asm	/^     df9:	c3                   	ret    $/;"	l
dfa	sh.asm	/^     dfa:	b8 05 00 00 00       	mov    $0x5,%eax$/;"	l
dff	sh.asm	/^     dff:	cd 40                	int    $0x40$/;"	l
dff	usertests.asm	/^     dff:	00 $/;"	l
dinode	fs.h	/^struct dinode {$/;"	s
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + inum%IPB;$/;"	d
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dip	kernel.asm	/^  dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	usertests.c	/^dirfile(void)$/;"	f
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f
dirtest	usertests.c	/^void dirtest(void)$/;"	f
disksize	memide.c	/^static int disksize;$/;"	v	file:
do_commit	kernel.asm	/^    do_commit = 1;$/;"	d
doprocdump	kernel.asm	/^      doprocdump = 1;$/;"	d
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate
ds	x86.h	/^  ushort ds;$/;"	m	struct:trapframe
dst	cat.asm	/^  dst = vdst;$/;"	d
dst	echo.asm	/^  dst = vdst;$/;"	d
dst	forktest.asm	/^  dst = vdst;$/;"	d
dst	grep.asm	/^  dst = vdst;$/;"	d
dst	init.asm	/^  dst = vdst;$/;"	d
dst	kill.asm	/^  dst = vdst;$/;"	d
dst	ln.asm	/^  dst = vdst;$/;"	d
dst	ls.asm	/^  dst = vdst;$/;"	d
dst	mkdir.asm	/^  dst = vdst;$/;"	d
dst	prac1.asm	/^  dst = vdst;$/;"	d
dst	prac2.asm	/^  dst = vdst;$/;"	d
dst	prac3.asm	/^  dst = vdst;$/;"	d
dst	prac4.asm	/^  dst = vdst;$/;"	d
dst	prac5.asm	/^  dst = vdst;$/;"	d
dst	prac6.asm	/^  dst = vdst;$/;"	d
dst	prac7.asm	/^  dst = vdst;$/;"	d
dst	prac8.asm	/^  dst = vdst;$/;"	d
dst	rm.asm	/^  dst = vdst;$/;"	d
dst	sh.asm	/^  dst = vdst;$/;"	d
dst	stressfs.asm	/^  dst = vdst;$/;"	d
dst	test.asm	/^  dst = vdst;$/;"	d
dst	usertests.asm	/^  dst = vdst;$/;"	d
dst	wc.asm	/^  dst = vdst;$/;"	d
dst	zombie.asm	/^  dst = vdst;$/;"	d
e	cat.asm	/^   e:	83 ec 10             	sub    $0x10,%esp$/;"	l
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon3	file:
e	kernel.asm	/^  e = addr+len;$/;"	d
e	kill.asm	/^   e:	83 ec 10             	sub    $0x10,%esp$/;"	l
e	ls.asm	/^   e:	83 ec 10             	sub    $0x10,%esp$/;"	l
e	mkdir.asm	/^   e:	83 ec 10             	sub    $0x10,%esp$/;"	l
e	prac1.asm	/^   e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e	prac2.asm	/^   e:	8d 45 ec             	lea    -0x14(%ebp),%eax$/;"	l
e	prac3.asm	/^   e:	53                   	push   %ebx$/;"	l
e	prac4.asm	/^   e:	83 ec 14             	sub    $0x14,%esp$/;"	l
e	prac5.asm	/^   e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e	prac6.asm	/^   e:	51                   	push   %ecx$/;"	l
e	prac7.asm	/^   e:	8d 45 e8             	lea    -0x18(%ebp),%eax$/;"	l
e	prac8.asm	/^   e:	83 ec 10             	sub    $0x10,%esp$/;"	l
e	rm.asm	/^   e:	83 ec 10             	sub    $0x10,%esp$/;"	l
e	test.asm	/^   e:	83 f8 00             	cmp    $0x0,%eax$/;"	l
e	wc.asm	/^   e:	83 ec 10             	sub    $0x10,%esp$/;"	l
e	zombie.asm	/^   e:	85 c0                	test   %eax,%eax$/;"	l
e0	cat.asm	/^  e0:	5b                   	pop    %ebx$/;"	l
e0	kill.asm	/^  e0:	55                   	push   %ebp$/;"	l
e0	prac2.asm	/^  e0:	83 c2 01             	add    $0x1,%edx$/;"	l
e0	prac3.asm	/^  e0:	38 c8                	cmp    %cl,%al$/;"	l
e0	prac4.asm	/^  e0:	55                   	push   %ebp$/;"	l
e0	prac5.asm	/^  e0:	83 c2 01             	add    $0x1,%edx$/;"	l
e0	prac6.asm	/^  e0:	83 c2 01             	add    $0x1,%edx$/;"	l
e0	prac7.asm	/^  e0:	55                   	push   %ebp$/;"	l
e0	prac8.asm	/^  e0:	83 c2 01             	add    $0x1,%edx$/;"	l
e0	usertests.asm	/^      e0:	e8 cb 0c 00 00       	call   db0 <exitwait>$/;"	l
e0	zombie.asm	/^  e0:	55                   	push   %ebp$/;"	l
e00	usertests.asm	/^     e00:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
e01	sh.asm	/^     e01:	c3                   	ret    $/;"	l
e02	sh.asm	/^     e02:	b8 10 00 00 00       	mov    $0x10,%eax$/;"	l
e07	sh.asm	/^     e07:	cd 40                	int    $0x40$/;"	l
e07	usertests.asm	/^     e07:	e8 e4 2f 00 00       	call   3df0 <printf>$/;"	l
e09	sh.asm	/^     e09:	c3                   	ret    $/;"	l
e0a	sh.asm	/^     e0a:	b8 15 00 00 00       	mov    $0x15,%eax$/;"	l
e0c	usertests.asm	/^     e0c:	83 c4 10             	add    $0x10,%esp$/;"	l
e0f	sh.asm	/^     e0f:	cd 40                	int    $0x40$/;"	l
e0f	usertests.asm	/^     e0f:	5b                   	pop    %ebx$/;"	l
e1	cat.asm	/^  e1:	5e                   	pop    %esi$/;"	l
e1	init.asm	/^  e1:	00 $/;"	l
e1	kill.asm	/^  e1:	89 e5                	mov    %esp,%ebp$/;"	l
e1	ln.asm	/^  e1:	31 c0                	xor    %eax,%eax$/;"	l
e1	prac1.asm	/^  e1:	31 c0                	xor    %eax,%eax$/;"	l
e1	prac4.asm	/^  e1:	89 e5                	mov    %esp,%ebp$/;"	l
e1	prac7.asm	/^  e1:	89 e5                	mov    %esp,%ebp$/;"	l
e1	sh.asm	/^      e1:	e9 70 ff ff ff       	jmp    56 <main+0x56>$/;"	l
e1	wc.asm	/^  e1:	7e 54                	jle    137 <wc+0x97>$/;"	l
e1	zombie.asm	/^  e1:	89 e5                	mov    %esp,%ebp$/;"	l
e10	usertests.asm	/^     e10:	5e                   	pop    %esi$/;"	l
e11	sh.asm	/^     e11:	c3                   	ret    $/;"	l
e11	usertests.asm	/^     e11:	5d                   	pop    %ebp$/;"	l
e12	sh.asm	/^     e12:	b8 06 00 00 00       	mov    $0x6,%eax$/;"	l
e12	usertests.asm	/^     e12:	c3                   	ret    $/;"	l
e13	usertests.asm	/^     e13:	90                   	nop$/;"	l
e14	usertests.asm	/^     e14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e17	sh.asm	/^     e17:	cd 40                	int    $0x40$/;"	l
e18	usertests.asm	/^     e18:	c7 44 24 04 4b 45 00 	movl   $0x454b,0x4(%esp)$/;"	l
e19	sh.asm	/^     e19:	c3                   	ret    $/;"	l
e1a	sh.asm	/^     e1a:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
e1f	sh.asm	/^     e1f:	cd 40                	int    $0x40$/;"	l
e1f	usertests.asm	/^     e1f:	00 $/;"	l
e2	cat.asm	/^  e2:	5d                   	pop    %ebp$/;"	l
e2	init.asm	/^  e2:	c7 04 24 e6 07 00 00 	movl   $0x7e6,(%esp)$/;"	l
e2	ls.asm	/^  e2:	89 d8                	mov    %ebx,%eax$/;"	l
e2	prac3.asm	/^  e2:	75 15                	jne    f9 <strcmp+0x39>$/;"	l
e20	usertests.asm	/^     e20:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
e21	sh.asm	/^     e21:	c3                   	ret    $/;"	l
e22	sh.asm	/^     e22:	b8 0f 00 00 00       	mov    $0xf,%eax$/;"	l
e27	sh.asm	/^     e27:	cd 40                	int    $0x40$/;"	l
e27	usertests.asm	/^     e27:	e8 c4 2f 00 00       	call   3df0 <printf>$/;"	l
e29	sh.asm	/^     e29:	c3                   	ret    $/;"	l
e2a	sh.asm	/^     e2a:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
e2c	usertests.asm	/^     e2c:	83 c4 10             	add    $0x10,%esp$/;"	l
e2f	sh.asm	/^     e2f:	cd 40                	int    $0x40$/;"	l
e2f	usertests.asm	/^     e2f:	5b                   	pop    %ebx$/;"	l
e3	cat.asm	/^  e3:	c3                   	ret    $/;"	l
e3	echo.asm	/^  e3:	84 c0                	test   %al,%al$/;"	l
e3	kill.asm	/^  e3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
e3	ln.asm	/^  e3:	eb f4                	jmp    d9 <strcmp+0x39>$/;"	l
e3	mkdir.asm	/^  e3:	84 c0                	test   %al,%al$/;"	l
e3	prac1.asm	/^  e3:	eb f4                	jmp    d9 <strcmp+0x39>$/;"	l
e3	prac2.asm	/^  e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
e3	prac4.asm	/^  e3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
e3	prac5.asm	/^  e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
e3	prac6.asm	/^  e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
e3	prac7.asm	/^  e3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
e3	prac8.asm	/^  e3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
e3	rm.asm	/^  e3:	84 c0                	test   %al,%al$/;"	l
e3	test.asm	/^  e3:	84 c0                	test   %al,%al$/;"	l
e3	wc.asm	/^  e3:	31 ff                	xor    %edi,%edi$/;"	l
e3	zombie.asm	/^  e3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
e30	usertests.asm	/^     e30:	5e                   	pop    %esi$/;"	l
e31	sh.asm	/^     e31:	c3                   	ret    $/;"	l
e31	usertests.asm	/^     e31:	5d                   	pop    %ebp$/;"	l
e32	sh.asm	/^     e32:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
e32	usertests.asm	/^     e32:	c3                   	ret    $/;"	l
e33	usertests.asm	/^     e33:	e8 6a 2e 00 00       	call   3ca2 <exit>$/;"	l
e37	sh.asm	/^     e37:	cd 40                	int    $0x40$/;"	l
e38	usertests.asm	/^     e38:	90                   	nop$/;"	l
e39	sh.asm	/^     e39:	c3                   	ret    $/;"	l
e39	usertests.asm	/^     e39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e3a	sh.asm	/^     e3a:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
e3f	sh.asm	/^     e3f:	cd 40                	int    $0x40$/;"	l
e4	cat.asm	/^  e4:	c7 44 24 04 f6 07 00 	movl   $0x7f6,0x4(%esp)$/;"	l
e4	forktest.asm	/^  e4:	e8 59 02 00 00       	call   342 <exit>$/;"	l
e4	grep.asm	/^  e4:	85 c0                	test   %eax,%eax$/;"	l
e4	ls.asm	/^  e4:	5b                   	pop    %ebx$/;"	l
e4	prac3.asm	/^  e4:	89 d9                	mov    %ebx,%ecx$/;"	l
e40	usertests.asm	/^     e40:	55                   	push   %ebp$/;"	l
e41	sh.asm	/^     e41:	c3                   	ret    $/;"	l
e41	usertests.asm	/^     e41:	89 e5                	mov    %esp,%ebp$/;"	l
e42	sh.asm	/^     e42:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
e43	usertests.asm	/^     e43:	57                   	push   %edi$/;"	l
e44	usertests.asm	/^     e44:	56                   	push   %esi$/;"	l
e45	usertests.asm	/^     e45:	53                   	push   %ebx$/;"	l
e46	usertests.asm	/^     e46:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
e47	sh.asm	/^     e47:	cd 40                	int    $0x40$/;"	l
e49	sh.asm	/^     e49:	c3                   	ret    $/;"	l
e49	usertests.asm	/^     e49:	c7 44 24 04 58 45 00 	movl   $0x4558,0x4(%esp)$/;"	l
e4a	sh.asm	/^     e4a:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
e4f	sh.asm	/^     e4f:	cd 40                	int    $0x40$/;"	l
e5	echo.asm	/^  e5:	75 e9                	jne    d0 <strcmp+0x20>$/;"	l
e5	ln.asm	/^  e5:	0f b6 cb             	movzbl %bl,%ecx$/;"	l
e5	ls.asm	/^  e5:	5e                   	pop    %esi$/;"	l
e5	mkdir.asm	/^  e5:	75 e9                	jne    d0 <strcmp+0x20>$/;"	l
e5	prac1.asm	/^  e5:	0f b6 cb             	movzbl %bl,%ecx$/;"	l
e5	rm.asm	/^  e5:	75 e9                	jne    d0 <strcmp+0x20>$/;"	l
e5	stressfs.asm	/^  e5:	e8 c6 03 00 00       	call   4b0 <printf>$/;"	l
e5	test.asm	/^  e5:	75 e9                	jne    d0 <strcmp+0x20>$/;"	l
e5	usertests.asm	/^      e5:	e8 06 2a 00 00       	call   2af0 <rmdot>$/;"	l
e5	wc.asm	/^  e5:	eb 0b                	jmp    f2 <wc+0x52>$/;"	l
e50	usertests.asm	/^     e50:	00 $/;"	l
e51	sh.asm	/^     e51:	c3                   	ret    $/;"	l
e51	usertests.asm	/^     e51:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
e52	sh.asm	/^     e52:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
e57	sh.asm	/^     e57:	cd 40                	int    $0x40$/;"	l
e58	usertests.asm	/^     e58:	e8 93 2f 00 00       	call   3df0 <printf>$/;"	l
e59	sh.asm	/^     e59:	c3                   	ret    $/;"	l
e5a	sh.asm	/^     e5a:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
e5d	usertests.asm	/^     e5d:	e8 c0 2e 00 00       	call   3d22 <getpid>$/;"	l
e5f	sh.asm	/^     e5f:	cd 40                	int    $0x40$/;"	l
e6	grep.asm	/^  e6:	75 20                	jne    108 <matchstar+0x48>$/;"	l
e6	kill.asm	/^  e6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
e6	ls.asm	/^  e6:	5d                   	pop    %ebp$/;"	l
e6	prac3.asm	/^  e6:	83 c2 01             	add    $0x1,%edx$/;"	l
e6	prac4.asm	/^  e6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
e6	prac7.asm	/^  e6:	53                   	push   %ebx$/;"	l
e6	sh.asm	/^      e6:	89 04 24             	mov    %eax,(%esp)$/;"	l
e6	zombie.asm	/^  e6:	57                   	push   %edi$/;"	l
e61	sh.asm	/^     e61:	c3                   	ret    $/;"	l
e62	sh.asm	/^     e62:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
e62	usertests.asm	/^     e62:	89 c6                	mov    %eax,%esi$/;"	l
e64	usertests.asm	/^     e64:	e8 31 2e 00 00       	call   3c9a <fork>$/;"	l
e67	sh.asm	/^     e67:	cd 40                	int    $0x40$/;"	l
e69	sh.asm	/^     e69:	c3                   	ret    $/;"	l
e69	usertests.asm	/^     e69:	85 c0                	test   %eax,%eax$/;"	l
e6a	sh.asm	/^     e6a:	b8 0c 00 00 00       	mov    $0xc,%eax$/;"	l
e6b	usertests.asm	/^     e6b:	75 73                	jne    ee0 <mem+0xa0>$/;"	l
e6d	usertests.asm	/^     e6d:	31 db                	xor    %ebx,%ebx$/;"	l
e6f	sh.asm	/^     e6f:	cd 40                	int    $0x40$/;"	l
e6f	usertests.asm	/^     e6f:	90                   	nop$/;"	l
e7	echo.asm	/^  e7:	31 c0                	xor    %eax,%eax$/;"	l
e7	ls.asm	/^  e7:	c3                   	ret    $/;"	l
e7	mkdir.asm	/^  e7:	31 c0                	xor    %eax,%eax$/;"	l
e7	prac2.asm	/^  e7:	89 d0                	mov    %edx,%eax$/;"	l
e7	prac5.asm	/^  e7:	89 d0                	mov    %edx,%eax$/;"	l
e7	prac6.asm	/^  e7:	89 d0                	mov    %edx,%eax$/;"	l
e7	prac7.asm	/^  e7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
e7	prac8.asm	/^  e7:	89 d0                	mov    %edx,%eax$/;"	l
e7	rm.asm	/^  e7:	31 c0                	xor    %eax,%eax$/;"	l
e7	test.asm	/^  e7:	31 c0                	xor    %eax,%eax$/;"	l
e7	wc.asm	/^  e7:	90                   	nop$/;"	l
e7	zombie.asm	/^  e7:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
e70	usertests.asm	/^     e70:	eb 0a                	jmp    e7c <mem+0x3c>$/;"	l
e71	sh.asm	/^     e71:	c3                   	ret    $/;"	l
e72	sh.asm	/^     e72:	b8 0d 00 00 00       	mov    $0xd,%eax$/;"	l
e72	usertests.asm	/^     e72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
e77	sh.asm	/^     e77:	cd 40                	int    $0x40$/;"	l
e78	usertests.asm	/^     e78:	89 18                	mov    %ebx,(%eax)$/;"	l
e79	sh.asm	/^     e79:	c3                   	ret    $/;"	l
e7a	sh.asm	/^     e7a:	b8 0e 00 00 00       	mov    $0xe,%eax$/;"	l
e7a	usertests.asm	/^     e7a:	89 c3                	mov    %eax,%ebx$/;"	l
e7c	usertests.asm	/^     e7c:	c7 04 24 11 27 00 00 	movl   $0x2711,(%esp)$/;"	l
e7f	sh.asm	/^     e7f:	cd 40                	int    $0x40$/;"	l
e8	grep.asm	/^  e8:	0f be 13             	movsbl (%ebx),%edx$/;"	l
e8	ln.asm	/^  e8:	eb ef                	jmp    d9 <strcmp+0x39>$/;"	l
e8	ls.asm	/^  e8:	90                   	nop$/;"	l
e8	prac1.asm	/^  e8:	eb ef                	jmp    d9 <strcmp+0x39>$/;"	l
e8	wc.asm	/^  e8:	31 f6                	xor    %esi,%esi$/;"	l
e81	sh.asm	/^     e81:	c3                   	ret    $/;"	l
e82	sh.asm	/^     e82:	66 90                	xchg   %ax,%ax$/;"	l
e83	usertests.asm	/^     e83:	e8 e8 31 00 00       	call   4070 <malloc>$/;"	l
e84	sh.asm	/^     e84:	66 90                	xchg   %ax,%ax$/;"	l
e86	sh.asm	/^     e86:	66 90                	xchg   %ax,%ax$/;"	l
e88	sh.asm	/^     e88:	66 90                	xchg   %ax,%ax$/;"	l
e88	usertests.asm	/^     e88:	85 c0                	test   %eax,%eax$/;"	l
e8a	sh.asm	/^     e8a:	66 90                	xchg   %ax,%ax$/;"	l
e8a	usertests.asm	/^     e8a:	75 ec                	jne    e78 <mem+0x38>$/;"	l
e8c	sh.asm	/^     e8c:	66 90                	xchg   %ax,%ax$/;"	l
e8c	usertests.asm	/^     e8c:	85 db                	test   %ebx,%ebx$/;"	l
e8e	sh.asm	/^     e8e:	66 90                	xchg   %ax,%ax$/;"	l
e8e	usertests.asm	/^     e8e:	75 0a                	jne    e9a <mem+0x5a>$/;"	l
e9	echo.asm	/^  e9:	29 c8                	sub    %ecx,%eax$/;"	l
e9	forktest.asm	/^  e9:	c7 44 24 04 ef 03 00 	movl   $0x3ef,0x4(%esp)$/;"	l
e9	init.asm	/^  e9:	e8 8c 02 00 00       	call   37a <mknod>$/;"	l
e9	kill.asm	/^  e9:	74 12                	je     fd <strlen+0x1d>$/;"	l
e9	ls.asm	/^  e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e9	mkdir.asm	/^  e9:	29 c8                	sub    %ecx,%eax$/;"	l
e9	prac2.asm	/^  e9:	75 f5                	jne    e0 <strlen+0x10>$/;"	l
e9	prac3.asm	/^  e9:	0f b6 02             	movzbl (%edx),%eax$/;"	l
e9	prac4.asm	/^  e9:	74 12                	je     fd <strlen+0x1d>$/;"	l
e9	prac5.asm	/^  e9:	75 f5                	jne    e0 <strlen+0x10>$/;"	l
e9	prac6.asm	/^  e9:	75 f5                	jne    e0 <strlen+0x10>$/;"	l
e9	prac8.asm	/^  e9:	75 f5                	jne    e0 <strlen+0x10>$/;"	l
e9	rm.asm	/^  e9:	29 c8                	sub    %ecx,%eax$/;"	l
e9	sh.asm	/^      e9:	e8 1c 0d 00 00       	call   e0a <close>$/;"	l
e9	test.asm	/^  e9:	29 c8                	sub    %ecx,%eax$/;"	l
e90	sh.asm	/^     e90:	55                   	push   %ebp$/;"	l
e90	usertests.asm	/^     e90:	eb 16                	jmp    ea8 <mem+0x68>$/;"	l
e91	sh.asm	/^     e91:	89 e5                	mov    %esp,%ebp$/;"	l
e92	usertests.asm	/^     e92:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
e93	sh.asm	/^     e93:	57                   	push   %edi$/;"	l
e94	sh.asm	/^     e94:	56                   	push   %esi$/;"	l
e95	sh.asm	/^     e95:	89 c6                	mov    %eax,%esi$/;"	l
e97	sh.asm	/^     e97:	53                   	push   %ebx$/;"	l
e98	sh.asm	/^     e98:	83 ec 4c             	sub    $0x4c,%esp$/;"	l
e98	usertests.asm	/^     e98:	89 fb                	mov    %edi,%ebx$/;"	l
e9a	usertests.asm	/^     e9a:	8b 3b                	mov    (%ebx),%edi$/;"	l
e9b	sh.asm	/^     e9b:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
e9c	usertests.asm	/^     e9c:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
e9e	sh.asm	/^     e9e:	85 db                	test   %ebx,%ebx$/;"	l
e9f	usertests.asm	/^     e9f:	e8 3c 31 00 00       	call   3fe0 <free>$/;"	l
ea	ln.asm	/^  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
ea	prac1.asm	/^  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
ea	prac7.asm	/^  ea:	0f b6 02             	movzbl (%edx),%eax$/;"	l
ea	stressfs.asm	/^  ea:	8d 44 24 16          	lea    0x16(%esp),%eax$/;"	l
ea	usertests.asm	/^      ea:	e8 a1 28 00 00       	call   2990 <fourteen>$/;"	l
ea	wc.asm	/^  ea:	83 c7 01             	add    $0x1,%edi$/;"	l
ea	zombie.asm	/^  ea:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
ea0	sh.asm	/^     ea0:	74 09                	je     eab <printint+0x1b>$/;"	l
ea2	sh.asm	/^     ea2:	89 d0                	mov    %edx,%eax$/;"	l
ea4	sh.asm	/^     ea4:	c1 e8 1f             	shr    $0x1f,%eax$/;"	l
ea4	usertests.asm	/^     ea4:	85 ff                	test   %edi,%edi$/;"	l
ea6	usertests.asm	/^     ea6:	75 f0                	jne    e98 <mem+0x58>$/;"	l
ea7	sh.asm	/^     ea7:	84 c0                	test   %al,%al$/;"	l
ea8	usertests.asm	/^     ea8:	c7 04 24 00 50 00 00 	movl   $0x5000,(%esp)$/;"	l
ea9	sh.asm	/^     ea9:	75 75                	jne    f20 <printint+0x90>$/;"	l
eab	sh.asm	/^     eab:	89 d0                	mov    %edx,%eax$/;"	l
ead	sh.asm	/^     ead:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)$/;"	l
eaf	usertests.asm	/^     eaf:	e8 bc 31 00 00       	call   4070 <malloc>$/;"	l
eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate
eax	x86.h	/^  uint eax;$/;"	m	struct:trapframe
eb	cat.asm	/^  eb:	00 $/;"	l
eb	echo.asm	/^  eb:	5b                   	pop    %ebx$/;"	l
eb	grep.asm	/^  eb:	84 d2                	test   %dl,%dl$/;"	l
eb	kill.asm	/^  eb:	31 d2                	xor    %edx,%edx$/;"	l
eb	mkdir.asm	/^  eb:	5b                   	pop    %ebx$/;"	l
eb	prac2.asm	/^  eb:	5d                   	pop    %ebp$/;"	l
eb	prac4.asm	/^  eb:	31 d2                	xor    %edx,%edx$/;"	l
eb	prac5.asm	/^  eb:	5d                   	pop    %ebp$/;"	l
eb	prac6.asm	/^  eb:	5d                   	pop    %ebp$/;"	l
eb	prac8.asm	/^  eb:	5d                   	pop    %ebp$/;"	l
eb	rm.asm	/^  eb:	5b                   	pop    %ebx$/;"	l
eb	test.asm	/^  eb:	5b                   	pop    %ebx$/;"	l
eb4	sh.asm	/^     eb4:	89 75 c0             	mov    %esi,-0x40(%ebp)$/;"	l
eb4	usertests.asm	/^     eb4:	85 c0                	test   %eax,%eax$/;"	l
eb6	usertests.asm	/^     eb6:	74 38                	je     ef0 <mem+0xb0>$/;"	l
eb7	sh.asm	/^     eb7:	31 ff                	xor    %edi,%edi$/;"	l
eb8	usertests.asm	/^     eb8:	89 04 24             	mov    %eax,(%esp)$/;"	l
eb9	sh.asm	/^     eb9:	89 ce                	mov    %ecx,%esi$/;"	l
ebb	sh.asm	/^     ebb:	8d 5d d7             	lea    -0x29(%ebp),%ebx$/;"	l
ebb	usertests.asm	/^     ebb:	e8 20 31 00 00       	call   3fe0 <free>$/;"	l
ebe	sh.asm	/^     ebe:	eb 02                	jmp    ec2 <printint+0x32>$/;"	l
ebp	kernel.asm	/^    ebp = (uint*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	kernel.asm	/^  ebp = (uint*)v - 2;$/;"	d
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate
ebp	proc.h	/^  uint ebp;$/;"	m	struct:context
ebp	x86.h	/^  uint ebp;$/;"	m	struct:trapframe
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate
ebx	proc.h	/^  uint ebx;$/;"	m	struct:context
ebx	x86.h	/^  uint ebx;$/;"	m	struct:trapframe
ec	cat.asm	/^  ec:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
ec	echo.asm	/^  ec:	5d                   	pop    %ebp$/;"	l
ec	mkdir.asm	/^  ec:	5d                   	pop    %ebp$/;"	l
ec	prac2.asm	/^  ec:	c3                   	ret    $/;"	l
ec	prac3.asm	/^  ec:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
ec	prac5.asm	/^  ec:	c3                   	ret    $/;"	l
ec	prac6.asm	/^  ec:	c3                   	ret    $/;"	l
ec	prac8.asm	/^  ec:	c3                   	ret    $/;"	l
ec	rm.asm	/^  ec:	5d                   	pop    %ebp$/;"	l
ec	test.asm	/^  ec:	5d                   	pop    %ebp$/;"	l
ec0	sh.asm	/^     ec0:	89 cf                	mov    %ecx,%edi$/;"	l
ec0	usertests.asm	/^     ec0:	c7 44 24 04 7c 45 00 	movl   $0x457c,0x4(%esp)$/;"	l
ec2	sh.asm	/^     ec2:	31 d2                	xor    %edx,%edx$/;"	l
ec4	sh.asm	/^     ec4:	f7 f6                	div    %esi$/;"	l
ec6	sh.asm	/^     ec6:	8d 4f 01             	lea    0x1(%edi),%ecx$/;"	l
ec7	usertests.asm	/^     ec7:	00 $/;"	l
ec8	usertests.asm	/^     ec8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
ec9	sh.asm	/^     ec9:	0f b6 92 87 13 00 00 	movzbl 0x1387(%edx),%edx$/;"	l
ecf	usertests.asm	/^     ecf:	e8 1c 2f 00 00       	call   3df0 <printf>$/;"	l
echoargv	usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v
ecmd	sh.asm	/^    ecmd = (struct execcmd*)cmd;$/;"	d
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate
ecx	x86.h	/^  uint ecx;$/;"	m	struct:trapframe
ed	echo.asm	/^  ed:	c3                   	ret    $/;"	l
ed	grep.asm	/^  ed:	74 0c                	je     fb <matchstar+0x3b>$/;"	l
ed	kill.asm	/^  ed:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ed	mkdir.asm	/^  ed:	c3                   	ret    $/;"	l
ed	prac2.asm	/^  ed:	31 c0                	xor    %eax,%eax$/;"	l
ed	prac4.asm	/^  ed:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ed	prac5.asm	/^  ed:	31 c0                	xor    %eax,%eax$/;"	l
ed	prac6.asm	/^  ed:	31 c0                	xor    %eax,%eax$/;"	l
ed	prac7.asm	/^  ed:	84 c0                	test   %al,%al$/;"	l
ed	prac8.asm	/^  ed:	31 c0                	xor    %eax,%eax$/;"	l
ed	rm.asm	/^  ed:	c3                   	ret    $/;"	l
ed	test.asm	/^  ed:	c3                   	ret    $/;"	l
ed	wc.asm	/^  ed:	3b 7d e4             	cmp    -0x1c(%ebp),%edi$/;"	l
ed	zombie.asm	/^  ed:	89 d7                	mov    %edx,%edi$/;"	l
ed0	sh.asm	/^     ed0:	85 c0                	test   %eax,%eax$/;"	l
ed2	sh.asm	/^     ed2:	88 14 0b             	mov    %dl,(%ebx,%ecx,1)$/;"	l
ed4	usertests.asm	/^     ed4:	e8 c9 2d 00 00       	call   3ca2 <exit>$/;"	l
ed5	sh.asm	/^     ed5:	75 e9                	jne    ec0 <printint+0x30>$/;"	l
ed7	sh.asm	/^     ed7:	8b 55 c4             	mov    -0x3c(%ebp),%edx$/;"	l
ed9	usertests.asm	/^     ed9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
eda	sh.asm	/^     eda:	89 c8                	mov    %ecx,%eax$/;"	l
edc	sh.asm	/^     edc:	8b 75 c0             	mov    -0x40(%ebp),%esi$/;"	l
edf	sh.asm	/^     edf:	85 d2                	test   %edx,%edx$/;"	l
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate
edi	proc.h	/^  uint edi;$/;"	m	struct:context
edi	x86.h	/^  uint edi;$/;"	m	struct:trapframe
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate
edx	x86.h	/^  uint edx;$/;"	m	struct:trapframe
ee	echo.asm	/^  ee:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
ee	init.asm	/^  ee:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)$/;"	l
ee	mkdir.asm	/^  ee:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
ee	rm.asm	/^  ee:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
ee	sh.asm	/^      ee:	66 90                	xchg   %ax,%ax$/;"	l
ee	stressfs.asm	/^  ee:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
ee	test.asm	/^  ee:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
ee0	usertests.asm	/^     ee0:	83 c4 1c             	add    $0x1c,%esp$/;"	l
ee1	sh.asm	/^     ee1:	74 08                	je     eeb <printint+0x5b>$/;"	l
ee3	sh.asm	/^     ee3:	8d 4f 02             	lea    0x2(%edi),%ecx$/;"	l
ee3	usertests.asm	/^     ee3:	5b                   	pop    %ebx$/;"	l
ee4	usertests.asm	/^     ee4:	5e                   	pop    %esi$/;"	l
ee5	usertests.asm	/^     ee5:	5f                   	pop    %edi$/;"	l
ee6	sh.asm	/^     ee6:	c6 44 05 d8 2d       	movb   $0x2d,-0x28(%ebp,%eax,1)$/;"	l
ee6	usertests.asm	/^     ee6:	5d                   	pop    %ebp$/;"	l
ee7	usertests.asm	/^     ee7:	e9 be 2d 00 00       	jmp    3caa <wait>$/;"	l
eeb	sh.asm	/^     eeb:	8d 79 ff             	lea    -0x1(%ecx),%edi$/;"	l
eec	usertests.asm	/^     eec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
eee	sh.asm	/^     eee:	66 90                	xchg   %ax,%ax$/;"	l
ef	grep.asm	/^  ef:	83 c3 01             	add    $0x1,%ebx$/;"	l
ef	prac2.asm	/^  ef:	5d                   	pop    %ebp$/;"	l
ef	prac3.asm	/^  ef:	0f b6 49 01          	movzbl 0x1(%ecx),%ecx$/;"	l
ef	prac5.asm	/^  ef:	5d                   	pop    %ebp$/;"	l
ef	prac6.asm	/^  ef:	5d                   	pop    %ebp$/;"	l
ef	prac7.asm	/^  ef:	74 2d                	je     11e <strcmp+0x3e>$/;"	l
ef	prac8.asm	/^  ef:	5d                   	pop    %ebp$/;"	l
ef	usertests.asm	/^      ef:	90                   	nop$/;"	l
ef	zombie.asm	/^  ef:	fc                   	cld    $/;"	l
ef0	sh.asm	/^     ef0:	0f b6 44 3d d8       	movzbl -0x28(%ebp,%edi,1),%eax$/;"	l
ef0	usertests.asm	/^     ef0:	c7 44 24 04 62 45 00 	movl   $0x4562,0x4(%esp)$/;"	l
ef5	sh.asm	/^     ef5:	83 ef 01             	sub    $0x1,%edi$/;"	l
ef7	usertests.asm	/^     ef7:	00 $/;"	l
ef8	sh.asm	/^     ef8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
ef8	usertests.asm	/^     ef8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
eff	sh.asm	/^     eff:	00 $/;"	l
eff	usertests.asm	/^     eff:	e8 ec 2e 00 00       	call   3df0 <printf>$/;"	l
efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:
eflags	kernel.asm	/^  eflags = readeflags();$/;"	d
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate
eflags	x86.h	/^  uint eflags;$/;"	m	struct:trapframe
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate
eip	proc.h	/^  uint eip;$/;"	m	struct:context
eip	x86.h	/^  uint eip;$/;"	m	struct:trapframe
elf	bootblock.asm	/^  elf = (struct elfhdr*)0x10000;  \/\/ scratch space$/;"	d
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr
elfhdr	elf.h	/^struct elfhdr {$/;"	s
empty	kernel.asm	/^      empty = ip;$/;"	d
empty	kernel.asm	/^  empty = 0;$/;"	d
end_op	log.c	/^end_op(void)$/;"	f
entry	bootblock.asm	/^  entry = (void(*)(void))(elf->entry);$/;"	d
entry	elf.h	/^  uint entry;$/;"	m	struct:elfhdr
entry	entry.S	/^entry:$/;"	l
entry	kernel.asm	/^entry:$/;"	l
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf
entrypgdir	main.c	/^pde_t entrypgdir[NPDENTRIES] = {$/;"	v
entrypgdir	main.c	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	v
ep	kernel.asm	/^  ep = (char*)curproc->sz;$/;"	d
epa	bootblock.asm	/^  epa = pa + count;$/;"	d
eph	bootblock.asm	/^  eph = ph + elf->phnum;$/;"	d
err	x86.h	/^  uint err;$/;"	m	struct:trapframe
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate
es	sh.asm	/^  es = s + strlen(s);$/;"	d
es	x86.h	/^  ushort es;$/;"	m	struct:trapframe
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate
esi	proc.h	/^  uint esi;$/;"	m	struct:context
esi	x86.h	/^  uint esi;$/;"	m	struct:trapframe
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate
esp	x86.h	/^  uint esp;$/;"	m	struct:trapframe
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate
exec	exec.c	/^exec(char *path, char **argv)$/;"	f
execcmd	sh.c	/^execcmd(void)$/;"	f
execcmd	sh.c	/^struct execcmd {$/;"	s	file:
exectest	usertests.c	/^exectest(void)$/;"	f
exit	initcode.S	/^exit:$/;"	l
exit	initcode.asm	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f
exitiputtest	usertests.c	/^exitiputtest(void)$/;"	f
exitwait	usertests.c	/^exitwait(void)$/;"	f
f	Makefile	/^	dd if=\/dev\/zero of=xv6.img count=10000$/;"	m
f	Makefile	/^	dd if=\/dev\/zero of=xv6memfs.img count=10000$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6memfs.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernel of=xv6.img seek=1 conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc$/;"	m
f	echo.asm	/^   f:	8b 7d 0c             	mov    0xc(%ebp),%edi$/;"	l
f	grep.asm	/^   f:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)$/;"	l
f	prac3.asm	/^   f:	51                   	push   %ecx$/;"	l
f	prac6.asm	/^   f:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f0	forktest.asm	/^  f0:	00 $/;"	l
f0	kill.asm	/^  f0:	83 c2 01             	add    $0x1,%edx$/;"	l
f0	ln.asm	/^  f0:	55                   	push   %ebp$/;"	l
f0	ls.asm	/^  f0:	55                   	push   %ebp$/;"	l
f0	prac1.asm	/^  f0:	55                   	push   %ebp$/;"	l
f0	prac2.asm	/^  f0:	c3                   	ret    $/;"	l
f0	prac4.asm	/^  f0:	83 c2 01             	add    $0x1,%edx$/;"	l
f0	prac5.asm	/^  f0:	c3                   	ret    $/;"	l
f0	prac6.asm	/^  f0:	c3                   	ret    $/;"	l
f0	prac8.asm	/^  f0:	c3                   	ret    $/;"	l
f0	sh.asm	/^      f0:	e9 61 ff ff ff       	jmp    56 <main+0x56>$/;"	l
f0	usertests.asm	/^      f0:	e8 9b 26 00 00       	call   2790 <bigfile>$/;"	l
f0	wc.asm	/^  f0:	74 38                	je     12a <wc+0x8a>$/;"	l
f0	zombie.asm	/^  f0:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
f00	sh.asm	/^     f00:	89 5c 24 04          	mov    %ebx,0x4(%esp)$/;"	l
f04	sh.asm	/^     f04:	89 34 24             	mov    %esi,(%esp)$/;"	l
f04	usertests.asm	/^     f04:	89 34 24             	mov    %esi,(%esp)$/;"	l
f07	sh.asm	/^     f07:	88 45 d7             	mov    %al,-0x29(%ebp)$/;"	l
f07	usertests.asm	/^     f07:	e8 c6 2d 00 00       	call   3cd2 <kill>$/;"	l
f0a	sh.asm	/^     f0a:	e8 f3 fe ff ff       	call   e02 <write>$/;"	l
f0c	usertests.asm	/^     f0c:	e8 91 2d 00 00       	call   3ca2 <exit>$/;"	l
f0f	sh.asm	/^     f0f:	83 ff ff             	cmp    $0xffffffff,%edi$/;"	l
f1	echo.asm	/^  f1:	31 c0                	xor    %eax,%eax$/;"	l
f1	forktest.asm	/^  f1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
f1	ln.asm	/^  f1:	89 e5                	mov    %esp,%ebp$/;"	l
f1	ls.asm	/^  f1:	89 e5                	mov    %esp,%ebp$/;"	l
f1	mkdir.asm	/^  f1:	31 c0                	xor    %eax,%eax$/;"	l
f1	prac1.asm	/^  f1:	89 e5                	mov    %esp,%ebp$/;"	l
f1	prac2.asm	/^  f1:	eb 0d                	jmp    100 <memset>$/;"	l
f1	prac5.asm	/^  f1:	eb 0d                	jmp    100 <memset>$/;"	l
f1	prac6.asm	/^  f1:	eb 0d                	jmp    100 <memset>$/;"	l
f1	prac7.asm	/^  f1:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
f1	prac8.asm	/^  f1:	eb 0d                	jmp    100 <memset>$/;"	l
f1	rm.asm	/^  f1:	31 c0                	xor    %eax,%eax$/;"	l
f1	test.asm	/^  f1:	31 c0                	xor    %eax,%eax$/;"	l
f11	usertests.asm	/^     f11:	eb 0d                	jmp    f20 <sharedfd>$/;"	l
f12	sh.asm	/^     f12:	75 dc                	jne    ef0 <printint+0x60>$/;"	l
f13	usertests.asm	/^     f13:	90                   	nop$/;"	l
f14	sh.asm	/^     f14:	83 c4 4c             	add    $0x4c,%esp$/;"	l
f14	usertests.asm	/^     f14:	90                   	nop$/;"	l
f15	usertests.asm	/^     f15:	90                   	nop$/;"	l
f16	usertests.asm	/^     f16:	90                   	nop$/;"	l
f17	sh.asm	/^     f17:	5b                   	pop    %ebx$/;"	l
f17	usertests.asm	/^     f17:	90                   	nop$/;"	l
f18	sh.asm	/^     f18:	5e                   	pop    %esi$/;"	l
f18	usertests.asm	/^     f18:	90                   	nop$/;"	l
f19	sh.asm	/^     f19:	5f                   	pop    %edi$/;"	l
f19	usertests.asm	/^     f19:	90                   	nop$/;"	l
f1a	sh.asm	/^     f1a:	5d                   	pop    %ebp$/;"	l
f1a	usertests.asm	/^     f1a:	90                   	nop$/;"	l
f1b	sh.asm	/^     f1b:	c3                   	ret    $/;"	l
f1b	usertests.asm	/^     f1b:	90                   	nop$/;"	l
f1c	sh.asm	/^     f1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f1c	usertests.asm	/^     f1c:	90                   	nop$/;"	l
f1d	usertests.asm	/^     f1d:	90                   	nop$/;"	l
f1e	usertests.asm	/^     f1e:	90                   	nop$/;"	l
f1f	usertests.asm	/^     f1f:	90                   	nop$/;"	l
f2	grep.asm	/^  f2:	39 f2                	cmp    %esi,%edx$/;"	l
f2	wc.asm	/^  f2:	0f be 87 80 0b 00 00 	movsbl 0xb80(%edi),%eax$/;"	l
f2	zombie.asm	/^  f2:	89 d0                	mov    %edx,%eax$/;"	l
f20	sh.asm	/^     f20:	89 d0                	mov    %edx,%eax$/;"	l
f20	usertests.asm	/^     f20:	55                   	push   %ebp$/;"	l
f21	usertests.asm	/^     f21:	89 e5                	mov    %esp,%ebp$/;"	l
f22	sh.asm	/^     f22:	f7 d8                	neg    %eax$/;"	l
f23	usertests.asm	/^     f23:	57                   	push   %edi$/;"	l
f24	sh.asm	/^     f24:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)$/;"	l
f24	usertests.asm	/^     f24:	56                   	push   %esi$/;"	l
f25	usertests.asm	/^     f25:	53                   	push   %ebx$/;"	l
f26	usertests.asm	/^     f26:	83 ec 3c             	sub    $0x3c,%esp$/;"	l
f29	usertests.asm	/^     f29:	c7 44 24 04 84 45 00 	movl   $0x4584,0x4(%esp)$/;"	l
f2b	sh.asm	/^     f2b:	eb 87                	jmp    eb4 <printint+0x24>$/;"	l
f2d	sh.asm	/^     f2d:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
f3	cat.asm	/^  f3:	e8 98 03 00 00       	call   490 <printf>$/;"	l
f3	echo.asm	/^  f3:	eb f4                	jmp    e9 <strcmp+0x39>$/;"	l
f3	kill.asm	/^  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
f3	ln.asm	/^  f3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
f3	ls.asm	/^  f3:	57                   	push   %edi$/;"	l
f3	mkdir.asm	/^  f3:	eb f4                	jmp    e9 <strcmp+0x39>$/;"	l
f3	prac1.asm	/^  f3:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
f3	prac2.asm	/^  f3:	90                   	nop$/;"	l
f3	prac3.asm	/^  f3:	84 c0                	test   %al,%al$/;"	l
f3	prac4.asm	/^  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)$/;"	l
f3	prac5.asm	/^  f3:	90                   	nop$/;"	l
f3	prac6.asm	/^  f3:	90                   	nop$/;"	l
f3	prac8.asm	/^  f3:	90                   	nop$/;"	l
f3	rm.asm	/^  f3:	eb f4                	jmp    e9 <strcmp+0x39>$/;"	l
f3	test.asm	/^  f3:	eb f4                	jmp    e9 <strcmp+0x39>$/;"	l
f30	sh.asm	/^     f30:	55                   	push   %ebp$/;"	l
f30	usertests.asm	/^     f30:	00 $/;"	l
f31	sh.asm	/^     f31:	89 e5                	mov    %esp,%ebp$/;"	l
f31	usertests.asm	/^     f31:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
f33	sh.asm	/^     f33:	57                   	push   %edi$/;"	l
f34	sh.asm	/^     f34:	31 ff                	xor    %edi,%edi$/;"	l
f36	sh.asm	/^     f36:	56                   	push   %esi$/;"	l
f37	sh.asm	/^     f37:	53                   	push   %ebx$/;"	l
f38	sh.asm	/^     f38:	83 ec 3c             	sub    $0x3c,%esp$/;"	l
f38	usertests.asm	/^     f38:	e8 b3 2e 00 00       	call   3df0 <printf>$/;"	l
f3b	sh.asm	/^     f3b:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
f3d	usertests.asm	/^     f3d:	c7 04 24 93 45 00 00 	movl   $0x4593,(%esp)$/;"	l
f3e	sh.asm	/^     f3e:	8d 45 10             	lea    0x10(%ebp),%eax$/;"	l
f4	grep.asm	/^  f4:	74 e2                	je     d8 <matchstar+0x18>$/;"	l
f4	ls.asm	/^  f4:	56                   	push   %esi$/;"	l
f4	prac2.asm	/^  f4:	90                   	nop$/;"	l
f4	prac5.asm	/^  f4:	90                   	nop$/;"	l
f4	prac6.asm	/^  f4:	90                   	nop$/;"	l
f4	prac7.asm	/^  f4:	38 d8                	cmp    %bl,%al$/;"	l
f4	prac8.asm	/^  f4:	90                   	nop$/;"	l
f4	zombie.asm	/^  f4:	5f                   	pop    %edi$/;"	l
f41	sh.asm	/^     f41:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
f44	sh.asm	/^     f44:	89 45 d4             	mov    %eax,-0x2c(%ebp)$/;"	l
f44	usertests.asm	/^     f44:	e8 a9 2d 00 00       	call   3cf2 <unlink>$/;"	l
f47	sh.asm	/^     f47:	0f b6 13             	movzbl (%ebx),%edx$/;"	l
f49	usertests.asm	/^     f49:	c7 44 24 04 02 02 00 	movl   $0x202,0x4(%esp)$/;"	l
f4a	sh.asm	/^     f4a:	83 c3 01             	add    $0x1,%ebx$/;"	l
f4d	sh.asm	/^     f4d:	84 d2                	test   %dl,%dl$/;"	l
f4f	sh.asm	/^     f4f:	75 39                	jne    f8a <printf+0x5a>$/;"	l
f5	echo.asm	/^  f5:	0f b6 cb             	movzbl %bl,%ecx$/;"	l
f5	init.asm	/^  f5:	00 $/;"	l
f5	ls.asm	/^  f5:	53                   	push   %ebx$/;"	l
f5	mkdir.asm	/^  f5:	0f b6 cb             	movzbl %bl,%ecx$/;"	l
f5	prac2.asm	/^  f5:	90                   	nop$/;"	l
f5	prac3.asm	/^  f5:	75 e9                	jne    e0 <strcmp+0x20>$/;"	l
f5	prac5.asm	/^  f5:	90                   	nop$/;"	l
f5	prac6.asm	/^  f5:	90                   	nop$/;"	l
f5	prac8.asm	/^  f5:	90                   	nop$/;"	l
f5	rm.asm	/^  f5:	0f b6 cb             	movzbl %bl,%ecx$/;"	l
f5	sh.asm	/^      f5:	66 90                	xchg   %ax,%ax$/;"	l
f5	stressfs.asm	/^  f5:	00 $/;"	l
f5	test.asm	/^  f5:	0f b6 cb             	movzbl %bl,%ecx$/;"	l
f5	usertests.asm	/^      f5:	e8 06 1e 00 00       	call   1f00 <subdir>$/;"	l
f5	zombie.asm	/^  f5:	5d                   	pop    %ebp$/;"	l
f50	usertests.asm	/^     f50:	00 $/;"	l
f51	sh.asm	/^     f51:	e9 c2 00 00 00       	jmp    1018 <printf+0xe8>$/;"	l
f51	usertests.asm	/^     f51:	c7 04 24 93 45 00 00 	movl   $0x4593,(%esp)$/;"	l
f56	sh.asm	/^     f56:	66 90                	xchg   %ax,%ax$/;"	l
f58	sh.asm	/^     f58:	83 fa 25             	cmp    $0x25,%edx$/;"	l
f58	usertests.asm	/^     f58:	e8 85 2d 00 00       	call   3ce2 <open>$/;"	l
f5b	sh.asm	/^     f5b:	0f 84 bf 00 00 00    	je     1020 <printf+0xf0>$/;"	l
f5d	usertests.asm	/^     f5d:	85 c0                	test   %eax,%eax$/;"	l
f5f	usertests.asm	/^     f5f:	89 c7                	mov    %eax,%edi$/;"	l
f6	grep.asm	/^  f6:	83 fe 2e             	cmp    $0x2e,%esi$/;"	l
f6	init.asm	/^  f6:	c7 04 24 e6 07 00 00 	movl   $0x7e6,(%esp)$/;"	l
f6	ln.asm	/^  f6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
f6	ls.asm	/^  f6:	81 ec 6c 02 00 00    	sub    $0x26c,%esp$/;"	l
f6	prac1.asm	/^  f6:	80 39 00             	cmpb   $0x0,(%ecx)$/;"	l
f6	prac2.asm	/^  f6:	90                   	nop$/;"	l
f6	prac5.asm	/^  f6:	90                   	nop$/;"	l
f6	prac6.asm	/^  f6:	90                   	nop$/;"	l
f6	prac7.asm	/^  f6:	74 0e                	je     106 <strcmp+0x26>$/;"	l
f6	prac8.asm	/^  f6:	90                   	nop$/;"	l
f6	stressfs.asm	/^  f6:	89 04 24             	mov    %eax,(%esp)$/;"	l
f6	zombie.asm	/^  f6:	c3                   	ret    $/;"	l
f61	sh.asm	/^     f61:	8d 45 e2             	lea    -0x1e(%ebp),%eax$/;"	l
f61	usertests.asm	/^     f61:	0f 88 40 01 00 00    	js     10a7 <sharedfd+0x187>$/;"	l
f64	sh.asm	/^     f64:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
f67	usertests.asm	/^     f67:	e8 2e 2d 00 00       	call   3c9a <fork>$/;"	l
f6b	sh.asm	/^     f6b:	00 $/;"	l
f6c	sh.asm	/^     f6c:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
f6c	usertests.asm	/^     f6c:	8d 75 de             	lea    -0x22(%ebp),%esi$/;"	l
f6f	usertests.asm	/^     f6f:	bb e8 03 00 00       	mov    $0x3e8,%ebx$/;"	l
f7	kill.asm	/^  f7:	89 d0                	mov    %edx,%eax$/;"	l
f7	prac2.asm	/^  f7:	90                   	nop$/;"	l
f7	prac3.asm	/^  f7:	31 c0                	xor    %eax,%eax$/;"	l
f7	prac4.asm	/^  f7:	89 d0                	mov    %edx,%eax$/;"	l
f7	prac5.asm	/^  f7:	90                   	nop$/;"	l
f7	prac6.asm	/^  f7:	90                   	nop$/;"	l
f7	prac8.asm	/^  f7:	90                   	nop$/;"	l
f7	sh.asm	/^      f7:	66 90                	xchg   %ax,%ax$/;"	l
f7	zombie.asm	/^  f7:	89 f6                	mov    %esi,%esi$/;"	l
f70	sh.asm	/^     f70:	89 34 24             	mov    %esi,(%esp)$/;"	l
f73	sh.asm	/^     f73:	88 55 e2             	mov    %dl,-0x1e(%ebp)$/;"	l
f74	usertests.asm	/^     f74:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
f76	sh.asm	/^     f76:	e8 87 fe ff ff       	call   e02 <write>$/;"	l
f7b	sh.asm	/^     f7b:	83 c3 01             	add    $0x1,%ebx$/;"	l
f7b	usertests.asm	/^     f7b:	00 $/;"	l
f7c	usertests.asm	/^     f7c:	89 34 24             	mov    %esi,(%esp)$/;"	l
f7e	sh.asm	/^     f7e:	0f b6 53 ff          	movzbl -0x1(%ebx),%edx$/;"	l
f7f	usertests.asm	/^     f7f:	83 f8 01             	cmp    $0x1,%eax$/;"	l
f8	cat.asm	/^  f8:	e8 45 02 00 00       	call   342 <exit>$/;"	l
f8	echo.asm	/^  f8:	eb ef                	jmp    e9 <strcmp+0x39>$/;"	l
f8	forktest.asm	/^  f8:	e8 13 ff ff ff       	call   10 <printf>$/;"	l
f8	mkdir.asm	/^  f8:	eb ef                	jmp    e9 <strcmp+0x39>$/;"	l
f8	prac2.asm	/^  f8:	90                   	nop$/;"	l
f8	prac5.asm	/^  f8:	90                   	nop$/;"	l
f8	prac6.asm	/^  f8:	90                   	nop$/;"	l
f8	prac7.asm	/^  f8:	eb 2b                	jmp    125 <strcmp+0x45>$/;"	l
f8	prac8.asm	/^  f8:	90                   	nop$/;"	l
f8	rm.asm	/^  f8:	eb ef                	jmp    e9 <strcmp+0x39>$/;"	l
f8	test.asm	/^  f8:	eb ef                	jmp    e9 <strcmp+0x39>$/;"	l
f82	sh.asm	/^     f82:	84 d2                	test   %dl,%dl$/;"	l
f82	usertests.asm	/^     f82:	89 45 d4             	mov    %eax,-0x2c(%ebp)$/;"	l
f84	sh.asm	/^     f84:	0f 84 8e 00 00 00    	je     1018 <printf+0xe8>$/;"	l
f85	usertests.asm	/^     f85:	19 c0                	sbb    %eax,%eax$/;"	l
f87	usertests.asm	/^     f87:	83 e0 f3             	and    $0xfffffff3,%eax$/;"	l
f8a	sh.asm	/^     f8a:	85 ff                	test   %edi,%edi$/;"	l
f8a	usertests.asm	/^     f8a:	83 c0 70             	add    $0x70,%eax$/;"	l
f8c	sh.asm	/^     f8c:	0f be c2             	movsbl %dl,%eax$/;"	l
f8d	usertests.asm	/^     f8d:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
f8f	sh.asm	/^     f8f:	74 c7                	je     f58 <printf+0x28>$/;"	l
f9	grep.asm	/^  f9:	74 dd                	je     d8 <matchstar+0x18>$/;"	l
f9	kill.asm	/^  f9:	75 f5                	jne    f0 <strlen+0x10>$/;"	l
f9	ln.asm	/^  f9:	74 12                	je     10d <strlen+0x1d>$/;"	l
f9	prac1.asm	/^  f9:	74 12                	je     10d <strlen+0x1d>$/;"	l
f9	prac2.asm	/^  f9:	90                   	nop$/;"	l
f9	prac3.asm	/^  f9:	29 c8                	sub    %ecx,%eax$/;"	l
f9	prac4.asm	/^  f9:	75 f5                	jne    f0 <strlen+0x10>$/;"	l
f9	prac5.asm	/^  f9:	90                   	nop$/;"	l
f9	prac6.asm	/^  f9:	90                   	nop$/;"	l
f9	prac8.asm	/^  f9:	90                   	nop$/;"	l
f9	sh.asm	/^      f9:	66 90                	xchg   %ax,%ax$/;"	l
f9	stressfs.asm	/^  f9:	e8 a4 02 00 00       	call   3a2 <open>$/;"	l
f9	wc.asm	/^  f9:	31 c9                	xor    %ecx,%ecx$/;"	l
f9	zombie.asm	/^  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi$/;"	l
f91	sh.asm	/^     f91:	83 ff 25             	cmp    $0x25,%edi$/;"	l
f91	usertests.asm	/^     f91:	e8 9a 2b 00 00       	call   3b30 <memset>$/;"	l
f94	sh.asm	/^     f94:	75 e5                	jne    f7b <printf+0x4b>$/;"	l
f96	sh.asm	/^     f96:	83 fa 64             	cmp    $0x64,%edx$/;"	l
f96	usertests.asm	/^     f96:	eb 05                	jmp    f9d <sharedfd+0x7d>$/;"	l
f98	usertests.asm	/^     f98:	83 eb 01             	sub    $0x1,%ebx$/;"	l
f99	sh.asm	/^     f99:	0f 84 31 01 00 00    	je     10d0 <printf+0x1a0>$/;"	l
f9b	usertests.asm	/^     f9b:	74 2d                	je     fca <sharedfd+0xaa>$/;"	l
f9d	usertests.asm	/^     f9d:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)$/;"	l
f9f	sh.asm	/^     f9f:	25 f7 00 00 00       	and    $0xf7,%eax$/;"	l
fa	echo.asm	/^  fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
fa	mkdir.asm	/^  fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
fa	prac2.asm	/^  fa:	90                   	nop$/;"	l
fa	prac5.asm	/^  fa:	90                   	nop$/;"	l
fa	prac6.asm	/^  fa:	90                   	nop$/;"	l
fa	prac7.asm	/^  fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
fa	prac8.asm	/^  fa:	90                   	nop$/;"	l
fa	rm.asm	/^  fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
fa	test.asm	/^  fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
fa	usertests.asm	/^      fa:	e8 21 16 00 00       	call   1720 <linktest>$/;"	l
fa4	sh.asm	/^     fa4:	83 f8 70             	cmp    $0x70,%eax$/;"	l
fa4	usertests.asm	/^     fa4:	00 $/;"	l
fa5	usertests.asm	/^     fa5:	89 74 24 04          	mov    %esi,0x4(%esp)$/;"	l
fa7	sh.asm	/^     fa7:	0f 84 83 00 00 00    	je     1030 <printf+0x100>$/;"	l
fa9	usertests.asm	/^     fa9:	89 3c 24             	mov    %edi,(%esp)$/;"	l
fac	usertests.asm	/^     fac:	e8 11 2d 00 00       	call   3cc2 <write>$/;"	l
fad	sh.asm	/^     fad:	83 fa 73             	cmp    $0x73,%edx$/;"	l
fb	grep.asm	/^  fb:	83 c4 1c             	add    $0x1c,%esp$/;"	l
fb	kill.asm	/^  fb:	5d                   	pop    %ebp$/;"	l
fb	ln.asm	/^  fb:	31 d2                	xor    %edx,%edx$/;"	l
fb	prac1.asm	/^  fb:	31 d2                	xor    %edx,%edx$/;"	l
fb	prac2.asm	/^  fb:	90                   	nop$/;"	l
fb	prac3.asm	/^  fb:	5b                   	pop    %ebx$/;"	l
fb	prac4.asm	/^  fb:	5d                   	pop    %ebp$/;"	l
fb	prac5.asm	/^  fb:	90                   	nop$/;"	l
fb	prac6.asm	/^  fb:	90                   	nop$/;"	l
fb	prac8.asm	/^  fb:	90                   	nop$/;"	l
fb	sh.asm	/^      fb:	66 90                	xchg   %ax,%ax$/;"	l
fb	wc.asm	/^  fb:	c7 04 24 66 08 00 00 	movl   $0x866,(%esp)$/;"	l
fb0	sh.asm	/^     fb0:	0f 84 a2 00 00 00    	je     1058 <printf+0x128>$/;"	l
fb1	usertests.asm	/^     fb1:	83 f8 0a             	cmp    $0xa,%eax$/;"	l
fb4	usertests.asm	/^     fb4:	74 e2                	je     f98 <sharedfd+0x78>$/;"	l
fb6	sh.asm	/^     fb6:	83 fa 63             	cmp    $0x63,%edx$/;"	l
fb6	usertests.asm	/^     fb6:	c7 44 24 04 84 52 00 	movl   $0x5284,0x4(%esp)$/;"	l
fb9	sh.asm	/^     fb9:	0f 84 35 01 00 00    	je     10f4 <printf+0x1c4>$/;"	l
fbd	usertests.asm	/^     fbd:	00 $/;"	l
fbe	usertests.asm	/^     fbe:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)$/;"	l
fbf	sh.asm	/^     fbf:	83 fa 25             	cmp    $0x25,%edx$/;"	l
fc	kill.asm	/^  fc:	c3                   	ret    $/;"	l
fc	ls.asm	/^  fc:	8b 7d 08             	mov    0x8(%ebp),%edi$/;"	l
fc	prac2.asm	/^  fc:	90                   	nop$/;"	l
fc	prac3.asm	/^  fc:	5d                   	pop    %ebp$/;"	l
fc	prac4.asm	/^  fc:	c3                   	ret    $/;"	l
fc	prac5.asm	/^  fc:	90                   	nop$/;"	l
fc	prac6.asm	/^  fc:	90                   	nop$/;"	l
fc	prac8.asm	/^  fc:	90                   	nop$/;"	l
fc2	sh.asm	/^     fc2:	0f 84 e0 00 00 00    	je     10a8 <printf+0x178>$/;"	l
fc5	usertests.asm	/^     fc5:	e8 26 2e 00 00       	call   3df0 <printf>$/;"	l
fc8	sh.asm	/^     fc8:	8d 45 e6             	lea    -0x1a(%ebp),%eax$/;"	l
fca	usertests.asm	/^     fca:	8b 45 d4             	mov    -0x2c(%ebp),%eax$/;"	l
fcb	sh.asm	/^     fcb:	83 c3 01             	add    $0x1,%ebx$/;"	l
fcd	usertests.asm	/^     fcd:	85 c0                	test   %eax,%eax$/;"	l
fce	sh.asm	/^     fce:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
fcf	usertests.asm	/^     fcf:	0f 84 26 01 00 00    	je     10fb <sharedfd+0x1db>$/;"	l
fd	cat.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	cat.asm	/^  fd:	c7 44 24 04 08 08 00 	movl   $0x808,0x4(%esp)$/;"	l
fd	echo.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	forktest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	forktest.asm	/^  fd:	e8 40 02 00 00       	call   342 <exit>$/;"	l
fd	grep.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	init.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	init.asm	/^  fd:	e8 70 02 00 00       	call   372 <open>$/;"	l
fd	kill.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd:	31 c0                	xor    %eax,%eax$/;"	l
fd	ln.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ln.asm	/^  fd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
fd	ls.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	prac1.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	prac1.asm	/^  fd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
fd	prac2.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	prac2.asm	/^  fd:	90                   	nop$/;"	l
fd	prac3.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	prac3.asm	/^  fd:	c3                   	ret    $/;"	l
fd	prac4.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	prac4.asm	/^  fd:	31 c0                	xor    %eax,%eax$/;"	l
fd	prac5.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	prac5.asm	/^  fd:	90                   	nop$/;"	l
fd	prac6.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	prac6.asm	/^  fd:	90                   	nop$/;"	l
fd	prac7.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	prac8.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	prac8.asm	/^  fd:	90                   	nop$/;"	l
fd	rm.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.asm	/^      fd:	66 90                	xchg   %ax,%ax$/;"	l
fd	sh.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	file:
fd	stressfs.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_CREATE | O_RDWR);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_RDONLY);$/;"	d
fd	test.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	usertests.asm	/^        fd = open(name, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(file, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(fname, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(name, 0);$/;"	d
fd	usertests.asm	/^    fd = open("", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigarg-ok", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigwrite", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^    fd = open("xx", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open(fname, 0);$/;"	d
fd	usertests.asm	/^    fd = open(name, O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(".", 0);$/;"	d
fd	usertests.asm	/^  fd = open(".", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("123456789012345\/123456789012345\/123456789012345", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("12345678901234\/12345678901234\/12345678901234", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bd", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("bigarg-ok", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/..\/ff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ffff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("doesnotexist", 0);$/;"	d
fd	usertests.asm	/^  fd = open("echo", 0);$/;"	d
fd	usertests.asm	/^  fd = open("init", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("lf1", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("lf2", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	zombie.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd0	kernel.asm	/^  fd0 = -1;$/;"	d
fd1	usertests.asm	/^  fd1 = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd5	sh.asm	/^     fd5:	00 $/;"	l
fd5	usertests.asm	/^     fd5:	e8 d0 2c 00 00       	call   3caa <wait>$/;"	l
fd6	sh.asm	/^     fd6:	31 ff                	xor    %edi,%edi$/;"	l
fd8	sh.asm	/^     fd8:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
fda	usertests.asm	/^     fda:	89 3c 24             	mov    %edi,(%esp)$/;"	l
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	file:
fdc	sh.asm	/^     fdc:	89 34 24             	mov    %esi,(%esp)$/;"	l
fdd	usertests.asm	/^     fdd:	e8 e8 2c 00 00       	call   3cca <close>$/;"	l
fdf	sh.asm	/^     fdf:	89 55 d0             	mov    %edx,-0x30(%ebp)$/;"	l
fe	grep.asm	/^  fe:	5b                   	pop    %ebx$/;"	l
fe	prac2.asm	/^  fe:	90                   	nop$/;"	l
fe	prac3.asm	/^  fe:	0f b6 09             	movzbl (%ecx),%ecx$/;"	l
fe	prac5.asm	/^  fe:	90                   	nop$/;"	l
fe	prac6.asm	/^  fe:	90                   	nop$/;"	l
fe	prac8.asm	/^  fe:	90                   	nop$/;"	l
fe	stressfs.asm	/^  fe:	89 c7                	mov    %eax,%edi$/;"	l
fe2	sh.asm	/^     fe2:	c6 45 e6 25          	movb   $0x25,-0x1a(%ebp)$/;"	l
fe2	usertests.asm	/^     fe2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
fe6	sh.asm	/^     fe6:	e8 17 fe ff ff       	call   e02 <write>$/;"	l
fe9	usertests.asm	/^     fe9:	00 $/;"	l
fea	usertests.asm	/^     fea:	c7 04 24 93 45 00 00 	movl   $0x4593,(%esp)$/;"	l
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc
feb	sh.asm	/^     feb:	8b 55 d0             	mov    -0x30(%ebp),%edx$/;"	l
fee	sh.asm	/^     fee:	8d 45 e7             	lea    -0x19(%ebp),%eax$/;"	l
fetchint	syscall.c	/^fetchint(uint addr, int *ip)$/;"	f
fetchstr	syscall.c	/^fetchstr(uint addr, char **pp)$/;"	f
ff	grep.asm	/^  ff:	5e                   	pop    %esi$/;"	l
ff	kernel.asm	/^  ff = *f;$/;"	d
ff	kill.asm	/^  ff:	5d                   	pop    %ebp$/;"	l
ff	ls.asm	/^  ff:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)$/;"	l
ff	prac2.asm	/^  ff:	90                   	nop$/;"	l
ff	prac4.asm	/^  ff:	5d                   	pop    %ebp$/;"	l
ff	prac5.asm	/^  ff:	90                   	nop$/;"	l
ff	prac6.asm	/^  ff:	90                   	nop$/;"	l
ff	prac8.asm	/^  ff:	90                   	nop$/;"	l
ff	sh.asm	/^      ff:	90                   	nop$/;"	l
ff	usertests.asm	/^      ff:	90                   	nop$/;"	l
ff1	sh.asm	/^     ff1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)$/;"	l
ff1	usertests.asm	/^     ff1:	e8 ec 2c 00 00       	call   3ce2 <open>$/;"	l
ff6	usertests.asm	/^     ff6:	85 c0                	test   %eax,%eax$/;"	l
ff8	sh.asm	/^     ff8:	00 $/;"	l
ff8	usertests.asm	/^     ff8:	89 45 d0             	mov    %eax,-0x30(%ebp)$/;"	l
ff9	sh.asm	/^     ff9:	89 44 24 04          	mov    %eax,0x4(%esp)$/;"	l
ffb	usertests.asm	/^     ffb:	0f 88 c2 00 00 00    	js     10c3 <sharedfd+0x1a3>$/;"	l
ffd	sh.asm	/^     ffd:	89 34 24             	mov    %esi,(%esp)$/;"	l
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anon4	typeref:struct:__anon4::file	file:
file	file.h	/^struct file {$/;"	s
file	sh.c	/^  char *file;$/;"	m	struct:redircmd	file:
filealloc	file.c	/^filealloc(void)$/;"	f
fileclose	file.c	/^fileclose(struct file *f)$/;"	f
filedup	file.c	/^filedup(struct file *f)$/;"	f
fileinit	file.c	/^fileinit(void)$/;"	f
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f
filesz	elf.h	/^  uint filesz;$/;"	m	struct:proghdr
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f
fill_rtcdate	lapic.c	/^fill_rtcdate(struct rtcdate *r)$/;"	f	file:
first	kernel.asm	/^    first = 0;$/;"	d
flags	buf.h	/^  int flags;$/;"	m	struct:buf
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr
flags	elf.h	/^  uint flags;$/;"	m	struct:proghdr
flags	kernel.asm	/^    flags = PTE_FLAGS(*pte);$/;"	d
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic
fmtname	ls.c	/^fmtname(char *path)$/;"	f
fname	usertests.asm	/^    fname = names[i];$/;"	d
fname	usertests.asm	/^    fname = names[pi];$/;"	d
fork	proc.c	/^fork(void)$/;"	f
fork1	sh.c	/^fork1(void)$/;"	f
forkret	proc.c	/^forkret(void)$/;"	f
forktest	forktest.c	/^forktest(void)$/;"	f
forktest	usertests.c	/^forktest(void)$/;"	f
found	kernel.asm	/^found:$/;"	l
fourfiles	usertests.c	/^fourfiles(void)$/;"	f
fourteen	usertests.c	/^fourteen(void)$/;"	f
free	umalloc.c	/^free(void *ap)$/;"	f
freeblock	mkfs.c	/^uint freeblock;$/;"	v
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v
freelist	kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon7	typeref:struct:__anon7::run	file:
freep	cat.asm	/^      freep = prevp;$/;"	d
freep	cat.asm	/^  freep = p;$/;"	d
freep	echo.asm	/^      freep = prevp;$/;"	d
freep	echo.asm	/^  freep = p;$/;"	d
freep	grep.asm	/^      freep = prevp;$/;"	d
freep	grep.asm	/^  freep = p;$/;"	d
freep	init.asm	/^      freep = prevp;$/;"	d
freep	init.asm	/^  freep = p;$/;"	d
freep	kill.asm	/^      freep = prevp;$/;"	d
freep	kill.asm	/^  freep = p;$/;"	d
freep	ln.asm	/^      freep = prevp;$/;"	d
freep	ln.asm	/^  freep = p;$/;"	d
freep	ls.asm	/^      freep = prevp;$/;"	d
freep	ls.asm	/^  freep = p;$/;"	d
freep	mkdir.asm	/^      freep = prevp;$/;"	d
freep	mkdir.asm	/^  freep = p;$/;"	d
freep	prac1.asm	/^      freep = prevp;$/;"	d
freep	prac1.asm	/^  freep = p;$/;"	d
freep	prac2.asm	/^      freep = prevp;$/;"	d
freep	prac2.asm	/^  freep = p;$/;"	d
freep	prac3.asm	/^      freep = prevp;$/;"	d
freep	prac3.asm	/^  freep = p;$/;"	d
freep	prac4.asm	/^      freep = prevp;$/;"	d
freep	prac4.asm	/^  freep = p;$/;"	d
freep	prac5.asm	/^      freep = prevp;$/;"	d
freep	prac5.asm	/^  freep = p;$/;"	d
freep	prac6.asm	/^      freep = prevp;$/;"	d
freep	prac6.asm	/^  freep = p;$/;"	d
freep	prac7.asm	/^      freep = prevp;$/;"	d
freep	prac7.asm	/^  freep = p;$/;"	d
freep	prac8.asm	/^      freep = prevp;$/;"	d
freep	prac8.asm	/^  freep = p;$/;"	d
freep	rm.asm	/^      freep = prevp;$/;"	d
freep	rm.asm	/^  freep = p;$/;"	d
freep	sh.asm	/^      freep = prevp;$/;"	d
freep	sh.asm	/^  freep = p;$/;"	d
freep	stressfs.asm	/^      freep = prevp;$/;"	d
freep	stressfs.asm	/^  freep = p;$/;"	d
freep	test.asm	/^      freep = prevp;$/;"	d
freep	test.asm	/^  freep = p;$/;"	d
freep	umalloc.c	/^static Header *freep;$/;"	v	file:
freep	usertests.asm	/^      freep = prevp;$/;"	d
freep	usertests.asm	/^  freep = p;$/;"	d
freep	wc.asm	/^      freep = prevp;$/;"	d
freep	wc.asm	/^  freep = p;$/;"	d
freep	zombie.asm	/^      freep = prevp;$/;"	d
freep	zombie.asm	/^  freep = p;$/;"	d
freerange	kalloc.c	/^freerange(void *vstart, void *vend)$/;"	f
freevm	vm.c	/^freevm(pde_t *pgdir)$/;"	f
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate
fs	x86.h	/^  ushort fs;$/;"	m	struct:trapframe
fsfd	mkfs.c	/^int fsfd;$/;"	v
fsfull	usertests.c	/^fsfull()$/;"	f
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anon4
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gdt	bootasm.S	/^gdt:$/;"	l
gdt	entryother.S	/^gdt:$/;"	l
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	entryother.S	/^gdtdesc:$/;"	l
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, uint pcs[])$/;"	f
getcmd	sh.c	/^getcmd(char *buf, int nbuf)$/;"	f
gets	ulib.c	/^gets(char *buf, int max)$/;"	f
gettoken	sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f
grep	grep.c	/^grep(char *pattern, int fd)$/;"	f
growproc	proc.c	/^growproc(int n)$/;"	f
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate
gs	x86.h	/^  ushort gs;$/;"	m	struct:trapframe
havedisk1	ide.c	/^static int havedisk1;$/;"	v	file:
havedisk1	kernel.asm	/^      havedisk1 = 1;$/;"	d
havekids	kernel.asm	/^      havekids = 1;$/;"	d
havekids	kernel.asm	/^    havekids = 0;$/;"	d
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon1	typeref:struct:__anon1::buf	file:
header	umalloc.c	/^union header {$/;"	u	file:
hi	usertests.asm	/^  hi = 1100*1024;$/;"	d
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f
holdingsleep	sleeplock.c	/^holdingsleep(struct sleeplock *lk)$/;"	f
hour	date.h	/^  uint hour;$/;"	m	struct:rtcdate
hp	cat.asm	/^  hp = (Header*)p;$/;"	d
hp	echo.asm	/^  hp = (Header*)p;$/;"	d
hp	grep.asm	/^  hp = (Header*)p;$/;"	d
hp	init.asm	/^  hp = (Header*)p;$/;"	d
hp	kill.asm	/^  hp = (Header*)p;$/;"	d
hp	ln.asm	/^  hp = (Header*)p;$/;"	d
hp	ls.asm	/^  hp = (Header*)p;$/;"	d
hp	mkdir.asm	/^  hp = (Header*)p;$/;"	d
hp	prac1.asm	/^  hp = (Header*)p;$/;"	d
hp	prac2.asm	/^  hp = (Header*)p;$/;"	d
hp	prac3.asm	/^  hp = (Header*)p;$/;"	d
hp	prac4.asm	/^  hp = (Header*)p;$/;"	d
hp	prac5.asm	/^  hp = (Header*)p;$/;"	d
hp	prac6.asm	/^  hp = (Header*)p;$/;"	d
hp	prac7.asm	/^  hp = (Header*)p;$/;"	d
hp	prac8.asm	/^  hp = (Header*)p;$/;"	d
hp	rm.asm	/^  hp = (Header*)p;$/;"	d
hp	sh.asm	/^  hp = (Header*)p;$/;"	d
hp	stressfs.asm	/^  hp = (Header*)p;$/;"	d
hp	test.asm	/^  hp = (Header*)p;$/;"	d
hp	usertests.asm	/^  hp = (Header*)p;$/;"	d
hp	wc.asm	/^  hp = (Header*)p;$/;"	d
hp	zombie.asm	/^  hp = (Header*)p;$/;"	d
i	cat.asm	/^  i = 0;$/;"	d
i	echo.asm	/^  i = 0;$/;"	d
i	grep.asm	/^  i = 0;$/;"	d
i	init.asm	/^  i = 0;$/;"	d
i	kernel.asm	/^  i = 0;$/;"	d
i	kill.asm	/^  i = 0;$/;"	d
i	ln.asm	/^  i = 0;$/;"	d
i	ls.asm	/^  i = 0;$/;"	d
i	mkdir.asm	/^  i = 0;$/;"	d
i	prac1.asm	/^  i = 0;$/;"	d
i	prac2.asm	/^  i = 0;$/;"	d
i	prac3.asm	/^  i = 0;$/;"	d
i	prac4.asm	/^  i = 0;$/;"	d
i	prac5.asm	/^  i = 0;$/;"	d
i	prac6.asm	/^  i = 0;$/;"	d
i	prac7.asm	/^  i = 0;$/;"	d
i	prac8.asm	/^  i = 0;$/;"	d
i	rm.asm	/^  i = 0;$/;"	d
i	sh.asm	/^  i = 0;$/;"	d
i	stressfs.asm	/^  i = 0;$/;"	d
i	test.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^      i = de.name[1] - '0';$/;"	d
i	usertests.asm	/^    i = read(fd, buf, 512);$/;"	d
i	usertests.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^  i = read(fd, buf, 2000);$/;"	d
i	wc.asm	/^  i = 0;$/;"	d
i	zombie.asm	/^  i = 0;$/;"	d
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon6
id	kernel.asm	/^  id = ioapicread(REG_ID) >> 24;$/;"	d
ideinit	ide.c	/^ideinit(void)$/;"	f
ideinit	memide.c	/^ideinit(void)$/;"	f
ideintr	ide.c	/^ideintr(void)$/;"	f
ideintr	memide.c	/^ideintr(void)$/;"	f
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf	file:
idequeue	kernel.asm	/^  idequeue = b->qnext;$/;"	d
iderw	ide.c	/^iderw(struct buf *b)$/;"	f
iderw	memide.c	/^iderw(struct buf *b)$/;"	f
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	file:
idewait	ide.c	/^idewait(int checkerr)$/;"	f	file:
idt	trap.c	/^struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc
idtinit	trap.c	/^idtinit(void)$/;"	f
idup	fs.c	/^idup(struct inode *ip)$/;"	f
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	file:
iinit	fs.c	/^iinit(int dev)$/;"	f
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp
inb	x86.h	/^inb(ushort port)$/;"	f
init	initcode.S	/^init:$/;"	l
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f
initlog	log.c	/^initlog(int dev)$/;"	f
initproc	kernel.asm	/^  initproc = p;$/;"	d
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc	file:
initsleeplock	sleeplock.c	/^initsleeplock(struct sleeplock *lk, char *name)$/;"	f
inituvm	vm.c	/^inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f
ino	stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat
inode	file.h	/^struct inode {$/;"	s
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon6	typeref:struct:__anon6::inode	file:
inodestart	fs.h	/^  uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock
input	console.c	/^} input;$/;"	v	typeref:struct:__anon3
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f
install_trans	log.c	/^install_trans(void)$/;"	f	file:
int	cat.asm	/^int$/;"	l
int	echo.asm	/^int$/;"	l
int	forktest.asm	/^int$/;"	l
int	grep.asm	/^int match(char*, char*);$/;"	l
int	grep.asm	/^int matchhere(char *re, char *text)$/;"	l
int	grep.asm	/^int matchhere(char*, char*);$/;"	l
int	grep.asm	/^int matchstar(int c, char *re, char *text)$/;"	l
int	grep.asm	/^int matchstar(int, char*, char*);$/;"	l
int	grep.asm	/^int$/;"	l
int	init.asm	/^int$/;"	l
int	kernel.asm	/^int$/;"	l
int	kill.asm	/^int$/;"	l
int	ln.asm	/^int$/;"	l
int	ls.asm	/^int$/;"	l
int	mkdir.asm	/^int$/;"	l
int	prac1.asm	/^int main(int argc, char *argv[]){$/;"	l
int	prac1.asm	/^int$/;"	l
int	prac2.asm	/^int main(){$/;"	l
int	prac2.asm	/^int$/;"	l
int	prac3.asm	/^int main(int argc, char *argv[]){$/;"	l
int	prac3.asm	/^int$/;"	l
int	prac4.asm	/^int main(){$/;"	l
int	prac4.asm	/^int$/;"	l
int	prac5.asm	/^int main(){$/;"	l
int	prac5.asm	/^int$/;"	l
int	prac6.asm	/^int main(){$/;"	l
int	prac6.asm	/^int$/;"	l
int	prac7.asm	/^int main(){$/;"	l
int	prac7.asm	/^int$/;"	l
int	prac8.asm	/^int main (int argc, char *argv[]) { $/;"	l
int	prac8.asm	/^int$/;"	l
int	rm.asm	/^int$/;"	l
int	sh.asm	/^int$/;"	l
int	stressfs.asm	/^int$/;"	l
int	test.asm	/^int main(int argc, char *argv[]){$/;"	l
int	test.asm	/^int$/;"	l
int	usertests.asm	/^int stdout = 1;$/;"	l
int	usertests.asm	/^int$/;"	l
int	wc.asm	/^int$/;"	l
int	zombie.asm	/^int$/;"	l
intena	kernel.asm	/^  intena = mycpu()->intena;$/;"	d
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent
inum	kernel.asm	/^      inum = de.inum;$/;"	d
inword	wc.asm	/^        inword = 0;$/;"	d
inword	wc.asm	/^        inword = 1;$/;"	d
inword	wc.asm	/^  inword = 0;$/;"	d
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:struct:ioapic
ioapic	kernel.asm	/^      ioapic = (struct mpioapic*)p;$/;"	d
ioapic	kernel.asm	/^  ioapic = (volatile struct ioapic*)IOAPIC;$/;"	d
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f
ioapicid	kernel.asm	/^      ioapicid = ioapic->apicno;$/;"	d
ioapicid	mp.c	/^uchar ioapicid;$/;"	v
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	file:
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	file:
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode
ip	kernel.asm	/^    ip = create(path, T_FILE, 0, 0);$/;"	d
ip	kernel.asm	/^    ip = idup(myproc()->cwd);$/;"	d
ip	kernel.asm	/^    ip = iget(ROOTDEV, ROOTINO);$/;"	d
ip	kernel.asm	/^    ip = next;$/;"	d
ip	kernel.asm	/^  ip = 0;$/;"	d
ip	kernel.asm	/^  ip = empty;$/;"	d
iput	fs.c	/^iput(struct inode *ip)$/;"	f
iputtest	usertests.c	/^iputtest(void)$/;"	f
iref	usertests.c	/^iref(void)$/;"	f
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	file:
ismp	kernel.asm	/^      ismp = 0;$/;"	d
ismp	kernel.asm	/^  ismp = 1;$/;"	d
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	file:
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f
kalloc	kalloc.c	/^kalloc(void)$/;"	f
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f
kbdintr	kbd.c	/^kbdintr(void)$/;"	f
kernel	kernel.asm	/^kernel:     file format elf32-i386$/;"	l
kfree	kalloc.c	/^kfree(char *v)$/;"	f
kill	proc.c	/^kill(int pid)$/;"	f
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
kinit1	kalloc.c	/^kinit1(void *vstart, void *vend)$/;"	f
kinit2	kalloc.c	/^kinit2(void *vstart, void *vend)$/;"	f
kmap	vm.c	/^static struct kmap {$/;"	s	file:
kmap	vm.c	/^} kmap[] = {$/;"	v	typeref:struct:kmap	file:
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon7
kpgdir	kernel.asm	/^  kpgdir = setupkvm();$/;"	d
kpgdir	vm.c	/^pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc
kvmalloc	vm.c	/^kvmalloc(void)$/;"	f
l	wc.asm	/^  l = w = c = 0;$/;"	d
lapic	kernel.asm	/^  lapic = (uint*)conf->lapicaddr;$/;"	d
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapicaddr	mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f
lapicid	lapic.c	/^lapicid(void)$/;"	f
lapicinit	lapic.c	/^lapicinit(void)$/;"	f
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	file:
last	kernel.asm	/^      last = s+1;$/;"	d
last	kernel.asm	/^  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);$/;"	d
lastaddr	usertests.asm	/^  lastaddr = (char*) (BIG-1);$/;"	d
lcmd	sh.asm	/^    lcmd = (struct listcmd*)cmd;$/;"	d
lcr3	x86.h	/^lcr3(uint val)$/;"	f
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate
left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
len	kernel.asm	/^  len = path - s;$/;"	d
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f
lh	log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:log::logheader	file:
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate
linktest	usertests.c	/^linktest(void)$/;"	f
linkunlink	usertests.c	/^linkunlink()$/;"	f
listcmd	sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f
listcmd	sh.c	/^struct listcmd {$/;"	s	file:
lk	sleeplock.h	/^  struct spinlock lk; \/\/ spinlock protecting this sleep lock$/;"	m	struct:sleeplock	typeref:struct:sleeplock::spinlock
loadgs	x86.h	/^loadgs(ushort v)$/;"	f
loaduvm	vm.c	/^loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon1	typeref:struct:__anon1::spinlock	file:
lock	buf.h	/^  struct sleeplock lock;$/;"	m	struct:buf	typeref:struct:buf::sleeplock
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon2	typeref:struct:__anon2::spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anon4	typeref:struct:__anon4::spinlock	file:
lock	file.h	/^  struct sleeplock lock; \/\/ protects everything below here$/;"	m	struct:inode	typeref:struct:inode::sleeplock
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon6	typeref:struct:__anon6::spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon7	typeref:struct:__anon7::spinlock	file:
lock	log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:log::spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:
lock	proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon8	typeref:struct:__anon8::spinlock	file:
locked	sleeplock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:sleeplock
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock
locking	console.c	/^  int locking;$/;"	m	struct:__anon2	file:
locking	kernel.asm	/^  locking = cons.locking;$/;"	d
log	log.c	/^struct log log;$/;"	v	typeref:struct:log
log	log.c	/^struct log {$/;"	s	file:
log_write	log.c	/^log_write(struct buf *b)$/;"	f
logheader	log.c	/^struct logheader {$/;"	s	file:
logstart	fs.h	/^  uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock
ls	ls.c	/^ls(char *path)$/;"	f
ltr	x86.h	/^ltr(ushort sel)$/;"	f
m	grep.asm	/^      m = 0;$/;"	d
m	grep.asm	/^  m = 0;$/;"	d
m	kernel.asm	/^      m = 1 << (bi % 8);$/;"	d
m	kernel.asm	/^    m = min(n - tot, BSIZE - off%BSIZE);$/;"	d
m	kernel.asm	/^  m = 1 << (bi % 8);$/;"	d
m1	usertests.asm	/^      m1 = m2;$/;"	d
m1	usertests.asm	/^    m1 = 0;$/;"	d
m1	usertests.asm	/^    m1 = malloc(1024*20);$/;"	d
m2	usertests.asm	/^      m2 = *(char**)m1;$/;"	d
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
main	cat.c	/^main(int argc, char *argv[])$/;"	f
main	echo.c	/^main(int argc, char *argv[])$/;"	f
main	forktest.c	/^main(void)$/;"	f
main	grep.c	/^main(int argc, char *argv[])$/;"	f
main	init.c	/^main(void)$/;"	f
main	kill.c	/^main(int argc, char **argv)$/;"	f
main	ln.c	/^main(int argc, char *argv[])$/;"	f
main	ls.c	/^main(int argc, char *argv[])$/;"	f
main	main.c	/^main(void)$/;"	f
main	mkdir.c	/^main(int argc, char *argv[])$/;"	f
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f
main	prac1.c	/^int main(int argc, char *argv[]){$/;"	f
main	prac2.c	/^int main(){$/;"	f
main	prac3.c	/^int main(int argc, char *argv[]){$/;"	f
main	prac4.c	/^int main(){$/;"	f
main	prac5.c	/^int main(){$/;"	f
main	prac6.c	/^int main(){$/;"	f
main	prac7.c	/^int main(){$/;"	f
main	prac8.c	/^int main (int argc, char *argv[]) { $/;"	f
main	rm.c	/^main(int argc, char *argv[])$/;"	f
main	sh.c	/^main(void)$/;"	f
main	stressfs.c	/^main(int argc, char *argv[])$/;"	f
main	usertests.c	/^main(int argc, char *argv[])$/;"	f
main	wc.c	/^main(int argc, char *argv[])$/;"	f
main	zombie.c	/^main(void)$/;"	f
major	file.h	/^  short major;$/;"	m	struct:inode
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f
mappages	vm.c	/^mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)$/;"	f	file:
match	grep.c	/^match(char *re, char *text)$/;"	f
matchhere	grep.c	/^int matchhere(char *re, char *text)$/;"	f
matchstar	grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f
maxintr	kernel.asm	/^  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;$/;"	d
mem	kernel.asm	/^    mem = kalloc();$/;"	d
mem	kernel.asm	/^  mem = kalloc();$/;"	d
mem	usertests.c	/^mem(void)$/;"	f
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f
memcpy	string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f
memdisk	memide.c	/^static uchar *memdisk;$/;"	v	file:
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f
memmove	ulib.c	/^memmove(void *vdst, const void *vsrc, int n)$/;"	f
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f
memsz	elf.h	/^  uint memsz;$/;"	m	struct:proghdr
microdelay	lapic.c	/^microdelay(int us)$/;"	f
min	fs.c	24;"	d	file:
min	mkfs.c	253;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode
minute	date.h	/^  uint minute;$/;"	m	struct:rtcdate
mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	file:
month	date.h	/^  uint month;$/;"	m	struct:rtcdate
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	file:
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	file:
mpenter	main.c	/^mpenter(void)$/;"	f	file:
mpinit	mp.c	/^mpinit(void)$/;"	f
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	main.c	/^mpmain(void)$/;"	f	file:
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	mp.c	/^mpsearch(void)$/;"	f	file:
mpsearch1	mp.c	/^mpsearch1(uint a, int len)$/;"	f	file:
multiboot_header	entry.S	/^multiboot_header:$/;"	l
mycpu	proc.c	/^mycpu(void)$/;"	f
myproc	proc.c	/^myproc(void) {$/;"	f
n	cat.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	cat.asm	/^  n = 0;$/;"	d
n	echo.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	echo.asm	/^  n = 0;$/;"	d
n	forktest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	forktest.asm	/^  n = 0;$/;"	d
n	grep.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	grep.asm	/^  n = 0;$/;"	d
n	init.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	init.asm	/^  n = 0;$/;"	d
n	kernel.asm	/^      n = PGSIZE;$/;"	d
n	kernel.asm	/^      n = len;$/;"	d
n	kernel.asm	/^      n = sz - i;$/;"	d
n	kernel.asm	/^    n = PGSIZE - (va - va0);$/;"	d
n	kernel.asm	/^    n = ip->size - off;$/;"	d
n	kill.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	kill.asm	/^  n = 0;$/;"	d
n	ln.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ln.asm	/^  n = 0;$/;"	d
n	log.c	/^  int n;$/;"	m	struct:logheader	file:
n	ls.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ls.asm	/^  n = 0;$/;"	d
n	mkdir.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	mkdir.asm	/^  n = 0;$/;"	d
n	prac1.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	prac1.asm	/^  n = 0;$/;"	d
n	prac2.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	prac2.asm	/^  n = 0;$/;"	d
n	prac3.asm	/^		n = read(0,buf,sizeof(buf));$/;"	d
n	prac3.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	prac3.asm	/^  n = 0;$/;"	d
n	prac4.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	prac4.asm	/^  n = 0;$/;"	d
n	prac5.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	prac5.asm	/^  n = 0;$/;"	d
n	prac6.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	prac6.asm	/^  n = 0;$/;"	d
n	prac7.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	prac7.asm	/^  n = 0;$/;"	d
n	prac8.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	prac8.asm	/^  n = 0;$/;"	d
n	rm.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	rm.asm	/^  n = 0;$/;"	d
n	sh.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	sh.asm	/^  n = 0;$/;"	d
n	stressfs.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	stressfs.asm	/^  n = 0;$/;"	d
n	test.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	test.asm	/^  n = 0;$/;"	d
n	usertests.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	usertests.asm	/^  n = 0;$/;"	d
n	wc.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	wc.asm	/^  n = 0;$/;"	d
n	zombie.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	zombie.asm	/^  n = 0;$/;"	d
n1	kernel.asm	/^        n1 = max;$/;"	d
name	cat.asm	/^  name: \\$/;"	l
name	echo.asm	/^  name: \\$/;"	l
name	forktest.asm	/^  name: \\$/;"	l
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent
name	grep.asm	/^  name: \\$/;"	l
name	init.asm	/^  name: \\$/;"	l
name	kill.asm	/^  name: \\$/;"	l
name	ln.asm	/^  name: \\$/;"	l
name	ls.asm	/^  name: \\$/;"	l
name	mkdir.asm	/^  name: \\$/;"	l
name	prac1.asm	/^  name: \\$/;"	l
name	prac2.asm	/^  name: \\$/;"	l
name	prac3.asm	/^  name: \\$/;"	l
name	prac4.asm	/^  name: \\$/;"	l
name	prac5.asm	/^  name: \\$/;"	l
name	prac6.asm	/^  name: \\$/;"	l
name	prac7.asm	/^  name: \\$/;"	l
name	prac8.asm	/^  name: \\$/;"	l
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
name	rm.asm	/^  name: \\$/;"	l
name	sh.asm	/^  name: \\$/;"	l
name	sleeplock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:sleeplock
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock
name	stressfs.asm	/^  name: \\$/;"	l
name	test.asm	/^  name: \\$/;"	l
name	usertests.asm	/^  name: \\$/;"	l
name	usertests.c	/^char name[3];$/;"	v
name	usys.S	/^  name: \\$/;"	l
name	wc.asm	/^  name: \\$/;"	l
name	zombie.asm	/^  name: \\$/;"	l
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f
namei	fs.c	/^namei(char *path)$/;"	f
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	file:
nbitmap	mkfs.c	/^int nbitmap = FSSIZE\/(BSIZE*8) + 1;$/;"	v
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock
nblocks	mkfs.c	/^int nblocks;  \/\/ Number of data blocks$/;"	v
nc	usertests.asm	/^  nc = np = 0;$/;"	d
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu
ncpu	mp.c	/^int ncpu;$/;"	v
neg	cat.asm	/^    neg = 1;$/;"	d
neg	cat.asm	/^  neg = 0;$/;"	d
neg	echo.asm	/^    neg = 1;$/;"	d
neg	echo.asm	/^  neg = 0;$/;"	d
neg	grep.asm	/^    neg = 1;$/;"	d
neg	grep.asm	/^  neg = 0;$/;"	d
neg	init.asm	/^    neg = 1;$/;"	d
neg	init.asm	/^  neg = 0;$/;"	d
neg	kill.asm	/^    neg = 1;$/;"	d
neg	kill.asm	/^  neg = 0;$/;"	d
neg	ln.asm	/^    neg = 1;$/;"	d
neg	ln.asm	/^  neg = 0;$/;"	d
neg	ls.asm	/^    neg = 1;$/;"	d
neg	ls.asm	/^  neg = 0;$/;"	d
neg	mkdir.asm	/^    neg = 1;$/;"	d
neg	mkdir.asm	/^  neg = 0;$/;"	d
neg	prac1.asm	/^    neg = 1;$/;"	d
neg	prac1.asm	/^  neg = 0;$/;"	d
neg	prac2.asm	/^    neg = 1;$/;"	d
neg	prac2.asm	/^  neg = 0;$/;"	d
neg	prac3.asm	/^    neg = 1;$/;"	d
neg	prac3.asm	/^  neg = 0;$/;"	d
neg	prac4.asm	/^    neg = 1;$/;"	d
neg	prac4.asm	/^  neg = 0;$/;"	d
neg	prac5.asm	/^    neg = 1;$/;"	d
neg	prac5.asm	/^  neg = 0;$/;"	d
neg	prac6.asm	/^    neg = 1;$/;"	d
neg	prac6.asm	/^  neg = 0;$/;"	d
neg	prac7.asm	/^    neg = 1;$/;"	d
neg	prac7.asm	/^  neg = 0;$/;"	d
neg	prac8.asm	/^    neg = 1;$/;"	d
neg	prac8.asm	/^  neg = 0;$/;"	d
neg	rm.asm	/^    neg = 1;$/;"	d
neg	rm.asm	/^  neg = 0;$/;"	d
neg	sh.asm	/^    neg = 1;$/;"	d
neg	sh.asm	/^  neg = 0;$/;"	d
neg	stressfs.asm	/^    neg = 1;$/;"	d
neg	stressfs.asm	/^  neg = 0;$/;"	d
neg	test.asm	/^    neg = 1;$/;"	d
neg	test.asm	/^  neg = 0;$/;"	d
neg	usertests.asm	/^    neg = 1;$/;"	d
neg	usertests.asm	/^  neg = 0;$/;"	d
neg	wc.asm	/^    neg = 1;$/;"	d
neg	wc.asm	/^  neg = 0;$/;"	d
neg	zombie.asm	/^    neg = 1;$/;"	d
neg	zombie.asm	/^  neg = 0;$/;"	d
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:
nextpid	proc.c	/^int nextpid = 1;$/;"	v
ninodeblocks	mkfs.c	/^int ninodeblocks = NINODES \/ IPB + 1;$/;"	v
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock
nlink	file.h	/^  short nlink;$/;"	m	struct:inode
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat
nlog	fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock
nlog	mkfs.c	/^int nlog = LOGSIZE;$/;"	v
nmeta	mkfs.c	/^int nmeta;    \/\/ Number of meta blocks (boot, sb, nlog, inode, bitmap)$/;"	v
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	file:
nu	cat.asm	/^    nu = 4096;$/;"	d
nu	echo.asm	/^    nu = 4096;$/;"	d
nu	grep.asm	/^    nu = 4096;$/;"	d
nu	init.asm	/^    nu = 4096;$/;"	d
nu	kill.asm	/^    nu = 4096;$/;"	d
nu	ln.asm	/^    nu = 4096;$/;"	d
nu	ls.asm	/^    nu = 4096;$/;"	d
nu	mkdir.asm	/^    nu = 4096;$/;"	d
nu	prac1.asm	/^    nu = 4096;$/;"	d
nu	prac2.asm	/^    nu = 4096;$/;"	d
nu	prac3.asm	/^    nu = 4096;$/;"	d
nu	prac4.asm	/^    nu = 4096;$/;"	d
nu	prac5.asm	/^    nu = 4096;$/;"	d
nu	prac6.asm	/^    nu = 4096;$/;"	d
nu	prac7.asm	/^    nu = 4096;$/;"	d
nu	prac8.asm	/^    nu = 4096;$/;"	d
nu	rm.asm	/^    nu = 4096;$/;"	d
nu	sh.asm	/^    nu = 4096;$/;"	d
nu	stressfs.asm	/^    nu = 4096;$/;"	d
nu	test.asm	/^    nu = 4096;$/;"	d
nu	usertests.asm	/^    nu = 4096;$/;"	d
nu	wc.asm	/^    nu = 4096;$/;"	d
nu	zombie.asm	/^    nu = 4096;$/;"	d
nulterminate	sh.c	/^nulterminate(struct cmd *cmd)$/;"	f
num	kernel.asm	/^  num = curproc->tf->eax;$/;"	d
nunits	cat.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	echo.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	grep.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	init.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	kill.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ln.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ls.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	mkdir.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	prac1.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	prac2.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	prac3.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	prac4.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	prac5.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	prac6.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	prac7.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	prac8.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	rm.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	sh.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	stressfs.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	test.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	usertests.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	wc.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	zombie.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	file:
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf
oemtable	mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf
oesp	x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe
off	elf.h	/^  uint off;$/;"	m	struct:proghdr
off	file.h	/^  uint off;$/;"	m	struct:file
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
offset	bootblock.asm	/^  offset = (offset \/ SECTSIZE) + 1;$/;"	d
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
oldbrk	usertests.asm	/^  oldbrk = sbrk(0);$/;"	d
oldpgdir	kernel.asm	/^  oldpgdir = curproc->pgdir;$/;"	d
openiputtest	usertests.c	/^openiputtest(void)$/;"	f
opentest	usertests.c	/^opentest(void)$/;"	f
os	cat.asm	/^  os = s;$/;"	d
os	echo.asm	/^  os = s;$/;"	d
os	forktest.asm	/^  os = s;$/;"	d
os	grep.asm	/^  os = s;$/;"	d
os	init.asm	/^  os = s;$/;"	d
os	kernel.asm	/^  os = s;$/;"	d
os	kill.asm	/^  os = s;$/;"	d
os	ln.asm	/^  os = s;$/;"	d
os	ls.asm	/^  os = s;$/;"	d
os	mkdir.asm	/^  os = s;$/;"	d
os	prac1.asm	/^  os = s;$/;"	d
os	prac2.asm	/^  os = s;$/;"	d
os	prac3.asm	/^  os = s;$/;"	d
os	prac4.asm	/^  os = s;$/;"	d
os	prac5.asm	/^  os = s;$/;"	d
os	prac6.asm	/^  os = s;$/;"	d
os	prac7.asm	/^  os = s;$/;"	d
os	prac8.asm	/^  os = s;$/;"	d
os	rm.asm	/^  os = s;$/;"	d
os	sh.asm	/^  os = s;$/;"	d
os	stressfs.asm	/^  os = s;$/;"	d
os	test.asm	/^  os = s;$/;"	d
os	usertests.asm	/^  os = s;$/;"	d
os	wc.asm	/^  os = s;$/;"	d
os	zombie.asm	/^  os = s;$/;"	d
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f
outstanding	log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	file:
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f
p	cat.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	echo.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	grep.asm	/^      p = q+1;$/;"	d
p	grep.asm	/^    p = buf;$/;"	d
p	grep.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	init.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	kernel.asm	/^    p = ((bda[0x14]<<8)|bda[0x13])*1024;$/;"	d
p	kernel.asm	/^  p = (char*)PGROUNDUP((uint)vstart);$/;"	d
p	kernel.asm	/^  p = 0;$/;"	d
p	kernel.asm	/^  p = allocproc();$/;"	d
p	kernel.asm	/^  p = c->proc;$/;"	d
p	kill.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ln.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ls.asm	/^    p = buf+strlen(buf);$/;"	d
p	ls.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mkdir.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc
p	prac1.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	prac2.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	prac3.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	prac4.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	prac5.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	prac6.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	prac7.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	prac8.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	rm.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	sh.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	stressfs.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	test.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	usertests.asm	/^  p = sbrk(amt);$/;"	d
p	usertests.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	wc.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	zombie.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
pa	bootblock.asm	/^    pa = (uchar*)ph->paddr;$/;"	d
pa	kernel.asm	/^      pa = PTE_ADDR(*pte);$/;"	d
pa	kernel.asm	/^    pa = PTE_ADDR(*pte);$/;"	d
pa0	kernel.asm	/^    pa0 = uva2ka(pgdir, (char*)va0);$/;"	d
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	file:
pad	runoff	/^pad()$/;"	f
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate
padding1	x86.h	/^  ushort padding1;$/;"	m	struct:trapframe
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate
padding2	x86.h	/^  ushort padding2;$/;"	m	struct:trapframe
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate
padding3	x86.h	/^  ushort padding3;$/;"	m	struct:trapframe
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate
padding4	x86.h	/^  ushort padding4;$/;"	m	struct:trapframe
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate
padding5	x86.h	/^  ushort padding5;$/;"	m	struct:trapframe
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate
padding6	x86.h	/^  ushort padding6;$/;"	m	struct:trapframe
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate
paddr	elf.h	/^  uint paddr;$/;"	m	struct:proghdr
panic	console.c	/^panic(char *s)$/;"	f
panic	sh.c	/^panic(char *s)$/;"	f
panicked	console.c	/^static int panicked = 0;$/;"	v	file:
panicked	kernel.asm	/^  panicked = 1; \/\/ freeze other CPU$/;"	d
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
parseblock	sh.c	/^parseblock(char **ps, char *es)$/;"	f
parsecmd	sh.c	/^parsecmd(char *s)$/;"	f
parseexec	sh.c	/^parseexec(char **ps, char *es)$/;"	f
parseline	sh.c	/^parseline(char **ps, char *es)$/;"	f
parsepipe	sh.c	/^parsepipe(char **ps, char *es)$/;"	f
parseredirs	sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f
pattern	grep.asm	/^  pattern = argv[1];$/;"	d
pcmd	sh.asm	/^    pcmd = (struct pipecmd*)cmd;$/;"	d
pcs	spinlock.h	/^  uint pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock
pde	kernel.asm	/^  pde = &pgdir[PDX(va)];$/;"	d
pde_t	types.h	/^typedef uint pde_t;$/;"	t
peek	sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f
perm	vm.c	/^  int perm;$/;"	m	struct:kmap	file:
pgdir	kernel.asm	/^  pgdir = 0;$/;"	d
pgdir	proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc
pgtab	kernel.asm	/^    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));$/;"	d
ph	bootblock.asm	/^  ph = (struct proghdr*)((uchar*)elf + elf->phoff);$/;"	d
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr
phoff	elf.h	/^  uint phoff;$/;"	m	struct:elfhdr
phys_end	vm.c	/^  uint phys_end;$/;"	m	struct:kmap	file:
phys_start	vm.c	/^  uint phys_start;$/;"	m	struct:kmap	file:
physaddr	mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp
picinit	picirq.c	/^picinit(void)$/;"	f
pid	forktest.asm	/^    pid = fork();$/;"	d
pid	init.asm	/^    pid = fork();$/;"	d
pid	kernel.asm	/^        pid = p->pid;$/;"	d
pid	kernel.asm	/^  pid = np->pid;$/;"	d
pid	prac1.asm	/^		pid = wait();$/;"	d
pid	proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc
pid	sh.asm	/^  pid = fork();$/;"	d
pid	sleeplock.h	/^  int pid;           \/\/ Process holding lock$/;"	m	struct:sleeplock
pid	test.asm	/^		pid = wait();$/;"	d
pid	usertests.asm	/^    pid = fork();$/;"	d
pid	usertests.asm	/^  pid = fork();$/;"	d
pid1	usertests.asm	/^  pid1 = fork();$/;"	d
pid2	usertests.asm	/^  pid2 = fork();$/;"	d
pid3	usertests.asm	/^  pid3 = fork();$/;"	d
pinit	proc.c	/^pinit(void)$/;"	f
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	usertests.c	/^pipe1(void)$/;"	f
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f
pipecmd	sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f
pipecmd	sh.c	/^struct pipecmd {$/;"	s	file:
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f
popcli	spinlock.c	/^popcli(void)$/;"	f
port	usertests.asm	/^    port = RTC_ADDR;$/;"	d
port	usertests.asm	/^    port = RTC_DATA;$/;"	d
pos	kernel.asm	/^  pos = inb(CRTPORT+1) << 8;$/;"	d
ppid	usertests.asm	/^    ppid = getpid();$/;"	d
ppid	usertests.asm	/^  ppid = getpid();$/;"	d
preempt	usertests.c	/^preempt(void)$/;"	f
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf
printf	forktest.c	/^printf(int fd, const char *s, ...)$/;"	f
printf	printf.c	/^printf(int fd, const char *fmt, ...)$/;"	f
printint	console.c	/^printint(int xx, int base, int sign)$/;"	f	file:
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	file:
proc	kernel.asm	/^      proc = (struct mpproc*)p;$/;"	d
proc	proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon8	typeref:struct:__anon8::proc	file:
proc	proc.h	/^  struct proc *proc;           \/\/ The process running on this cpu or null$/;"	m	struct:cpu	typeref:struct:cpu::proc
proc	proc.h	/^struct proc {$/;"	s
procdump	proc.c	/^procdump(void)$/;"	f
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf
proghdr	elf.h	/^struct proghdr {$/;"	s
ptable	proc.c	/^} ptable;$/;"	v	typeref:struct:__anon8
pte	kernel.asm	/^    pte = walkpgdir(pgdir, (char*)a, 0);$/;"	d
pte	kernel.asm	/^  pte = walkpgdir(pgdir, uva, 0);$/;"	d
pte_t	mmu.h	/^typedef uint pte_t;$/;"	t
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon9	typeref:union:header::__anon9::header	file:
pushcli	spinlock.c	/^pushcli(void)$/;"	f
putc	printf.c	/^putc(int fd, char c)$/;"	f	file:
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf
r	cat.asm	/^  r = fstat(fd, st);$/;"	d
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon3	file:
r	echo.asm	/^  r = fstat(fd, st);$/;"	d
r	forktest.asm	/^  r = fstat(fd, st);$/;"	d
r	grep.asm	/^  r = fstat(fd, st);$/;"	d
r	init.asm	/^  r = fstat(fd, st);$/;"	d
r	kernel.asm	/^  r = (struct run*)v;$/;"	d
r	kernel.asm	/^  r = kmem.freelist;$/;"	d
r	kernel.asm	/^  r = lk->locked && (lk->pid == myproc()->pid);$/;"	d
r	kernel.asm	/^  r = lock->locked && lock->cpu == mycpu();$/;"	d
r	kill.asm	/^  r = fstat(fd, st);$/;"	d
r	ln.asm	/^  r = fstat(fd, st);$/;"	d
r	ls.asm	/^  r = fstat(fd, st);$/;"	d
r	mkdir.asm	/^  r = fstat(fd, st);$/;"	d
r	prac1.asm	/^  r = fstat(fd, st);$/;"	d
r	prac2.asm	/^  r = fstat(fd, st);$/;"	d
r	prac3.asm	/^  r = fstat(fd, st);$/;"	d
r	prac4.asm	/^  r = fstat(fd, st);$/;"	d
r	prac5.asm	/^  r = fstat(fd, st);$/;"	d
r	prac6.asm	/^  r = fstat(fd, st);$/;"	d
r	prac7.asm	/^  r = fstat(fd, st);$/;"	d
r	prac8.asm	/^  r = fstat(fd, st);$/;"	d
r	rm.asm	/^  r = fstat(fd, st);$/;"	d
r	sh.asm	/^  r = fstat(fd, st);$/;"	d
r	stressfs.asm	/^  r = fstat(fd, st);$/;"	d
r	test.asm	/^  r = fstat(fd, st);$/;"	d
r	usertests.asm	/^  r = fstat(fd, st);$/;"	d
r	wc.asm	/^  r = fstat(fd, st);$/;"	d
r	zombie.asm	/^  r = fstat(fd, st);$/;"	d
rand	usertests.c	/^rand()$/;"	f
randstate	usertests.asm	/^  randstate = randstate * 1664525 + 1013904223;$/;"	d
randstate	usertests.c	/^unsigned long randstate = 1;$/;"	v
rcmd	sh.asm	/^    rcmd = (struct redircmd*)cmd;$/;"	d
rcr2	x86.h	/^rcr2(void)$/;"	f
read	file.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw
read_head	log.c	/^read_head(void)$/;"	f	file:
readable	file.h	/^  char readable;$/;"	m	struct:file
readeflags	x86.h	/^readeflags(void)$/;"	f
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f
readseg	bootmain.c	/^readseg(uchar* pa, uint count, uint offset)$/;"	f
recover_from_log	log.c	/^recover_from_log(void)$/;"	f	file:
redircmd	sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f
redircmd	sh.c	/^struct redircmd {$/;"	s	file:
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file
refcnt	buf.h	/^  uint refcnt;$/;"	m	struct:buf
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	file:
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f
releasesleep	sleeplock.c	/^releasesleep(struct sleeplock *lk)$/;"	f
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc
ret	sh.asm	/^      ret = '+';$/;"	d
ret	sh.asm	/^    ret = 'a';$/;"	d
ret	sh.asm	/^    ret = parseredirs(ret, ps, es);$/;"	d
ret	sh.asm	/^  ret = *s;$/;"	d
ret	sh.asm	/^  ret = execcmd();$/;"	d
ret	sh.asm	/^  ret = parseredirs(ret, ps, es);$/;"	d
return	kernel.asm	/^  return d;$/;"	d
right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f
rmdot	usertests.c	/^rmdot(void)$/;"	f
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
rtcdate	date.h	/^struct rtcdate {$/;"	s
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	sh.c	/^runcmd(struct cmd *cmd)$/;"	f
s	cat.asm	/^          s = "(null)";$/;"	d
s	cat.asm	/^        s = (char*)*ap;$/;"	d
s	echo.asm	/^          s = "(null)";$/;"	d
s	echo.asm	/^        s = (char*)*ap;$/;"	d
s	grep.asm	/^          s = "(null)";$/;"	d
s	grep.asm	/^        s = (char*)*ap;$/;"	d
s	init.asm	/^          s = "(null)";$/;"	d
s	init.asm	/^        s = (char*)*ap;$/;"	d
s	kernel.asm	/^        s = "(null)";$/;"	d
s	kernel.asm	/^  s = path;$/;"	d
s	kernel.asm	/^  s = src;$/;"	d
s	kill.asm	/^          s = "(null)";$/;"	d
s	kill.asm	/^        s = (char*)*ap;$/;"	d
s	ln.asm	/^          s = "(null)";$/;"	d
s	ln.asm	/^        s = (char*)*ap;$/;"	d
s	ls.asm	/^          s = "(null)";$/;"	d
s	ls.asm	/^        s = (char*)*ap;$/;"	d
s	mkdir.asm	/^          s = "(null)";$/;"	d
s	mkdir.asm	/^        s = (char*)*ap;$/;"	d
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
s	prac1.asm	/^          s = "(null)";$/;"	d
s	prac1.asm	/^        s = (char*)*ap;$/;"	d
s	prac2.asm	/^          s = "(null)";$/;"	d
s	prac2.asm	/^        s = (char*)*ap;$/;"	d
s	prac3.asm	/^          s = "(null)";$/;"	d
s	prac3.asm	/^        s = (char*)*ap;$/;"	d
s	prac4.asm	/^          s = "(null)";$/;"	d
s	prac4.asm	/^        s = (char*)*ap;$/;"	d
s	prac5.asm	/^          s = "(null)";$/;"	d
s	prac5.asm	/^        s = (char*)*ap;$/;"	d
s	prac6.asm	/^          s = "(null)";$/;"	d
s	prac6.asm	/^        s = (char*)*ap;$/;"	d
s	prac7.asm	/^          s = "(null)";$/;"	d
s	prac7.asm	/^        s = (char*)*ap;$/;"	d
s	prac8.asm	/^          s = "(null)";$/;"	d
s	prac8.asm	/^        s = (char*)*ap;$/;"	d
s	rm.asm	/^          s = "(null)";$/;"	d
s	rm.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^          s = "(null)";$/;"	d
s	sh.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^  s = *ps;$/;"	d
s	stressfs.asm	/^          s = "(null)";$/;"	d
s	stressfs.asm	/^        s = (char*)*ap;$/;"	d
s	test.asm	/^          s = "(null)";$/;"	d
s	test.asm	/^        s = (char*)*ap;$/;"	d
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon9	file:
s	usertests.asm	/^          s = "(null)";$/;"	d
s	usertests.asm	/^        s = (char*)*ap;$/;"	d
s	wc.asm	/^          s = "(null)";$/;"	d
s	wc.asm	/^        s = (char*)*ap;$/;"	d
s	zombie.asm	/^          s = "(null)";$/;"	d
s	zombie.asm	/^        s = (char*)*ap;$/;"	d
s1	kernel.asm	/^  s1 = v1;$/;"	d
s2	kernel.asm	/^  s2 = v2;$/;"	d
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f
sb	fs.c	/^struct superblock sb; $/;"	v	typeref:struct:superblock
sb	kernel.asm	/^  sb = cmos_read(CMOS_STATB);$/;"	d
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrktest	usertests.c	/^sbrktest(void)$/;"	f
sched	proc.c	/^sched(void)$/;"	f
scheduler	proc.c	/^scheduler(void)$/;"	f
scheduler	proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context
second	date.h	/^  uint second;$/;"	m	struct:rtcdate
segdesc	mmu.h	/^struct segdesc {$/;"	s
seginit	vm.c	/^seginit(void)$/;"	f
seq	usertests.asm	/^  seq = 0;$/;"	d
setupkvm	vm.c	/^setupkvm(void)$/;"	f
sharedfd	usertests.c	/^sharedfd(void)$/;"	f
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr
shoff	elf.h	/^  uint shoff;$/;"	m	struct:elfhdr
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc
size	file.h	/^  uint size;$/;"	m	struct:inode
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock
size	log.c	/^  int size;$/;"	m	struct:log	file:
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat
size	umalloc.c	/^    uint size;$/;"	m	struct:header::__anon9	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	file:
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f
sleeplock	sleeplock.h	/^struct sleeplock {$/;"	s
sp	kernel.asm	/^    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;$/;"	d
sp	kernel.asm	/^  sp = p->kstack + KSTACKSIZE;$/;"	d
sp	kernel.asm	/^  sp = sz;$/;"	d
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp
spin	bootasm.S	/^spin:$/;"	l
spin	bootblock.asm	/^spin:$/;"	l
spin	entryother.S	/^spin:$/;"	l
spin	entryother.asm	/^spin:$/;"	l
spinlock	spinlock.h	/^struct spinlock {$/;"	s
src	cat.asm	/^  src = vsrc;$/;"	d
src	echo.asm	/^  src = vsrc;$/;"	d
src	forktest.asm	/^  src = vsrc;$/;"	d
src	grep.asm	/^  src = vsrc;$/;"	d
src	init.asm	/^  src = vsrc;$/;"	d
src	kill.asm	/^  src = vsrc;$/;"	d
src	ln.asm	/^  src = vsrc;$/;"	d
src	ls.asm	/^  src = vsrc;$/;"	d
src	mkdir.asm	/^  src = vsrc;$/;"	d
src	prac1.asm	/^  src = vsrc;$/;"	d
src	prac2.asm	/^  src = vsrc;$/;"	d
src	prac3.asm	/^  src = vsrc;$/;"	d
src	prac4.asm	/^  src = vsrc;$/;"	d
src	prac5.asm	/^  src = vsrc;$/;"	d
src	prac6.asm	/^  src = vsrc;$/;"	d
src	prac7.asm	/^  src = vsrc;$/;"	d
src	prac8.asm	/^  src = vsrc;$/;"	d
src	rm.asm	/^  src = vsrc;$/;"	d
src	sh.asm	/^  src = vsrc;$/;"	d
src	stressfs.asm	/^  src = vsrc;$/;"	d
src	test.asm	/^  src = vsrc;$/;"	d
src	usertests.asm	/^  src = vsrc;$/;"	d
src	wc.asm	/^  src = vsrc;$/;"	d
src	zombie.asm	/^  src = vsrc;$/;"	d
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate
ss	x86.h	/^  ushort ss;$/;"	m	struct:trapframe
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate
st	kernel.asm	/^  st = inb(KBSTATP);$/;"	d
stack	kernel.asm	/^    stack = kalloc();$/;"	d
start	bootasm.S	/^start:$/;"	l
start	bootblock.asm	/^start:$/;"	l
start	entryother.S	/^start:$/;"	l
start	entryother.asm	/^start:$/;"	l
start	initcode.S	/^start:$/;"	l
start	initcode.asm	/^start:$/;"	l
start	log.c	/^  int start;$/;"	m	struct:log	file:
start32	bootasm.S	/^start32:$/;"	l
start32	bootblock.asm	/^start32:$/;"	l
start32	entryother.S	/^start32:$/;"	l
start32	entryother.asm	/^start32:$/;"	l
started	proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu
startothers	main.c	/^startothers(void)$/;"	f	file:
stat	mkfs.c	8;"	d	file:
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(const char *n, struct stat *st)$/;"	f
state	cat.asm	/^        state = '%';$/;"	d
state	cat.asm	/^      state = 0;$/;"	d
state	cat.asm	/^  state = 0;$/;"	d
state	echo.asm	/^        state = '%';$/;"	d
state	echo.asm	/^      state = 0;$/;"	d
state	echo.asm	/^  state = 0;$/;"	d
state	grep.asm	/^        state = '%';$/;"	d
state	grep.asm	/^      state = 0;$/;"	d
state	grep.asm	/^  state = 0;$/;"	d
state	init.asm	/^        state = '%';$/;"	d
state	init.asm	/^      state = 0;$/;"	d
state	init.asm	/^  state = 0;$/;"	d
state	kernel.asm	/^      state = "???";$/;"	d
state	kernel.asm	/^      state = states[p->state];$/;"	d
state	kill.asm	/^        state = '%';$/;"	d
state	kill.asm	/^      state = 0;$/;"	d
state	kill.asm	/^  state = 0;$/;"	d
state	ln.asm	/^        state = '%';$/;"	d
state	ln.asm	/^      state = 0;$/;"	d
state	ln.asm	/^  state = 0;$/;"	d
state	ls.asm	/^        state = '%';$/;"	d
state	ls.asm	/^      state = 0;$/;"	d
state	ls.asm	/^  state = 0;$/;"	d
state	mkdir.asm	/^        state = '%';$/;"	d
state	mkdir.asm	/^      state = 0;$/;"	d
state	mkdir.asm	/^  state = 0;$/;"	d
state	prac1.asm	/^        state = '%';$/;"	d
state	prac1.asm	/^      state = 0;$/;"	d
state	prac1.asm	/^  state = 0;$/;"	d
state	prac2.asm	/^        state = '%';$/;"	d
state	prac2.asm	/^      state = 0;$/;"	d
state	prac2.asm	/^  state = 0;$/;"	d
state	prac3.asm	/^        state = '%';$/;"	d
state	prac3.asm	/^      state = 0;$/;"	d
state	prac3.asm	/^  state = 0;$/;"	d
state	prac4.asm	/^        state = '%';$/;"	d
state	prac4.asm	/^      state = 0;$/;"	d
state	prac4.asm	/^  state = 0;$/;"	d
state	prac5.asm	/^        state = '%';$/;"	d
state	prac5.asm	/^      state = 0;$/;"	d
state	prac5.asm	/^  state = 0;$/;"	d
state	prac6.asm	/^        state = '%';$/;"	d
state	prac6.asm	/^      state = 0;$/;"	d
state	prac6.asm	/^  state = 0;$/;"	d
state	prac7.asm	/^        state = '%';$/;"	d
state	prac7.asm	/^      state = 0;$/;"	d
state	prac7.asm	/^  state = 0;$/;"	d
state	prac8.asm	/^        state = '%';$/;"	d
state	prac8.asm	/^      state = 0;$/;"	d
state	prac8.asm	/^  state = 0;$/;"	d
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
state	rm.asm	/^        state = '%';$/;"	d
state	rm.asm	/^      state = 0;$/;"	d
state	rm.asm	/^  state = 0;$/;"	d
state	sh.asm	/^        state = '%';$/;"	d
state	sh.asm	/^      state = 0;$/;"	d
state	sh.asm	/^  state = 0;$/;"	d
state	stressfs.asm	/^        state = '%';$/;"	d
state	stressfs.asm	/^      state = 0;$/;"	d
state	stressfs.asm	/^  state = 0;$/;"	d
state	test.asm	/^        state = '%';$/;"	d
state	test.asm	/^      state = 0;$/;"	d
state	test.asm	/^  state = 0;$/;"	d
state	usertests.asm	/^        state = '%';$/;"	d
state	usertests.asm	/^      state = 0;$/;"	d
state	usertests.asm	/^  state = 0;$/;"	d
state	wc.asm	/^        state = '%';$/;"	d
state	wc.asm	/^      state = 0;$/;"	d
state	wc.asm	/^  state = 0;$/;"	d
state	zombie.asm	/^        state = '%';$/;"	d
state	zombie.asm	/^      state = 0;$/;"	d
state	zombie.asm	/^  state = 0;$/;"	d
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f
static	bootblock.asm	/^static inline uchar$/;"	l
static	bootblock.asm	/^static inline void$/;"	l
static	cat.asm	/^static Header *freep;$/;"	l
static	cat.asm	/^static Header base;$/;"	l
static	cat.asm	/^static inline void$/;"	l
static	cat.asm	/^static void$/;"	l
static	echo.asm	/^static Header *freep;$/;"	l
static	echo.asm	/^static Header base;$/;"	l
static	echo.asm	/^static inline void$/;"	l
static	echo.asm	/^static void$/;"	l
static	forktest.asm	/^static inline void$/;"	l
static	grep.asm	/^static Header *freep;$/;"	l
static	grep.asm	/^static Header base;$/;"	l
static	grep.asm	/^static inline void$/;"	l
static	grep.asm	/^static void$/;"	l
static	init.asm	/^static Header *freep;$/;"	l
static	init.asm	/^static Header base;$/;"	l
static	init.asm	/^static inline void$/;"	l
static	init.asm	/^static void$/;"	l
static	kernel.asm	/^static inline uchar$/;"	l
static	kernel.asm	/^static inline uint$/;"	l
static	kernel.asm	/^static inline void$/;"	l
static	kernel.asm	/^static int uart;    \/\/ is there a uart?$/;"	l
static	kernel.asm	/^static int$/;"	l
static	kernel.asm	/^static pte_t *$/;"	l
static	kernel.asm	/^static struct buf*$/;"	t
static	kernel.asm	/^static struct inode*$/;"	t
static	kernel.asm	/^static struct mp*$/;"	t
static	kernel.asm	/^static struct proc*$/;"	t
static	kernel.asm	/^static uchar$/;"	l
static	kernel.asm	/^static uint$/;"	l
static	kernel.asm	/^static void commit();$/;"	l
static	kernel.asm	/^static void recover_from_log(void);$/;"	l
static	kernel.asm	/^static void wakeup1(void *chan);$/;"	l
static	kernel.asm	/^static void$/;"	l
static	kill.asm	/^static Header *freep;$/;"	l
static	kill.asm	/^static Header base;$/;"	l
static	kill.asm	/^static inline void$/;"	l
static	kill.asm	/^static void$/;"	l
static	ln.asm	/^static Header *freep;$/;"	l
static	ln.asm	/^static Header base;$/;"	l
static	ln.asm	/^static inline void$/;"	l
static	ln.asm	/^static void$/;"	l
static	ls.asm	/^static Header *freep;$/;"	l
static	ls.asm	/^static Header base;$/;"	l
static	ls.asm	/^static inline void$/;"	l
static	ls.asm	/^static void$/;"	l
static	mkdir.asm	/^static Header *freep;$/;"	l
static	mkdir.asm	/^static Header base;$/;"	l
static	mkdir.asm	/^static inline void$/;"	l
static	mkdir.asm	/^static void$/;"	l
static	prac1.asm	/^static Header *freep;$/;"	l
static	prac1.asm	/^static Header base;$/;"	l
static	prac1.asm	/^static inline void$/;"	l
static	prac1.asm	/^static void$/;"	l
static	prac2.asm	/^static Header *freep;$/;"	l
static	prac2.asm	/^static Header base;$/;"	l
static	prac2.asm	/^static inline void$/;"	l
static	prac2.asm	/^static void$/;"	l
static	prac3.asm	/^static Header *freep;$/;"	l
static	prac3.asm	/^static Header base;$/;"	l
static	prac3.asm	/^static inline void$/;"	l
static	prac3.asm	/^static void$/;"	l
static	prac4.asm	/^static Header *freep;$/;"	l
static	prac4.asm	/^static Header base;$/;"	l
static	prac4.asm	/^static inline void$/;"	l
static	prac4.asm	/^static void$/;"	l
static	prac5.asm	/^static Header *freep;$/;"	l
static	prac5.asm	/^static Header base;$/;"	l
static	prac5.asm	/^static inline void$/;"	l
static	prac5.asm	/^static void$/;"	l
static	prac6.asm	/^static Header *freep;$/;"	l
static	prac6.asm	/^static Header base;$/;"	l
static	prac6.asm	/^static inline void$/;"	l
static	prac6.asm	/^static void$/;"	l
static	prac7.asm	/^static Header *freep;$/;"	l
static	prac7.asm	/^static Header base;$/;"	l
static	prac7.asm	/^static inline void$/;"	l
static	prac7.asm	/^static void$/;"	l
static	prac8.asm	/^static Header *freep;$/;"	l
static	prac8.asm	/^static Header base;$/;"	l
static	prac8.asm	/^static inline void$/;"	l
static	prac8.asm	/^static void$/;"	l
static	rm.asm	/^static Header *freep;$/;"	l
static	rm.asm	/^static Header base;$/;"	l
static	rm.asm	/^static inline void$/;"	l
static	rm.asm	/^static void$/;"	l
static	sh.asm	/^static Header *freep;$/;"	l
static	sh.asm	/^static Header base;$/;"	l
static	sh.asm	/^static inline void$/;"	l
static	sh.asm	/^static void$/;"	l
static	stressfs.asm	/^static Header *freep;$/;"	l
static	stressfs.asm	/^static Header base;$/;"	l
static	stressfs.asm	/^static inline void$/;"	l
static	stressfs.asm	/^static void$/;"	l
static	test.asm	/^static Header *freep;$/;"	l
static	test.asm	/^static Header base;$/;"	l
static	test.asm	/^static inline void$/;"	l
static	test.asm	/^static void$/;"	l
static	usertests.asm	/^static Header *freep;$/;"	l
static	usertests.asm	/^static Header base;$/;"	l
static	usertests.asm	/^static inline void$/;"	l
static	usertests.asm	/^static void$/;"	l
static	wc.asm	/^static Header *freep;$/;"	l
static	wc.asm	/^static Header base;$/;"	l
static	wc.asm	/^static inline void$/;"	l
static	wc.asm	/^static void$/;"	l
static	zombie.asm	/^static Header *freep;$/;"	l
static	zombie.asm	/^static Header base;$/;"	l
static	zombie.asm	/^static inline void$/;"	l
static	zombie.asm	/^static void$/;"	l
static_assert	mkfs.c	15;"	d	file:
stdout	usertests.c	/^int stdout = 1;$/;"	v
sti	x86.h	/^sti(void)$/;"	f
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f
stosl	x86.h	/^stosl(void *addr, int data, int cnt)$/;"	f
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f
strcpy	ulib.c	/^strcpy(char *s, const char *t)$/;"	f
strlen	string.c	/^strlen(const char *s)$/;"	f
strlen	ulib.c	/^strlen(const char *s)$/;"	f
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f
struct	kernel.asm	/^  struct proc *curproc = myproc();$/;"	l
struct	kernel.asm	/^  struct proc *np;$/;"	l
struct	kernel.asm	/^  struct proc *p = myproc();$/;"	l
struct	kernel.asm	/^  struct proc *p;$/;"	l
subdir	usertests.c	/^subdir(void)$/;"	f
sum	kernel.asm	/^  sum = 0;$/;"	d
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	file:
superblock	fs.h	/^struct superblock {$/;"	s
switchkvm	vm.c	/^switchkvm(void)$/;"	f
switchuvm	vm.c	/^switchuvm(struct proc *p)$/;"	f
swtch	kernel.asm	/^swtch:$/;"	l
swtch	swtch.S	/^swtch:$/;"	l
symbols	sh.c	/^char symbols[] = "<|>&;()";$/;"	v
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f
sys_close	sysfile.c	/^sys_close(void)$/;"	f
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f
sys_link	sysfile.c	/^sys_link(void)$/;"	f
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f
sys_open	sysfile.c	/^sys_open(void)$/;"	f
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f
sys_read	sysfile.c	/^sys_read(void)$/;"	f
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f
sys_uptime	sysproc.c	/^sys_uptime(void)$/;"	f
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f
sys_write	sysfile.c	/^sys_write(void)$/;"	f
syscall	syscall.c	/^syscall(void)$/;"	f
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	file:
sz	kernel.asm	/^  sz = 0;$/;"	d
sz	kernel.asm	/^  sz = PGROUNDUP(sz);$/;"	d
sz	kernel.asm	/^  sz = curproc->sz;$/;"	d
sz	proc.h	/^  uint sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate
target	kernel.asm	/^  target = n;$/;"	d
taskstate	mmu.h	/^struct taskstate {$/;"	s
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:proc::trapframe
ticks	trap.c	/^uint ticks;$/;"	v
ticks0	kernel.asm	/^  ticks0 = ticks;$/;"	d
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v
tok	sh.asm	/^    tok = gettoken(ps, es, 0, 0);$/;"	d
total	usertests.asm	/^    total = 0;$/;"	d
total	usertests.asm	/^  total = 0;$/;"	d
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	x86.h	/^  uint trapno;$/;"	m	struct:trapframe
trapret	kernel.asm	/^trapret:$/;"	l
trapret	trapasm.S	/^trapret:$/;"	l
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate
tvinit	trap.c	/^tvinit(void)$/;"	f
type	elf.h	/^  uint type;$/;"	m	struct:proghdr
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anon5
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{IG32,TG32})$/;"	m	struct:gatedesc
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic
type	sh.c	/^  int type;$/;"	m	struct:backcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:cmd	file:
type	sh.c	/^  int type;$/;"	m	struct:execcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:listcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:pipecmd	file:
type	sh.c	/^  int type;$/;"	m	struct:redircmd	file:
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat
uart	kernel.asm	/^  uart = 1;$/;"	d
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	file:
uartgetc	uart.c	/^uartgetc(void)$/;"	f	file:
uartinit	uart.c	/^uartinit(void)$/;"	f
uartintr	uart.c	/^uartintr(void)$/;"	f
uartputc	uart.c	/^uartputc(int c)$/;"	f
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t
uint	cat.asm	/^uint$/;"	l
uint	echo.asm	/^uint$/;"	l
uint	forktest.asm	/^uint$/;"	l
uint	grep.asm	/^uint$/;"	l
uint	init.asm	/^uint$/;"	l
uint	kernel.asm	/^uint ticks;$/;"	l
uint	kill.asm	/^uint$/;"	l
uint	ln.asm	/^uint$/;"	l
uint	ls.asm	/^uint$/;"	l
uint	mkdir.asm	/^uint$/;"	l
uint	prac1.asm	/^uint$/;"	l
uint	prac2.asm	/^uint$/;"	l
uint	prac3.asm	/^uint$/;"	l
uint	prac4.asm	/^uint$/;"	l
uint	prac5.asm	/^uint$/;"	l
uint	prac6.asm	/^uint$/;"	l
uint	prac7.asm	/^uint$/;"	l
uint	prac8.asm	/^uint$/;"	l
uint	rm.asm	/^uint$/;"	l
uint	sh.asm	/^uint$/;"	l
uint	stressfs.asm	/^uint$/;"	l
uint	test.asm	/^uint$/;"	l
uint	types.h	/^typedef unsigned int   uint;$/;"	t
uint	usertests.asm	/^uint$/;"	l
uint	wc.asm	/^uint$/;"	l
uint	zombie.asm	/^uint$/;"	l
uio	usertests.c	/^uio()$/;"	f
uninit	usertests.c	/^char uninit[10000];$/;"	v
unlinkread	usertests.c	/^unlinkread(void)$/;"	f
unsigned	usertests.asm	/^unsigned int$/;"	l
unsigned	usertests.asm	/^unsigned long randstate = 1;$/;"	l
use_lock	kalloc.c	/^  int use_lock;$/;"	m	struct:__anon7	file:
userinit	proc.c	/^userinit(void)$/;"	f
ushort	types.h	/^typedef unsigned short ushort;$/;"	t
uva2ka	vm.c	/^uva2ka(pde_t *pgdir, char *uva)$/;"	f
va	kernel.asm	/^    va = va0 + PGSIZE;$/;"	d
va0	kernel.asm	/^    va0 = (uint)PGROUNDDOWN(va);$/;"	d
vaddr	elf.h	/^  uint vaddr;$/;"	m	struct:proghdr
val	usertests.asm	/^    val = 0x09;  \/* year *\/$/;"	d
valid	file.h	/^  int valid;          \/\/ inode has been read from disk?$/;"	m	struct:inode
validateint	usertests.c	/^validateint(int *p)$/;"	f
validatetest	usertests.c	/^validatetest(void)$/;"	f
vector0	kernel.asm	/^vector0:$/;"	l
vector0	vectors.S	/^vector0:$/;"	l
vector1	kernel.asm	/^vector1:$/;"	l
vector1	vectors.S	/^vector1:$/;"	l
vector10	kernel.asm	/^vector10:$/;"	l
vector10	vectors.S	/^vector10:$/;"	l
vector100	kernel.asm	/^vector100:$/;"	l
vector100	vectors.S	/^vector100:$/;"	l
vector101	kernel.asm	/^vector101:$/;"	l
vector101	vectors.S	/^vector101:$/;"	l
vector102	kernel.asm	/^vector102:$/;"	l
vector102	vectors.S	/^vector102:$/;"	l
vector103	kernel.asm	/^vector103:$/;"	l
vector103	vectors.S	/^vector103:$/;"	l
vector104	kernel.asm	/^vector104:$/;"	l
vector104	vectors.S	/^vector104:$/;"	l
vector105	kernel.asm	/^vector105:$/;"	l
vector105	vectors.S	/^vector105:$/;"	l
vector106	kernel.asm	/^vector106:$/;"	l
vector106	vectors.S	/^vector106:$/;"	l
vector107	kernel.asm	/^vector107:$/;"	l
vector107	vectors.S	/^vector107:$/;"	l
vector108	kernel.asm	/^vector108:$/;"	l
vector108	vectors.S	/^vector108:$/;"	l
vector109	kernel.asm	/^vector109:$/;"	l
vector109	vectors.S	/^vector109:$/;"	l
vector11	kernel.asm	/^vector11:$/;"	l
vector11	vectors.S	/^vector11:$/;"	l
vector110	kernel.asm	/^vector110:$/;"	l
vector110	vectors.S	/^vector110:$/;"	l
vector111	kernel.asm	/^vector111:$/;"	l
vector111	vectors.S	/^vector111:$/;"	l
vector112	kernel.asm	/^vector112:$/;"	l
vector112	vectors.S	/^vector112:$/;"	l
vector113	kernel.asm	/^vector113:$/;"	l
vector113	vectors.S	/^vector113:$/;"	l
vector114	kernel.asm	/^vector114:$/;"	l
vector114	vectors.S	/^vector114:$/;"	l
vector115	kernel.asm	/^vector115:$/;"	l
vector115	vectors.S	/^vector115:$/;"	l
vector116	kernel.asm	/^vector116:$/;"	l
vector116	vectors.S	/^vector116:$/;"	l
vector117	kernel.asm	/^vector117:$/;"	l
vector117	vectors.S	/^vector117:$/;"	l
vector118	kernel.asm	/^vector118:$/;"	l
vector118	vectors.S	/^vector118:$/;"	l
vector119	kernel.asm	/^vector119:$/;"	l
vector119	vectors.S	/^vector119:$/;"	l
vector12	kernel.asm	/^vector12:$/;"	l
vector12	vectors.S	/^vector12:$/;"	l
vector120	kernel.asm	/^vector120:$/;"	l
vector120	vectors.S	/^vector120:$/;"	l
vector121	kernel.asm	/^vector121:$/;"	l
vector121	vectors.S	/^vector121:$/;"	l
vector122	kernel.asm	/^vector122:$/;"	l
vector122	vectors.S	/^vector122:$/;"	l
vector123	kernel.asm	/^vector123:$/;"	l
vector123	vectors.S	/^vector123:$/;"	l
vector124	kernel.asm	/^vector124:$/;"	l
vector124	vectors.S	/^vector124:$/;"	l
vector125	kernel.asm	/^vector125:$/;"	l
vector125	vectors.S	/^vector125:$/;"	l
vector126	kernel.asm	/^vector126:$/;"	l
vector126	vectors.S	/^vector126:$/;"	l
vector127	kernel.asm	/^vector127:$/;"	l
vector127	vectors.S	/^vector127:$/;"	l
vector128	kernel.asm	/^vector128:$/;"	l
vector128	vectors.S	/^vector128:$/;"	l
vector129	kernel.asm	/^vector129:$/;"	l
vector129	vectors.S	/^vector129:$/;"	l
vector13	kernel.asm	/^vector13:$/;"	l
vector13	vectors.S	/^vector13:$/;"	l
vector130	kernel.asm	/^vector130:$/;"	l
vector130	vectors.S	/^vector130:$/;"	l
vector131	kernel.asm	/^vector131:$/;"	l
vector131	vectors.S	/^vector131:$/;"	l
vector132	kernel.asm	/^vector132:$/;"	l
vector132	vectors.S	/^vector132:$/;"	l
vector133	kernel.asm	/^vector133:$/;"	l
vector133	vectors.S	/^vector133:$/;"	l
vector134	kernel.asm	/^vector134:$/;"	l
vector134	vectors.S	/^vector134:$/;"	l
vector135	kernel.asm	/^vector135:$/;"	l
vector135	vectors.S	/^vector135:$/;"	l
vector136	kernel.asm	/^vector136:$/;"	l
vector136	vectors.S	/^vector136:$/;"	l
vector137	kernel.asm	/^vector137:$/;"	l
vector137	vectors.S	/^vector137:$/;"	l
vector138	kernel.asm	/^vector138:$/;"	l
vector138	vectors.S	/^vector138:$/;"	l
vector139	kernel.asm	/^vector139:$/;"	l
vector139	vectors.S	/^vector139:$/;"	l
vector14	kernel.asm	/^vector14:$/;"	l
vector14	vectors.S	/^vector14:$/;"	l
vector140	kernel.asm	/^vector140:$/;"	l
vector140	vectors.S	/^vector140:$/;"	l
vector141	kernel.asm	/^vector141:$/;"	l
vector141	vectors.S	/^vector141:$/;"	l
vector142	kernel.asm	/^vector142:$/;"	l
vector142	vectors.S	/^vector142:$/;"	l
vector143	kernel.asm	/^vector143:$/;"	l
vector143	vectors.S	/^vector143:$/;"	l
vector144	kernel.asm	/^vector144:$/;"	l
vector144	vectors.S	/^vector144:$/;"	l
vector145	kernel.asm	/^vector145:$/;"	l
vector145	vectors.S	/^vector145:$/;"	l
vector146	kernel.asm	/^vector146:$/;"	l
vector146	vectors.S	/^vector146:$/;"	l
vector147	kernel.asm	/^vector147:$/;"	l
vector147	vectors.S	/^vector147:$/;"	l
vector148	kernel.asm	/^vector148:$/;"	l
vector148	vectors.S	/^vector148:$/;"	l
vector149	kernel.asm	/^vector149:$/;"	l
vector149	vectors.S	/^vector149:$/;"	l
vector15	kernel.asm	/^vector15:$/;"	l
vector15	vectors.S	/^vector15:$/;"	l
vector150	kernel.asm	/^vector150:$/;"	l
vector150	vectors.S	/^vector150:$/;"	l
vector151	kernel.asm	/^vector151:$/;"	l
vector151	vectors.S	/^vector151:$/;"	l
vector152	kernel.asm	/^vector152:$/;"	l
vector152	vectors.S	/^vector152:$/;"	l
vector153	kernel.asm	/^vector153:$/;"	l
vector153	vectors.S	/^vector153:$/;"	l
vector154	kernel.asm	/^vector154:$/;"	l
vector154	vectors.S	/^vector154:$/;"	l
vector155	kernel.asm	/^vector155:$/;"	l
vector155	vectors.S	/^vector155:$/;"	l
vector156	kernel.asm	/^vector156:$/;"	l
vector156	vectors.S	/^vector156:$/;"	l
vector157	kernel.asm	/^vector157:$/;"	l
vector157	vectors.S	/^vector157:$/;"	l
vector158	kernel.asm	/^vector158:$/;"	l
vector158	vectors.S	/^vector158:$/;"	l
vector159	kernel.asm	/^vector159:$/;"	l
vector159	vectors.S	/^vector159:$/;"	l
vector16	kernel.asm	/^vector16:$/;"	l
vector16	vectors.S	/^vector16:$/;"	l
vector160	kernel.asm	/^vector160:$/;"	l
vector160	vectors.S	/^vector160:$/;"	l
vector161	kernel.asm	/^vector161:$/;"	l
vector161	vectors.S	/^vector161:$/;"	l
vector162	kernel.asm	/^vector162:$/;"	l
vector162	vectors.S	/^vector162:$/;"	l
vector163	kernel.asm	/^vector163:$/;"	l
vector163	vectors.S	/^vector163:$/;"	l
vector164	kernel.asm	/^vector164:$/;"	l
vector164	vectors.S	/^vector164:$/;"	l
vector165	kernel.asm	/^vector165:$/;"	l
vector165	vectors.S	/^vector165:$/;"	l
vector166	kernel.asm	/^vector166:$/;"	l
vector166	vectors.S	/^vector166:$/;"	l
vector167	kernel.asm	/^vector167:$/;"	l
vector167	vectors.S	/^vector167:$/;"	l
vector168	kernel.asm	/^vector168:$/;"	l
vector168	vectors.S	/^vector168:$/;"	l
vector169	kernel.asm	/^vector169:$/;"	l
vector169	vectors.S	/^vector169:$/;"	l
vector17	kernel.asm	/^vector17:$/;"	l
vector17	vectors.S	/^vector17:$/;"	l
vector170	kernel.asm	/^vector170:$/;"	l
vector170	vectors.S	/^vector170:$/;"	l
vector171	kernel.asm	/^vector171:$/;"	l
vector171	vectors.S	/^vector171:$/;"	l
vector172	kernel.asm	/^vector172:$/;"	l
vector172	vectors.S	/^vector172:$/;"	l
vector173	kernel.asm	/^vector173:$/;"	l
vector173	vectors.S	/^vector173:$/;"	l
vector174	kernel.asm	/^vector174:$/;"	l
vector174	vectors.S	/^vector174:$/;"	l
vector175	kernel.asm	/^vector175:$/;"	l
vector175	vectors.S	/^vector175:$/;"	l
vector176	kernel.asm	/^vector176:$/;"	l
vector176	vectors.S	/^vector176:$/;"	l
vector177	kernel.asm	/^vector177:$/;"	l
vector177	vectors.S	/^vector177:$/;"	l
vector178	kernel.asm	/^vector178:$/;"	l
vector178	vectors.S	/^vector178:$/;"	l
vector179	kernel.asm	/^vector179:$/;"	l
vector179	vectors.S	/^vector179:$/;"	l
vector18	kernel.asm	/^vector18:$/;"	l
vector18	vectors.S	/^vector18:$/;"	l
vector180	kernel.asm	/^vector180:$/;"	l
vector180	vectors.S	/^vector180:$/;"	l
vector181	kernel.asm	/^vector181:$/;"	l
vector181	vectors.S	/^vector181:$/;"	l
vector182	kernel.asm	/^vector182:$/;"	l
vector182	vectors.S	/^vector182:$/;"	l
vector183	kernel.asm	/^vector183:$/;"	l
vector183	vectors.S	/^vector183:$/;"	l
vector184	kernel.asm	/^vector184:$/;"	l
vector184	vectors.S	/^vector184:$/;"	l
vector185	kernel.asm	/^vector185:$/;"	l
vector185	vectors.S	/^vector185:$/;"	l
vector186	kernel.asm	/^vector186:$/;"	l
vector186	vectors.S	/^vector186:$/;"	l
vector187	kernel.asm	/^vector187:$/;"	l
vector187	vectors.S	/^vector187:$/;"	l
vector188	kernel.asm	/^vector188:$/;"	l
vector188	vectors.S	/^vector188:$/;"	l
vector189	kernel.asm	/^vector189:$/;"	l
vector189	vectors.S	/^vector189:$/;"	l
vector19	kernel.asm	/^vector19:$/;"	l
vector19	vectors.S	/^vector19:$/;"	l
vector190	kernel.asm	/^vector190:$/;"	l
vector190	vectors.S	/^vector190:$/;"	l
vector191	kernel.asm	/^vector191:$/;"	l
vector191	vectors.S	/^vector191:$/;"	l
vector192	kernel.asm	/^vector192:$/;"	l
vector192	vectors.S	/^vector192:$/;"	l
vector193	kernel.asm	/^vector193:$/;"	l
vector193	vectors.S	/^vector193:$/;"	l
vector194	kernel.asm	/^vector194:$/;"	l
vector194	vectors.S	/^vector194:$/;"	l
vector195	kernel.asm	/^vector195:$/;"	l
vector195	vectors.S	/^vector195:$/;"	l
vector196	kernel.asm	/^vector196:$/;"	l
vector196	vectors.S	/^vector196:$/;"	l
vector197	kernel.asm	/^vector197:$/;"	l
vector197	vectors.S	/^vector197:$/;"	l
vector198	kernel.asm	/^vector198:$/;"	l
vector198	vectors.S	/^vector198:$/;"	l
vector199	kernel.asm	/^vector199:$/;"	l
vector199	vectors.S	/^vector199:$/;"	l
vector2	kernel.asm	/^vector2:$/;"	l
vector2	vectors.S	/^vector2:$/;"	l
vector20	kernel.asm	/^vector20:$/;"	l
vector20	vectors.S	/^vector20:$/;"	l
vector200	kernel.asm	/^vector200:$/;"	l
vector200	vectors.S	/^vector200:$/;"	l
vector201	kernel.asm	/^vector201:$/;"	l
vector201	vectors.S	/^vector201:$/;"	l
vector202	kernel.asm	/^vector202:$/;"	l
vector202	vectors.S	/^vector202:$/;"	l
vector203	kernel.asm	/^vector203:$/;"	l
vector203	vectors.S	/^vector203:$/;"	l
vector204	kernel.asm	/^vector204:$/;"	l
vector204	vectors.S	/^vector204:$/;"	l
vector205	kernel.asm	/^vector205:$/;"	l
vector205	vectors.S	/^vector205:$/;"	l
vector206	kernel.asm	/^vector206:$/;"	l
vector206	vectors.S	/^vector206:$/;"	l
vector207	kernel.asm	/^vector207:$/;"	l
vector207	vectors.S	/^vector207:$/;"	l
vector208	kernel.asm	/^vector208:$/;"	l
vector208	vectors.S	/^vector208:$/;"	l
vector209	kernel.asm	/^vector209:$/;"	l
vector209	vectors.S	/^vector209:$/;"	l
vector21	kernel.asm	/^vector21:$/;"	l
vector21	vectors.S	/^vector21:$/;"	l
vector210	kernel.asm	/^vector210:$/;"	l
vector210	vectors.S	/^vector210:$/;"	l
vector211	kernel.asm	/^vector211:$/;"	l
vector211	vectors.S	/^vector211:$/;"	l
vector212	kernel.asm	/^vector212:$/;"	l
vector212	vectors.S	/^vector212:$/;"	l
vector213	kernel.asm	/^vector213:$/;"	l
vector213	vectors.S	/^vector213:$/;"	l
vector214	kernel.asm	/^vector214:$/;"	l
vector214	vectors.S	/^vector214:$/;"	l
vector215	kernel.asm	/^vector215:$/;"	l
vector215	vectors.S	/^vector215:$/;"	l
vector216	kernel.asm	/^vector216:$/;"	l
vector216	vectors.S	/^vector216:$/;"	l
vector217	kernel.asm	/^vector217:$/;"	l
vector217	vectors.S	/^vector217:$/;"	l
vector218	kernel.asm	/^vector218:$/;"	l
vector218	vectors.S	/^vector218:$/;"	l
vector219	kernel.asm	/^vector219:$/;"	l
vector219	vectors.S	/^vector219:$/;"	l
vector22	kernel.asm	/^vector22:$/;"	l
vector22	vectors.S	/^vector22:$/;"	l
vector220	kernel.asm	/^vector220:$/;"	l
vector220	vectors.S	/^vector220:$/;"	l
vector221	kernel.asm	/^vector221:$/;"	l
vector221	vectors.S	/^vector221:$/;"	l
vector222	kernel.asm	/^vector222:$/;"	l
vector222	vectors.S	/^vector222:$/;"	l
vector223	kernel.asm	/^vector223:$/;"	l
vector223	vectors.S	/^vector223:$/;"	l
vector224	kernel.asm	/^vector224:$/;"	l
vector224	vectors.S	/^vector224:$/;"	l
vector225	kernel.asm	/^vector225:$/;"	l
vector225	vectors.S	/^vector225:$/;"	l
vector226	kernel.asm	/^vector226:$/;"	l
vector226	vectors.S	/^vector226:$/;"	l
vector227	kernel.asm	/^vector227:$/;"	l
vector227	vectors.S	/^vector227:$/;"	l
vector228	kernel.asm	/^vector228:$/;"	l
vector228	vectors.S	/^vector228:$/;"	l
vector229	kernel.asm	/^vector229:$/;"	l
vector229	vectors.S	/^vector229:$/;"	l
vector23	kernel.asm	/^vector23:$/;"	l
vector23	vectors.S	/^vector23:$/;"	l
vector230	kernel.asm	/^vector230:$/;"	l
vector230	vectors.S	/^vector230:$/;"	l
vector231	kernel.asm	/^vector231:$/;"	l
vector231	vectors.S	/^vector231:$/;"	l
vector232	kernel.asm	/^vector232:$/;"	l
vector232	vectors.S	/^vector232:$/;"	l
vector233	kernel.asm	/^vector233:$/;"	l
vector233	vectors.S	/^vector233:$/;"	l
vector234	kernel.asm	/^vector234:$/;"	l
vector234	vectors.S	/^vector234:$/;"	l
vector235	kernel.asm	/^vector235:$/;"	l
vector235	vectors.S	/^vector235:$/;"	l
vector236	kernel.asm	/^vector236:$/;"	l
vector236	vectors.S	/^vector236:$/;"	l
vector237	kernel.asm	/^vector237:$/;"	l
vector237	vectors.S	/^vector237:$/;"	l
vector238	kernel.asm	/^vector238:$/;"	l
vector238	vectors.S	/^vector238:$/;"	l
vector239	kernel.asm	/^vector239:$/;"	l
vector239	vectors.S	/^vector239:$/;"	l
vector24	kernel.asm	/^vector24:$/;"	l
vector24	vectors.S	/^vector24:$/;"	l
vector240	kernel.asm	/^vector240:$/;"	l
vector240	vectors.S	/^vector240:$/;"	l
vector241	kernel.asm	/^vector241:$/;"	l
vector241	vectors.S	/^vector241:$/;"	l
vector242	kernel.asm	/^vector242:$/;"	l
vector242	vectors.S	/^vector242:$/;"	l
vector243	kernel.asm	/^vector243:$/;"	l
vector243	vectors.S	/^vector243:$/;"	l
vector244	kernel.asm	/^vector244:$/;"	l
vector244	vectors.S	/^vector244:$/;"	l
vector245	kernel.asm	/^vector245:$/;"	l
vector245	vectors.S	/^vector245:$/;"	l
vector246	kernel.asm	/^vector246:$/;"	l
vector246	vectors.S	/^vector246:$/;"	l
vector247	kernel.asm	/^vector247:$/;"	l
vector247	vectors.S	/^vector247:$/;"	l
vector248	kernel.asm	/^vector248:$/;"	l
vector248	vectors.S	/^vector248:$/;"	l
vector249	kernel.asm	/^vector249:$/;"	l
vector249	vectors.S	/^vector249:$/;"	l
vector25	kernel.asm	/^vector25:$/;"	l
vector25	vectors.S	/^vector25:$/;"	l
vector250	kernel.asm	/^vector250:$/;"	l
vector250	vectors.S	/^vector250:$/;"	l
vector251	kernel.asm	/^vector251:$/;"	l
vector251	vectors.S	/^vector251:$/;"	l
vector252	kernel.asm	/^vector252:$/;"	l
vector252	vectors.S	/^vector252:$/;"	l
vector253	kernel.asm	/^vector253:$/;"	l
vector253	vectors.S	/^vector253:$/;"	l
vector254	kernel.asm	/^vector254:$/;"	l
vector254	vectors.S	/^vector254:$/;"	l
vector255	kernel.asm	/^vector255:$/;"	l
vector255	vectors.S	/^vector255:$/;"	l
vector26	kernel.asm	/^vector26:$/;"	l
vector26	vectors.S	/^vector26:$/;"	l
vector27	kernel.asm	/^vector27:$/;"	l
vector27	vectors.S	/^vector27:$/;"	l
vector28	kernel.asm	/^vector28:$/;"	l
vector28	vectors.S	/^vector28:$/;"	l
vector29	kernel.asm	/^vector29:$/;"	l
vector29	vectors.S	/^vector29:$/;"	l
vector3	kernel.asm	/^vector3:$/;"	l
vector3	vectors.S	/^vector3:$/;"	l
vector30	kernel.asm	/^vector30:$/;"	l
vector30	vectors.S	/^vector30:$/;"	l
vector31	kernel.asm	/^vector31:$/;"	l
vector31	vectors.S	/^vector31:$/;"	l
vector32	kernel.asm	/^vector32:$/;"	l
vector32	vectors.S	/^vector32:$/;"	l
vector33	kernel.asm	/^vector33:$/;"	l
vector33	vectors.S	/^vector33:$/;"	l
vector34	kernel.asm	/^vector34:$/;"	l
vector34	vectors.S	/^vector34:$/;"	l
vector35	kernel.asm	/^vector35:$/;"	l
vector35	vectors.S	/^vector35:$/;"	l
vector36	kernel.asm	/^vector36:$/;"	l
vector36	vectors.S	/^vector36:$/;"	l
vector37	kernel.asm	/^vector37:$/;"	l
vector37	vectors.S	/^vector37:$/;"	l
vector38	kernel.asm	/^vector38:$/;"	l
vector38	vectors.S	/^vector38:$/;"	l
vector39	kernel.asm	/^vector39:$/;"	l
vector39	vectors.S	/^vector39:$/;"	l
vector4	kernel.asm	/^vector4:$/;"	l
vector4	vectors.S	/^vector4:$/;"	l
vector40	kernel.asm	/^vector40:$/;"	l
vector40	vectors.S	/^vector40:$/;"	l
vector41	kernel.asm	/^vector41:$/;"	l
vector41	vectors.S	/^vector41:$/;"	l
vector42	kernel.asm	/^vector42:$/;"	l
vector42	vectors.S	/^vector42:$/;"	l
vector43	kernel.asm	/^vector43:$/;"	l
vector43	vectors.S	/^vector43:$/;"	l
vector44	kernel.asm	/^vector44:$/;"	l
vector44	vectors.S	/^vector44:$/;"	l
vector45	kernel.asm	/^vector45:$/;"	l
vector45	vectors.S	/^vector45:$/;"	l
vector46	kernel.asm	/^vector46:$/;"	l
vector46	vectors.S	/^vector46:$/;"	l
vector47	kernel.asm	/^vector47:$/;"	l
vector47	vectors.S	/^vector47:$/;"	l
vector48	kernel.asm	/^vector48:$/;"	l
vector48	vectors.S	/^vector48:$/;"	l
vector49	kernel.asm	/^vector49:$/;"	l
vector49	vectors.S	/^vector49:$/;"	l
vector5	kernel.asm	/^vector5:$/;"	l
vector5	vectors.S	/^vector5:$/;"	l
vector50	kernel.asm	/^vector50:$/;"	l
vector50	vectors.S	/^vector50:$/;"	l
vector51	kernel.asm	/^vector51:$/;"	l
vector51	vectors.S	/^vector51:$/;"	l
vector52	kernel.asm	/^vector52:$/;"	l
vector52	vectors.S	/^vector52:$/;"	l
vector53	kernel.asm	/^vector53:$/;"	l
vector53	vectors.S	/^vector53:$/;"	l
vector54	kernel.asm	/^vector54:$/;"	l
vector54	vectors.S	/^vector54:$/;"	l
vector55	kernel.asm	/^vector55:$/;"	l
vector55	vectors.S	/^vector55:$/;"	l
vector56	kernel.asm	/^vector56:$/;"	l
vector56	vectors.S	/^vector56:$/;"	l
vector57	kernel.asm	/^vector57:$/;"	l
vector57	vectors.S	/^vector57:$/;"	l
vector58	kernel.asm	/^vector58:$/;"	l
vector58	vectors.S	/^vector58:$/;"	l
vector59	kernel.asm	/^vector59:$/;"	l
vector59	vectors.S	/^vector59:$/;"	l
vector6	kernel.asm	/^vector6:$/;"	l
vector6	vectors.S	/^vector6:$/;"	l
vector60	kernel.asm	/^vector60:$/;"	l
vector60	vectors.S	/^vector60:$/;"	l
vector61	kernel.asm	/^vector61:$/;"	l
vector61	vectors.S	/^vector61:$/;"	l
vector62	kernel.asm	/^vector62:$/;"	l
vector62	vectors.S	/^vector62:$/;"	l
vector63	kernel.asm	/^vector63:$/;"	l
vector63	vectors.S	/^vector63:$/;"	l
vector64	kernel.asm	/^vector64:$/;"	l
vector64	vectors.S	/^vector64:$/;"	l
vector65	kernel.asm	/^vector65:$/;"	l
vector65	vectors.S	/^vector65:$/;"	l
vector66	kernel.asm	/^vector66:$/;"	l
vector66	vectors.S	/^vector66:$/;"	l
vector67	kernel.asm	/^vector67:$/;"	l
vector67	vectors.S	/^vector67:$/;"	l
vector68	kernel.asm	/^vector68:$/;"	l
vector68	vectors.S	/^vector68:$/;"	l
vector69	kernel.asm	/^vector69:$/;"	l
vector69	vectors.S	/^vector69:$/;"	l
vector7	kernel.asm	/^vector7:$/;"	l
vector7	vectors.S	/^vector7:$/;"	l
vector70	kernel.asm	/^vector70:$/;"	l
vector70	vectors.S	/^vector70:$/;"	l
vector71	kernel.asm	/^vector71:$/;"	l
vector71	vectors.S	/^vector71:$/;"	l
vector72	kernel.asm	/^vector72:$/;"	l
vector72	vectors.S	/^vector72:$/;"	l
vector73	kernel.asm	/^vector73:$/;"	l
vector73	vectors.S	/^vector73:$/;"	l
vector74	kernel.asm	/^vector74:$/;"	l
vector74	vectors.S	/^vector74:$/;"	l
vector75	kernel.asm	/^vector75:$/;"	l
vector75	vectors.S	/^vector75:$/;"	l
vector76	kernel.asm	/^vector76:$/;"	l
vector76	vectors.S	/^vector76:$/;"	l
vector77	kernel.asm	/^vector77:$/;"	l
vector77	vectors.S	/^vector77:$/;"	l
vector78	kernel.asm	/^vector78:$/;"	l
vector78	vectors.S	/^vector78:$/;"	l
vector79	kernel.asm	/^vector79:$/;"	l
vector79	vectors.S	/^vector79:$/;"	l
vector8	kernel.asm	/^vector8:$/;"	l
vector8	vectors.S	/^vector8:$/;"	l
vector80	kernel.asm	/^vector80:$/;"	l
vector80	vectors.S	/^vector80:$/;"	l
vector81	kernel.asm	/^vector81:$/;"	l
vector81	vectors.S	/^vector81:$/;"	l
vector82	kernel.asm	/^vector82:$/;"	l
vector82	vectors.S	/^vector82:$/;"	l
vector83	kernel.asm	/^vector83:$/;"	l
vector83	vectors.S	/^vector83:$/;"	l
vector84	kernel.asm	/^vector84:$/;"	l
vector84	vectors.S	/^vector84:$/;"	l
vector85	kernel.asm	/^vector85:$/;"	l
vector85	vectors.S	/^vector85:$/;"	l
vector86	kernel.asm	/^vector86:$/;"	l
vector86	vectors.S	/^vector86:$/;"	l
vector87	kernel.asm	/^vector87:$/;"	l
vector87	vectors.S	/^vector87:$/;"	l
vector88	kernel.asm	/^vector88:$/;"	l
vector88	vectors.S	/^vector88:$/;"	l
vector89	kernel.asm	/^vector89:$/;"	l
vector89	vectors.S	/^vector89:$/;"	l
vector9	kernel.asm	/^vector9:$/;"	l
vector9	vectors.S	/^vector9:$/;"	l
vector90	kernel.asm	/^vector90:$/;"	l
vector90	vectors.S	/^vector90:$/;"	l
vector91	kernel.asm	/^vector91:$/;"	l
vector91	vectors.S	/^vector91:$/;"	l
vector92	kernel.asm	/^vector92:$/;"	l
vector92	vectors.S	/^vector92:$/;"	l
vector93	kernel.asm	/^vector93:$/;"	l
vector93	vectors.S	/^vector93:$/;"	l
vector94	kernel.asm	/^vector94:$/;"	l
vector94	vectors.S	/^vector94:$/;"	l
vector95	kernel.asm	/^vector95:$/;"	l
vector95	vectors.S	/^vector95:$/;"	l
vector96	kernel.asm	/^vector96:$/;"	l
vector96	vectors.S	/^vector96:$/;"	l
vector97	kernel.asm	/^vector97:$/;"	l
vector97	vectors.S	/^vector97:$/;"	l
vector98	kernel.asm	/^vector98:$/;"	l
vector98	vectors.S	/^vector98:$/;"	l
vector99	kernel.asm	/^vector99:$/;"	l
vector99	vectors.S	/^vector99:$/;"	l
vectors	vectors.S	/^vectors:$/;"	l
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc
virt	vm.c	/^  void *virt;$/;"	m	struct:kmap	file:
void	bootblock.asm	/^void readseg(uchar*, uint, uint);$/;"	l
void	bootblock.asm	/^void$/;"	l
void	cat.asm	/^void$/;"	l
void	echo.asm	/^void$/;"	l
void	forktest.asm	/^void$/;"	l
void	grep.asm	/^void$/;"	l
void	init.asm	/^void$/;"	l
void	kernel.asm	/^void$/;"	l
void	kill.asm	/^void$/;"	l
void	ln.asm	/^void$/;"	l
void	ls.asm	/^void$/;"	l
void	mkdir.asm	/^void$/;"	l
void	prac1.asm	/^void$/;"	l
void	prac2.asm	/^void$/;"	l
void	prac3.asm	/^void$/;"	l
void	prac4.asm	/^void$/;"	l
void	prac5.asm	/^void$/;"	l
void	prac6.asm	/^void$/;"	l
void	prac7.asm	/^void$/;"	l
void	prac8.asm	/^void$/;"	l
void	rm.asm	/^void$/;"	l
void	sh.asm	/^void$/;"	l
void	stressfs.asm	/^void$/;"	l
void	test.asm	/^void$/;"	l
void	usertests.asm	/^void argptest()$/;"	l
void	usertests.asm	/^void dirtest(void)$/;"	l
void	usertests.asm	/^void$/;"	l
void	wc.asm	/^void$/;"	l
void	zombie.asm	/^void$/;"	l
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon3	file:
wait	proc.c	/^wait(void)$/;"	f
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f
wakeup	proc.c	/^wakeup(void *chan)$/;"	f
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	file:
walkpgdir	vm.c	/^walkpgdir(pde_t *pgdir, const void *va, int alloc)$/;"	f	file:
wc	wc.c	/^wc(int fd, char *name)$/;"	f
whitespace	sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f
writable	file.h	/^  char writable;$/;"	m	struct:file
write	file.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw
write_head	log.c	/^write_head(void)$/;"	f	file:
write_log	log.c	/^write_log(void)$/;"	f	file:
writefile	cuth	/^sub writefile($@){$/;"	s
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:
writetest	usertests.c	/^writetest(void)$/;"	f
writetest1	usertests.c	/^writetest1(void)$/;"	f
wrv	kernel.asm	/^  wrv = (ushort*)P2V((0x40<<4 | 0x67));  \/\/ Warm reset vector$/;"	d
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f
x	cat.asm	/^    x = -xx;$/;"	d
x	cat.asm	/^    x = xx;$/;"	d
x	echo.asm	/^    x = -xx;$/;"	d
x	echo.asm	/^    x = xx;$/;"	d
x	grep.asm	/^    x = -xx;$/;"	d
x	grep.asm	/^    x = xx;$/;"	d
x	init.asm	/^    x = -xx;$/;"	d
x	init.asm	/^    x = xx;$/;"	d
x	kernel.asm	/^    x = -xx;$/;"	d
x	kernel.asm	/^    x = xx;$/;"	d
x	kill.asm	/^    x = -xx;$/;"	d
x	kill.asm	/^    x = xx;$/;"	d
x	ln.asm	/^    x = -xx;$/;"	d
x	ln.asm	/^    x = xx;$/;"	d
x	ls.asm	/^    x = -xx;$/;"	d
x	ls.asm	/^    x = xx;$/;"	d
x	mkdir.asm	/^    x = -xx;$/;"	d
x	mkdir.asm	/^    x = xx;$/;"	d
x	prac1.asm	/^    x = -xx;$/;"	d
x	prac1.asm	/^    x = xx;$/;"	d
x	prac2.asm	/^    x = -xx;$/;"	d
x	prac2.asm	/^    x = xx;$/;"	d
x	prac3.asm	/^    x = -xx;$/;"	d
x	prac3.asm	/^    x = xx;$/;"	d
x	prac4.asm	/^    x = -xx;$/;"	d
x	prac4.asm	/^    x = xx;$/;"	d
x	prac5.asm	/^    x = -xx;$/;"	d
x	prac5.asm	/^    x = xx;$/;"	d
x	prac6.asm	/^    x = -xx;$/;"	d
x	prac6.asm	/^    x = xx;$/;"	d
x	prac7.asm	/^    x = -xx;$/;"	d
x	prac7.asm	/^    x = xx;$/;"	d
x	prac8.asm	/^    x = -xx;$/;"	d
x	prac8.asm	/^    x = xx;$/;"	d
x	rm.asm	/^    x = -xx;$/;"	d
x	rm.asm	/^    x = xx;$/;"	d
x	sh.asm	/^    x = -xx;$/;"	d
x	sh.asm	/^    x = xx;$/;"	d
x	stressfs.asm	/^    x = -xx;$/;"	d
x	stressfs.asm	/^    x = xx;$/;"	d
x	test.asm	/^    x = -xx;$/;"	d
x	test.asm	/^    x = xx;$/;"	d
x	umalloc.c	/^  Align x;$/;"	m	union:header	file:
x	usertests.asm	/^    x = -xx;$/;"	d
x	usertests.asm	/^    x = x * 1103515245 + 12345;$/;"	d
x	usertests.asm	/^    x = xx;$/;"	d
x	wc.asm	/^    x = -xx;$/;"	d
x	wc.asm	/^    x = xx;$/;"	d
x	zombie.asm	/^    x = -xx;$/;"	d
x	zombie.asm	/^    x = xx;$/;"	d
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf
xchg	x86.h	/^xchg(volatile uint *addr, uint newval)$/;"	f
xint	mkfs.c	/^xint(uint x)$/;"	f
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf
xshort	mkfs.c	/^xshort(ushort x)$/;"	f
xticks	kernel.asm	/^  xticks = ticks;$/;"	d
year	date.h	/^  uint year;$/;"	m	struct:rtcdate
yield	proc.c	/^yield(void)$/;"	f
zeroes	mkfs.c	/^char zeroes[BSIZE];$/;"	v
